{"version":3,"file":"nuxt-wizard.js","sourceRoot":"","sources":["../../../src/nuxt/nuxt-wizard.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport * as Sentry from '@sentry/node';\nimport chalk from 'chalk';\nimport { lt, minVersion } from 'semver';\nimport { traceStep, withTelemetry } from '../telemetry';\nimport {\n  abort,\n  abortIfCancelled,\n  addDotEnvSentryBuildPluginFile,\n  askShouldCreateExampleComponent,\n  askShouldCreateExamplePage,\n  confirmContinueIfNoOrDirtyGitRepo,\n  ensurePackageIsInstalled,\n  getOrAskForProjectData,\n  getPackageDotJson,\n  getPackageManager,\n  installPackage,\n  printWelcome,\n  runPrettierIfInstalled,\n} from '../utils/clack';\nimport { getPackageVersion, hasPackageInstalled } from '../utils/package-json';\nimport type { WizardOptions } from '../utils/types';\nimport {\n  createExampleComponent,\n  createExamplePage,\n  supportsExamplePage,\n} from './sdk-example';\nimport {\n  addNuxtOverrides,\n  addSDKModule,\n  askDeploymentPlatform,\n  confirmReadImportDocs,\n  createConfigFiles,\n  getNuxtConfig,\n} from './sdk-setup';\nimport { isNuxtV4 } from './utils';\n\nexport function runNuxtWizard(options: WizardOptions) {\n  return withTelemetry(\n    {\n      enabled: options.telemetryEnabled,\n      integration: 'nuxt',\n      wizardOptions: options,\n    },\n    () => runNuxtWizardWithTelemetry(options),\n  );\n}\n\nexport async function runNuxtWizardWithTelemetry(\n  options: WizardOptions,\n): Promise<void> {\n  const { promoCode, telemetryEnabled, forceInstall } = options;\n\n  printWelcome({\n    wizardName: 'Sentry Nuxt Wizard',\n    promoCode,\n    telemetryEnabled,\n  });\n\n  await confirmContinueIfNoOrDirtyGitRepo({\n    ignoreGitChanges: options.ignoreGitChanges,\n    cwd: undefined,\n  });\n\n  const packageJson = await getPackageDotJson();\n\n  await ensurePackageIsInstalled(packageJson, 'nuxt', 'Nuxt');\n\n  const nuxtVersion = getPackageVersion('nuxt', packageJson);\n  Sentry.setTag('nuxt-version', nuxtVersion);\n\n  const minVer = minVersion(nuxtVersion || '0.0.0');\n\n  if (!nuxtVersion || !minVer || lt(minVer, '3.7.0')) {\n    clack.log.warn(\n      \"It seems you're using a Nuxt version <3.7.0 which is not supported by Sentry.\\nWe recommend upgrading to the latest version before you continue.\",\n    );\n    const shouldContinue = await abortIfCancelled(\n      clack.select({\n        message: 'Do you want to continue anyway?',\n        options: [\n          {\n            label: 'Yes, continue',\n            hint: 'The SDK might not work correctly',\n            value: true,\n          },\n          { label: \"No, I'll upgrade first\", value: false },\n        ],\n      }),\n    );\n    if (!shouldContinue) {\n      await abort('Exiting Wizard', 0);\n      return;\n    }\n  }\n\n  const { authToken, selectedProject, selfHosted, sentryUrl } =\n    await getOrAskForProjectData(options, 'javascript-nuxt');\n\n  const packageManager = await getPackageManager();\n\n  await addNuxtOverrides(packageJson, packageManager, minVer, forceInstall);\n\n  const sdkAlreadyInstalled = hasPackageInstalled('@sentry/nuxt', packageJson);\n  Sentry.setTag('sdk-already-installed', sdkAlreadyInstalled);\n\n  await installPackage({\n    packageName: '@sentry/nuxt@^9',\n    alreadyInstalled: sdkAlreadyInstalled,\n    packageManager,\n    forceInstall,\n  });\n\n  await addDotEnvSentryBuildPluginFile(authToken);\n\n  const nuxtConfig = await traceStep('load-nuxt-config', getNuxtConfig);\n\n  const projectData = {\n    org: selectedProject.organization.slug,\n    project: selectedProject.slug,\n    projectId: selectedProject.id,\n    url: sentryUrl,\n    selfHosted,\n  };\n\n  const deploymentPlatform = await askDeploymentPlatform();\n  Sentry.setTag('deployment-platform', deploymentPlatform);\n\n  await traceStep('configure-sdk', async () => {\n    await addSDKModule(nuxtConfig, projectData, deploymentPlatform);\n    await createConfigFiles(selectedProject.keys[0].dsn.public);\n  });\n\n  let shouldCreateExamplePage = false;\n  let shouldCreateExampleButton = false;\n\n  const isV4 = await isNuxtV4(nuxtConfig, nuxtVersion);\n  const canCreateExamplePage = await supportsExamplePage(isV4);\n  Sentry.setTag('supports-example-page-creation', canCreateExamplePage);\n\n  if (canCreateExamplePage) {\n    shouldCreateExamplePage = await askShouldCreateExamplePage();\n\n    if (shouldCreateExamplePage) {\n      await traceStep('create-example-page', async () =>\n        createExamplePage(isV4, projectData),\n      );\n    }\n  } else {\n    shouldCreateExampleButton = await askShouldCreateExampleComponent();\n\n    if (shouldCreateExampleButton) {\n      await traceStep('create-example-component', async () =>\n        createExampleComponent(isV4),\n      );\n    }\n  }\n\n  await runPrettierIfInstalled({\n    cwd: undefined,\n  });\n\n  await confirmReadImportDocs(deploymentPlatform);\n\n  clack.outro(\n    buildOutroMessage(shouldCreateExamplePage, shouldCreateExampleButton),\n  );\n}\n\nfunction buildOutroMessage(\n  shouldCreateExamplePage: boolean,\n  shouldCreateExampleButton: boolean,\n): string {\n  let msg = chalk.green('\\nSuccessfully installed the Sentry Nuxt SDK!');\n\n  if (shouldCreateExamplePage) {\n    msg += `\\n\\nYou can validate your setup by visiting ${chalk.cyan(\n      '\"/sentry-example-page\"',\n    )}.`;\n  }\n  if (shouldCreateExampleButton) {\n    msg += `\\n\\nYou can validate your setup by adding the ${chalk.cyan(\n      '`SentryExampleButton`',\n    )} component to a page and triggering it.`;\n  }\n\n  msg += `\\n\\nCheck out the SDK documentation for further configuration: ${chalk.underline(\n    'https://docs.sentry.io/platforms/javascript/guides/nuxt/',\n  )}`;\n\n  return msg;\n}\n"]}