{"version":3,"file":"BaseIntegration.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/BaseIntegration.ts"],"names":[],"mappings":";;;AAGA,0CAAuC;AAEvC,MAAsB,eAAgB,SAAQ,mBAAQ;IAIvB;IAHtB,IAAI,CAAS;IACV,gBAAgB,CAAmB;IAE7C,YAA6B,KAAW;QACtC,KAAK,CAAC,KAAK,CAAC,CAAC;QADc,UAAK,GAAL,KAAK,CAAM;QAEtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,4DAA4D;IACrD,KAAK,CAAC,SAAS,CAAC,QAAiB;QACtC,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,eAAe,CAAC,QAAiB;QAC5C,kEAAkE;QAClE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAC9B;QACD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,QAAiB;QACvC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAC7D,CAAC,MAAe,EAAE,EAAE,CAAC,MAAM,CAC5B,CAAC;IACJ,CAAC;CAGF;AAnCD,0CAmCC","sourcesContent":["import type { Answers } from 'inquirer';\n\nimport type { Args } from '../../Constants';\nimport { BaseStep } from '../BaseStep';\n\nexport abstract class BaseIntegration extends BaseStep {\n  public type: string;\n  protected _shouldConfigure: Promise<Answers>;\n\n  public constructor(protected _argv: Args) {\n    super(_argv);\n    this.type = this.constructor.name;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async uninstall(_answers: Answers): Promise<Answers> {\n    return {};\n  }\n\n  /**\n   * This can be used for example for platform:boolean to determine\n   * if we should configure iOS/Android.\n   * Basically this will be merged into answers so it can be checked by a later step.\n   */\n  public async shouldConfigure(_answers: Answers): Promise<Answers> {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n    this._shouldConfigure = Promise.resolve({ platform: true });\n    return this._shouldConfigure;\n  }\n\n  public async shouldEmit(_answers: Answers): Promise<boolean> {\n    return Object.values(await this.shouldConfigure(_answers)).some(\n      (active: boolean) => active,\n    );\n  }\n\n  public abstract emit(answers: Answers): Promise<Answers>;\n}\n"]}