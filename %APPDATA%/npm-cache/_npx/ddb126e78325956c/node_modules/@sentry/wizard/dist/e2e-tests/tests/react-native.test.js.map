{"version":3,"file":"react-native.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/react-native.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport { KEYS, TEST_ARGS, cleanupGit, revertLocalChanges } from '../utils';\nimport { startWizardInstance } from '../utils';\nimport { checkFileContents } from '../utils';\nimport { afterAll, beforeAll, describe, test } from 'vitest';\n\ndescribe('ReactNative', () => {\n  const integration = Integration.reactNative;\n  const projectDir = path.resolve(\n    __dirname,\n    '../test-applications/react-native-test-app',\n  );\n\n  beforeAll(async () => {\n    const wizardInstance = startWizardInstance(integration, projectDir);\n    const packageManagerPrompted = await wizardInstance.waitForOutput(\n      'Please select your package manager.',\n    );\n    const sessionReplayPrompted =\n      packageManagerPrompted &&\n      (await wizardInstance.sendStdinAndWaitForOutput(\n        // Selecting `yarn` as the package manager\n        [KEYS.DOWN, KEYS.DOWN, KEYS.ENTER],\n        'Do you want to enable Session Replay to help debug issues? (See https://docs.sentry.io/platforms/react-native/session-replay/)',\n      ));\n    const prettierPrompted =\n    sessionReplayPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      // Enable session replay\n      [KEYS.ENTER],\n      'Looks like you have Prettier in your project. Do you want to run it on your files?',\n    ));\n    const testEventPrompted =\n      prettierPrompted &&\n      (await wizardInstance.sendStdinAndWaitForOutput(\n        // Skip prettier\n        [KEYS.DOWN, KEYS.ENTER],\n        'Have you successfully sent a test event?',\n      ));\n    testEventPrompted &&\n      (await wizardInstance.sendStdinAndWaitForOutput(\n        // Respond that test event was sent\n        [KEYS.ENTER],\n        'Everything is set up!',\n      ));\n    wizardInstance.kill();\n  });\n\n  afterAll(() => {\n    revertLocalChanges(projectDir);\n    cleanupGit(projectDir);\n  });\n\n  test('package.json is updated correctly', () => {\n    checkFileContents(`${projectDir}/package.json`, `@sentry/react-native`);\n  });\n\n  test('metro.config.js is updated correctly', () => {\n    checkFileContents(\n      `${projectDir}/metro.config.js`,\n      `const {\n withSentryConfig\n} = require(\"@sentry/react-native/metro\");`,\n    );\n    checkFileContents(\n      `${projectDir}/metro.config.js`,\n      `module.exports = withSentryConfig(mergeConfig(getDefaultConfig(__dirname), config));`,\n    );\n  });\n\n  test('App.tsx is updated correctly', () => {\n    checkFileContents(\n      `${projectDir}/App.tsx`,\n      `import * as Sentry from '@sentry/react-native';\n\nSentry.init({\n  dsn: 'https://public@dsn.ingest.sentry.io/1337',\n\n  // Configure Session Replay\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1,\n  integrations: [Sentry.mobileReplayIntegration()],\n\n  // uncomment the line below to enable Spotlight (https://spotlightjs.com)\n  // spotlight: __DEV__,\n});`,\n    );\n    checkFileContents(\n      `${projectDir}/App.tsx`,\n      `export default Sentry.wrap(App);`,\n    );\n  });\n\n  test('android/sentry.properties is added', () => {\n    checkFileContents(\n      `${projectDir}/android/sentry.properties`,\n      `auth.token=${TEST_ARGS.AUTH_TOKEN}\n\ndefaults.org=${TEST_ARGS.ORG_SLUG}\ndefaults.project=${TEST_ARGS.PROJECT_SLUG}\n\ndefaults.url=https://sentry.io/`,\n    );\n  });\n\n  test('build.gradle is updated correctly', () => {\n    checkFileContents(\n      `${projectDir}/android/app/build.gradle`,\n      `apply from: new File([\"node\", \"--print\", \"require.resolve('@sentry/react-native/package.json')\"].execute().text.trim(), \"../sentry.gradle\")`,\n    );\n  });\n});\n"]}