{"version":3,"file":"expo-metro.js","sourceRoot":"","sources":["../../../src/react-native/expo-metro.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport type { ProxifiedModule } from 'magicast';\nimport chalk from 'chalk';\nimport * as Sentry from '@sentry/node';\n\nimport { getLastRequireIndex, hasSentryContent } from '../utils/ast-utils';\nimport { makeCodeSnippet, showCopyPasteInstructions } from '../utils/clack';\n\nimport { metroConfigPath, parseMetroConfig, writeMetroConfig } from './metro';\n\nimport * as recast from 'recast';\nimport x = recast.types;\nimport t = x.namedTypes;\n\nconst b = recast.types.builders;\n\nexport async function addSentryToExpoMetroConfig() {\n  if (!fs.existsSync(metroConfigPath)) {\n    const success = await createSentryExpoMetroConfig();\n    if (!success) {\n      Sentry.setTag('expo-metro-config', 'create-new-error');\n      return await showInstructions();\n    }\n    Sentry.setTag('expo-metro-config', 'created-new');\n    return undefined;\n  }\n\n  const mod = await parseMetroConfig();\n\n  let didPatch = false;\n  try {\n    didPatch = patchMetroInMemory(mod);\n  } catch (e) {\n    // noop\n  }\n  if (!didPatch) {\n    Sentry.setTag('expo-metro-config', 'patch-error');\n    clack.log.error(\n      `Could not patch ${chalk.cyan(\n        metroConfigPath,\n      )} with Sentry configuration.`,\n    );\n    return await showInstructions();\n  }\n\n  const saved = await writeMetroConfig(mod);\n  if (saved) {\n    Sentry.setTag('expo-metro-config', 'patch-saved');\n    clack.log.success(\n      chalk.green(`${chalk.cyan(metroConfigPath)} changes saved.`),\n    );\n  } else {\n    Sentry.setTag('expo-metro-config', 'patch-save-error');\n    clack.log.warn(\n      `Could not save changes to ${chalk.cyan(\n        metroConfigPath,\n      )}, please follow the manual steps.`,\n    );\n    return await showInstructions();\n  }\n}\n\nexport function patchMetroInMemory(mod: ProxifiedModule): boolean {\n  const ast = mod.$ast as t.Program;\n\n  if (hasSentryContent(ast)) {\n    clack.log.warn(\n      `The ${chalk.cyan(\n        metroConfigPath,\n      )} file already has Sentry configuration.`,\n    );\n    return false;\n  }\n\n  let didReplaceDefaultConfigCall = false;\n\n  recast.visit(ast, {\n    visitVariableDeclaration(path) {\n      const { node } = path;\n\n      if (\n        // path is require(\"expo/metro-config\")\n        // and only getDefaultConfig is being destructured\n        // then remove the entire declaration\n        node.declarations.length > 0 &&\n        node.declarations[0].type === 'VariableDeclarator' &&\n        node.declarations[0].init &&\n        node.declarations[0].init.type === 'CallExpression' &&\n        node.declarations[0].init.callee &&\n        node.declarations[0].init.callee.type === 'Identifier' &&\n        node.declarations[0].init.callee.name === 'require' &&\n        node.declarations[0].init.arguments[0].type === 'StringLiteral' &&\n        node.declarations[0].init.arguments[0].value === 'expo/metro-config' &&\n        node.declarations[0].id.type === 'ObjectPattern' &&\n        node.declarations[0].id.properties.length === 1 &&\n        node.declarations[0].id.properties[0].type === 'ObjectProperty' &&\n        node.declarations[0].id.properties[0].key.type === 'Identifier' &&\n        node.declarations[0].id.properties[0].key.name === 'getDefaultConfig'\n      ) {\n        path.prune();\n        return false;\n      }\n\n      this.traverse(path);\n    },\n\n    visitCallExpression(path) {\n      const { node } = path;\n      if (\n        // path is getDefaultConfig\n        // then rename it to getSentryExpoConfig\n        node.callee.type === 'Identifier' &&\n        node.callee.name === 'getDefaultConfig'\n      ) {\n        node.callee.name = 'getSentryExpoConfig';\n        didReplaceDefaultConfigCall = true;\n        return false;\n      }\n\n      this.traverse(path);\n    },\n  });\n\n  if (!didReplaceDefaultConfigCall) {\n    clack.log.warn(\n      `Could not find \\`getDefaultConfig\\` in ${chalk.cyan(metroConfigPath)}.`,\n    );\n    return false;\n  }\n\n  addSentryExpoConfigRequire(ast);\n\n  return true;\n}\n\nexport function addSentryExpoConfigRequire(program: t.Program) {\n  const lastRequireIndex = getLastRequireIndex(program);\n  const sentryExpoConfigRequire = createSentryExpoConfigRequire();\n  program.body.splice(lastRequireIndex + 1, 0, sentryExpoConfigRequire);\n}\n\n/**\n * Creates const { getSentryExpoConfig } = require(\"@sentry/react-native/metro\");\n */\nfunction createSentryExpoConfigRequire() {\n  return b.variableDeclaration('const', [\n    b.variableDeclarator(\n      b.objectPattern([\n        b.objectProperty.from({\n          key: b.identifier('getSentryExpoConfig'),\n          value: b.identifier('getSentryExpoConfig'),\n          shorthand: true,\n        }),\n      ]),\n      b.callExpression(b.identifier('require'), [\n        b.literal('@sentry/react-native/metro'),\n      ]),\n    ),\n  ]);\n}\n\nasync function createSentryExpoMetroConfig(): Promise<boolean> {\n  const snippet = `const { getSentryExpoConfig } = require(\"@sentry/react-native/metro\");\n\nconst config = getSentryExpoConfig(__dirname);\n\nmodule.exports = config;\n`;\n  try {\n    await fs.promises.writeFile(metroConfigPath, snippet);\n  } catch (e) {\n    clack.log.error(\n      `Could not create ${chalk.cyan(\n        metroConfigPath,\n      )} with Sentry configuration.`,\n    );\n    return false;\n  }\n  clack.log.success(\n    `Created ${chalk.cyan(metroConfigPath)} with Sentry configuration.`,\n  );\n  return true;\n}\n\nfunction showInstructions() {\n  return showCopyPasteInstructions({\n    filename: metroConfigPath,\n    codeSnippet: getMetroWithSentryExpoConfigSnippet(true),\n  });\n}\n\nfunction getMetroWithSentryExpoConfigSnippet(colors: boolean): string {\n  return makeCodeSnippet(colors, (unchanged, plus, minus) =>\n    unchanged(`${minus(\n      `// const { getDefaultConfig } = require(\"expo/metro-config\");`,\n    )}\n${plus(\n  `const { getSentryExpoConfig } = require(\"@sentry/react-native/metro\");`,\n)}\n\n${minus(`// const config = getDefaultConfig(__dirname);`)}\n${plus(`const config = getSentryExpoConfig(__dirname);`)}\n\nmodule.exports = config;`),\n  );\n}\n"]}