{"version":3,"file":"Package.js","sourceRoot":"","sources":["../../../lib/Helper/Package.ts"],"names":[],"mappings":";;;AAAA,mCAA8D;AAE9D,uCAAuC;AAOvC,SAAgB,mBAAmB,CACjC,UAA0B,EAC1B,WAAmB,EACnB,kBAA0B,EAC1B,WAAoB;IAEpB,MAAM,WAAW,GAAG,UAAU,EAAE,YAAY,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAClE,MAAM,cAAc,GAAG,UAAU,EAAE,eAAe,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAExE,IAAI,CAAC,WAAW,IAAI,CAAC,cAAc,EAAE;QACnC,IAAA,aAAG,EAAC,KAAK,WAAW,8BAA8B,CAAC,CAAC;QACpD,IAAA,aAAG,EAAC,oCAAoC,CAAC,CAAC;QAC1C,OAAO,KAAK,CAAC;KACd;IACD,IACE,CAAC,oBAAoB,CAAC,WAAW,EAAE,kBAAkB,EAAE,WAAW,CAAC;QACnE,CAAC,oBAAoB,CAAC,cAAc,EAAE,kBAAkB,EAAE,WAAW,CAAC,EACtE;QACA,IAAA,aAAG,EACD,oDAAoD,WAAW,8CAA8C,kBAAkB,KAAK,CACrI,CAAC;QACF,OAAO,KAAK,CAAC;KACd;IACD,IAAA,eAAK,EACH,+BAA+B,WAAW,sCAAsC,CACjF,CAAC;IACF,OAAO,IAAI,CAAC;AACd,CAAC;AA3BD,kDA2BC;AAED,SAAS,oBAAoB,CAC3B,OAAe,EACf,kBAA0B,EAC1B,WAAoB;IAEpB,IAAI,OAAO,KAAK,QAAQ,EAAE;QACxB,OAAO,WAAW,CAAC;KACpB;IAED,IAAI,kBAAkB,EAAE,OAAO,CAAC;IAEhC,IAAI,IAAA,cAAK,EAAC,OAAO,CAAC,EAAE;QAClB,kBAAkB,GAAG,IAAA,cAAK,EAAC,OAAO,CAAC,CAAC;QACpC,OAAO,GAAG,KAAK,CAAC;KACjB;SAAM,IAAI,IAAA,mBAAU,EAAC,OAAO,CAAC,EAAE;QAC9B,kBAAkB,GAAG,IAAA,mBAAU,EAAC,OAAO,CAAC,CAAC;QACzC,OAAO,GAAG,IAAI,CAAC;KAChB;IAED,OAAO;IACL,yGAAyG;IACzG,CAAC,CAAC,kBAAkB;QACpB,CAAC,OAAO;YACN,CAAC,CAAC,IAAA,eAAM,EAAC,kBAAkB,EAAE,kBAAkB,CAAC;YAChD,CAAC,CAAC,IAAA,kBAAS,EAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CACvD,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,SAAgB,mBAAmB,CACjC,UAA0B,EAC1B,WAAmB;IAEnB,MAAM,WAAW,GAAG,UAAU,CAAC,YAAY,EAAE,CAAC,WAAW,CAAC,CAAC;IAC3D,MAAM,cAAc,GAAG,UAAU,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC,CAAC;IACjE,OAAO,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,cAAc,CAAC;AAC3C,CAAC;AAPD,kDAOC","sourcesContent":["import { satisfies, subset, valid, validRange } from 'semver';\n\nimport { green, red } from './Logging';\n\ntype PackageDotJson = {\n  dependencies?: Record<string, string>;\n  devDependencies?: Record<string, string>;\n};\n\nexport function checkPackageVersion(\n  appPackage: PackageDotJson,\n  packageName: string,\n  acceptableVersions: string,\n  canBeLatest: boolean,\n): boolean {\n  const depsVersion = appPackage?.dependencies?.[packageName] ?? '';\n  const devDepsVersion = appPackage?.devDependencies?.[packageName] ?? '';\n\n  if (!depsVersion && !devDepsVersion) {\n    red(`✗ ${packageName} isn't in your dependencies.`);\n    red('  Please install it with yarn/npm.');\n    return false;\n  }\n  if (\n    !fulfillsVersionRange(depsVersion, acceptableVersions, canBeLatest) &&\n    !fulfillsVersionRange(devDepsVersion, acceptableVersions, canBeLatest)\n  ) {\n    red(\n      `✗ Your \\`package.json\\` specifies a version of \\`${packageName}\\` outside of the compatible version range ${acceptableVersions}.\\n`,\n    );\n    return false;\n  }\n  green(\n    `✓ A compatible version of \\`${packageName}\\` is specified in \\`package.json\\`.`,\n  );\n  return true;\n}\n\nfunction fulfillsVersionRange(\n  version: string,\n  acceptableVersions: string,\n  canBeLatest: boolean,\n): boolean {\n  if (version === 'latest') {\n    return canBeLatest;\n  }\n\n  let cleanedUserVersion, isRange;\n\n  if (valid(version)) {\n    cleanedUserVersion = valid(version);\n    isRange = false;\n  } else if (validRange(version)) {\n    cleanedUserVersion = validRange(version);\n    isRange = true;\n  }\n\n  return (\n    // If the given version is a bogus format, this will still be undefined and we'll automatically reject it\n    !!cleanedUserVersion &&\n    (isRange\n      ? subset(cleanedUserVersion, acceptableVersions)\n      : satisfies(cleanedUserVersion, acceptableVersions))\n  );\n}\n\n/**\n * Determines if the passed `package.json` object has the passed package installed.\n *\n * @param appPackage The `package.json` object\n * @param packageName The name of the package to check for\n *\n * @returns `true` if the package is installed, `false` otherwise\n */\nexport function hasPackageInstalled(\n  appPackage: PackageDotJson,\n  packageName: string,\n): boolean {\n  const depsVersion = appPackage.dependencies?.[packageName];\n  const devDepsVersion = appPackage.devDependencies?.[packageName];\n  return !!depsVersion || !!devDepsVersion;\n}\n"]}