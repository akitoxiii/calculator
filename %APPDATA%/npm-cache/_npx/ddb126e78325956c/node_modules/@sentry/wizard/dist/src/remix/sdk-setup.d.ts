import type { ProxifiedModule } from 'magicast';
import type { PackageDotJson } from '../utils/package-json';
export type PartialRemixConfig = {
    unstable_dev?: boolean;
    future?: {
        v2_dev?: boolean;
        v2_errorBoundary?: boolean;
        v2_headers?: boolean;
        v2_meta?: boolean;
        v2_normalizeFormMethod?: boolean;
        v2_routeConvention?: boolean;
    };
};
export declare function runRemixReveal(isTS: boolean): void;
export declare function generateServerInstrumentationFile(dsn: string, selectedFeatures: {
    performance: boolean;
    replay: boolean;
}): {
    instrumentationFile: string;
    instrumentationFileMod: ProxifiedModule<any>;
};
export declare function createServerInstrumentationFile(dsn: string, selectedFeatures: {
    performance: boolean;
    replay: boolean;
}): Promise<string>;
export declare function insertServerInstrumentationFile(dsn: string, selectedFeatures: {
    performance: boolean;
    replay: boolean;
}): Promise<boolean>;
export declare function isRemixV2(remixConfig: PartialRemixConfig, packageJson: PackageDotJson): boolean;
export declare function loadRemixConfig(): Promise<PartialRemixConfig>;
export declare function instrumentRootRoute(isV2?: boolean, isTS?: boolean): Promise<void>;
export declare function updateBuildScript(args: {
    org: string;
    project: string;
    url?: string;
    isHydrogen: boolean;
}): Promise<void>;
export declare function updateEntryClientMod(originalEntryClientMod: ProxifiedModule<any>, dsn: string, selectedFeatures: {
    performance: boolean;
    replay: boolean;
}): ProxifiedModule<any>;
export declare function initializeSentryOnEntryClient(dsn: string, isTS: boolean, selectedFeatures: {
    performance: boolean;
    replay: boolean;
}): Promise<void>;
export declare function updateStartScript(instrumentationFile: string): Promise<void>;
export declare function instrumentSentryOnEntryServer(isV2: boolean, isTS: boolean): Promise<void>;
