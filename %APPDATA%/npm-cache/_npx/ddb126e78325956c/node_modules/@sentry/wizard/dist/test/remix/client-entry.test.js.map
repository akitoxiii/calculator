{"version":3,"file":"client-entry.test.js","sourceRoot":"","sources":["../../../test/remix/client-entry.test.ts"],"names":[],"mappings":";;AAAA,kFAAkF;AAClF,uCAAuC;AACvC,yDAAiE;AACjE,mCAA8C;AAE9C,IAAA,iBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAA,WAAE,EAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,0CAA0C;QAC1C,MAAM,sBAAsB,GAAG,IAAA,sBAAW,EAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,GAAG,GAAG,uBAAuB,CAAC;QACpC,MAAM,gBAAgB,GAAG;YACvB,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,MAAM,MAAM,GAAG,IAAA,gCAAoB,EACjC,sBAAsB,EACtB,GAAG,EACH,gBAAgB,CACjB,CAAC;QAEF,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;KA0BpD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,0CAA0C;QAC1C,MAAM,sBAAsB,GAAG,IAAA,sBAAW,EAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,GAAG,GAAG,uBAAuB,CAAC;QACpC,MAAM,gBAAgB,GAAG;YACvB,WAAW,EAAE,KAAK;YAClB,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,MAAM,MAAM,GAAG,IAAA,gCAAoB,EACjC,sBAAsB,EACtB,GAAG,EACH,gBAAgB,CACjB,CAAC;QAEF,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcpD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,0CAA0C;QAC1C,MAAM,sBAAsB,GAAG,IAAA,sBAAW,EAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,GAAG,GAAG,uBAAuB,CAAC;QACpC,MAAM,gBAAgB,GAAG;YACvB,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,KAAK;SACd,CAAC;QAEF,MAAM,MAAM,GAAG,IAAA,gCAAoB,EACjC,sBAAsB,EACtB,GAAG,EACH,gBAAgB,CACjB,CAAC;QAEF,IAAA,eAAM,EAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;KAoBpD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { parseModule } from 'magicast';\nimport { updateEntryClientMod } from '../../src/remix/sdk-setup';\nimport { describe, expect, it } from 'vitest';\n\ndescribe('initializeSentryOnEntryClient', () => {\n  it('should initialize Sentry on client entry with all features enabled', () => {\n    // Empty entry.client.tsx file for testing\n    const originalEntryClientMod = parseModule('');\n\n    const dsn = 'https://sentry.io/123';\n    const selectedFeatures = {\n      performance: true,\n      replay: true,\n    };\n\n    const result = updateEntryClientMod(\n      originalEntryClientMod,\n      dsn,\n      selectedFeatures,\n    );\n\n    expect(result.generate().code).toMatchInlineSnapshot(`\n      \"import {  useEffect,} from \"react\";\n\n      import {\n        useLocation,\n        useMatches,\n      } from \"@remix-run/react\";\n\n      import {  init, replayIntegration, browserTracingIntegration,} from \"@sentry/remix\";\n\n      init({\n          dsn: \"https://sentry.io/123\",\n          tracesSampleRate: 1,\n\n          integrations: [browserTracingIntegration({\n            useEffect,\n            useLocation,\n            useMatches\n          }), replayIntegration({\n              maskAllText: true,\n              blockAllMedia: true\n          })],\n\n          replaysSessionSampleRate: 0.1,\n          replaysOnErrorSampleRate: 1\n      })\"\n    `);\n  });\n\n  it('should initialize Sentry on client entry when performance disabled', () => {\n    // Empty entry.client.tsx file for testing\n    const originalEntryClientMod = parseModule('');\n\n    const dsn = 'https://sentry.io/123';\n    const selectedFeatures = {\n      performance: false,\n      replay: true,\n    };\n\n    const result = updateEntryClientMod(\n      originalEntryClientMod,\n      dsn,\n      selectedFeatures,\n    );\n\n    expect(result.generate().code).toMatchInlineSnapshot(`\n      \"import {  init, replayIntegration,} from \"@sentry/remix\";\n\n      init({\n          dsn: \"https://sentry.io/123\",\n\n          integrations: [replayIntegration({\n              maskAllText: true,\n              blockAllMedia: true\n          })],\n\n          replaysSessionSampleRate: 0.1,\n          replaysOnErrorSampleRate: 1\n      })\"\n    `);\n  });\n\n  it('should initialize Sentry on client entry when replay disabled', () => {\n    // Empty entry.client.tsx file for testing\n    const originalEntryClientMod = parseModule('');\n\n    const dsn = 'https://sentry.io/123';\n    const selectedFeatures = {\n      performance: true,\n      replay: false,\n    };\n\n    const result = updateEntryClientMod(\n      originalEntryClientMod,\n      dsn,\n      selectedFeatures,\n    );\n\n    expect(result.generate().code).toMatchInlineSnapshot(`\n      \"import {  useEffect,} from \"react\";\n\n      import {\n        useLocation,\n        useMatches,\n      } from \"@remix-run/react\";\n\n      import {  init, browserTracingIntegration,} from \"@sentry/remix\";\n\n      init({\n          dsn: \"https://sentry.io/123\",\n          tracesSampleRate: 1,\n\n          integrations: [browserTracingIntegration({\n            useEffect,\n            useLocation,\n            useMatches\n          })]\n      })\"\n    `);\n  });\n});\n"]}