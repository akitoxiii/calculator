{"version":3,"file":"fastlane.js","sourceRoot":"","sources":["../../../src/apple/fastlane.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { askForItemSelection } from '../utils/clack';\nimport * as templates from './templates';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\n\nexport function fastFile(projectPath: string): string | null {\n  const fastlanePath = path.join(projectPath, 'fastlane', 'Fastfile');\n  return fs.existsSync(fastlanePath) ? fastlanePath : null;\n}\n\nfunction findIOSPlatform(\n  content: string,\n): { index: number; length: number } | null {\n  const platformRegex = /^ *platform\\s+:([^ ]+)[^\\n]*\\n/gim;\n  let match = platformRegex.exec(content);\n  if (!match) {\n    // No platform found, treat whole file as one platform.\n    return { index: 0, length: content.length };\n  }\n\n  let index = -1;\n  while (match) {\n    if (match[1] === 'ios') {\n      index = match.index + match[0].length;\n      break;\n    }\n    match = platformRegex.exec(content);\n  }\n\n  if (index === -1) {\n    return null;\n  }\n\n  //After finding the platform, we need to find the end of the platform block.\n  //This solution has the assumption that the file is well formed,\n  //which is not a perfect solution, but it's good enough assumption.\n  const platformEndRegex = /^end[^\\n]*/gim;\n  match = platformEndRegex.exec(content.slice(index));\n  if (!match) {\n    return null;\n  }\n\n  return { index, length: match.index };\n}\n\nfunction findLanes(\n  content: string,\n): { index: number; length: number; name: string }[] | null {\n  const laneRegex = /^ {2}lane\\s+:([^ ]+)[^\\n]*\\n/gim;\n  let match = laneRegex.exec(content);\n  if (!match) {\n    return null;\n  }\n\n  const lanes: { index: number; length: number; name: string }[] = [];\n  while (match) {\n    const laneEnd = /^ {2}end/m.exec(\n      content.slice(match.index + match[0].length),\n    );\n    if (laneEnd === null) {\n      return null;\n    }\n    lanes.push({\n      index: match.index + match[0].length,\n      length: laneEnd.index,\n      name: match[1],\n    });\n    match = laneRegex.exec(content);\n  }\n  return lanes;\n}\n\nfunction addSentryToLane(\n  content: string,\n  lane: { index: number; length: number; name: string },\n  org: string,\n  project: string,\n): string {\n  const laneContent = content.slice(lane.index, lane.index + lane.length);\n  const sentryCLIMatch = /sentry_cli\\s*\\([^)]+\\)/gim.exec(laneContent);\n  if (sentryCLIMatch) {\n    // Sentry already added to lane. Update it.\n    return (\n      content.slice(0, sentryCLIMatch.index + lane.index) +\n      templates.getFastlaneSnippet(org, project).trim() +\n      content.slice(\n        sentryCLIMatch.index + sentryCLIMatch[0].length + lane.index,\n      )\n    );\n  }\n\n  // Sentry not added to lane. Add it.\n  return (\n    content.slice(0, lane.index + lane.length) +\n    '\\n' +\n    templates.getFastlaneSnippet(org, project) +\n    '\\n' +\n    content.slice(lane.index + lane.length)\n  );\n}\n\nexport async function addSentryToFastlane(\n  projectDir: string,\n  org: string,\n  project: string,\n): Promise<boolean> {\n  const fastFilePath = fastFile(projectDir);\n  if (!fastFilePath) {\n    return false;\n  }\n\n  const fileContent = fs.readFileSync(fastFilePath, 'utf8');\n  const platform = findIOSPlatform(fileContent);\n  if (!platform) {\n    return false;\n  }\n\n  const platformContent = fileContent.slice(\n    platform.index,\n    platform.index + platform.length,\n  );\n  const lanes = findLanes(platformContent);\n  lanes?.forEach((l) => (l.index += platform.index));\n\n  if (!lanes || lanes.length === 0) {\n    clack.log.warn('No suitable lanes in your Fastfile.');\n    return false;\n  }\n\n  let newFileContent: string | undefined;\n  if (lanes.length === 1) {\n    newFileContent = addSentryToLane(fileContent, lanes[0], org, project);\n  } else {\n    const laneNames = lanes.map((l) => l.name);\n    const selectedLane = await askForItemSelection(\n      laneNames,\n      'Select lane to add Sentry to:',\n    );\n    if (selectedLane === undefined) {\n      return false;\n    }\n    newFileContent = addSentryToLane(\n      fileContent,\n      lanes[selectedLane.index],\n      org,\n      project,\n    );\n  }\n\n  fs.writeFileSync(fastFilePath, newFileContent, 'utf8');\n  return true;\n}\n\n/**\n * Exported for testing purposes, but should not be used in other modules.\n */\nexport let exportForTesting: {\n  findIOSPlatform: typeof findIOSPlatform;\n  findLanes: typeof findLanes;\n  addSentryToLane: typeof addSentryToLane;\n};\nif (process.env.NODE_ENV === 'test') {\n  exportForTesting = {\n    findIOSPlatform,\n    findLanes,\n    addSentryToLane,\n  };\n}\n"]}