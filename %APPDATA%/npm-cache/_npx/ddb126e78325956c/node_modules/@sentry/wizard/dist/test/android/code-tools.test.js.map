{"version":3,"file":"code-tools.test.js","sourceRoot":"","sources":["../../../test/android/code-tools.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,6DAAyE;AAEzE,IAAA,iBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAA,iBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,IAAI,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,YAAY,CAAC;YACxE,IAAA,eAAM,EAAC,IAAA,sCAAyB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1C,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,IAAI,GACR,wBAAwB,GAAG,uBAAuB,GAAG,YAAY,CAAC;YACpE,IAAA,eAAM,EAAC,IAAA,sCAAyB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1C,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,IAAI,GAAG,gBAAgB,GAAG,uBAAuB,GAAG,YAAY,CAAC;YACvE,IAAA,eAAM,EAAC,IAAA,sCAAyB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1C,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,IAAI,GACR,4BAA4B,GAAG,uBAAuB,GAAG,YAAY,CAAC;YACxE,IAAA,eAAM,EAAC,IAAA,sCAAyB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1C,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,IAAI,GACR,4BAA4B;gBAC5B,gBAAgB;gBAChB,wBAAwB;gBACxB,iBAAiB;gBACjB,uBAAuB;gBACvB,YAAY,CAAC;YACf,IAAA,eAAM,EAAC,IAAA,sCAAyB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1C,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { getLastImportLineLocation } from '../../src/android/code-tools';\n\ndescribe('code-tools', () => {\n  describe('getLastImportLineLocation', () => {\n    it('returns proper line index', () => {\n      const code = `import a.b.c;\\n` + `//<insert-location>\\n` + `class X {}`;\n      expect(getLastImportLineLocation(code)).toBe(\n        code.indexOf('//<insert-location>'),\n      );\n    });\n\n    it('returns proper line index when static import is used', () => {\n      const code =\n        `import static a.b.c;\\n` + `//<insert-location>\\n` + `class X {}`;\n      expect(getLastImportLineLocation(code)).toBe(\n        code.indexOf('//<insert-location>'),\n      );\n    });\n\n    it('returns proper line index when wildcard import is used', () => {\n      const code = `import a.b.*\\n` + `//<insert-location>\\n` + `class X {}`;\n      expect(getLastImportLineLocation(code)).toBe(\n        code.indexOf('//<insert-location>'),\n      );\n    });\n\n    it('returns proper line index when alias import is used', () => {\n      const code =\n        `import static a.b.c as d\\n` + `//<insert-location>\\n` + `class X {}`;\n      expect(getLastImportLineLocation(code)).toBe(\n        code.indexOf('//<insert-location>'),\n      );\n    });\n\n    it('returns proper line index when multiple imports are present', () => {\n      const code =\n        `import static a.b.c as d\\n` +\n        `import a.b.*\\n` +\n        `import static a.b.c;\\n` +\n        `import a.b.c;\\n` +\n        `//<insert-location>\\n` +\n        `class X {}`;\n      expect(getLastImportLineLocation(code)).toBe(\n        code.indexOf('//<insert-location>'),\n      );\n    });\n  });\n});\n"]}