{"version":3,"file":"PromptForParameters.js","sourceRoot":"","sources":["../../../lib/Steps/PromptForParameters.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Answers } from 'inquirer';\nimport { prompt } from 'inquirer';\n\nimport { dim } from '../Helper/Logging';\nimport { getCurrentIntegration } from '../Helper/Wizard';\nimport { BaseStep } from './BaseStep';\nimport { Config } from '../Types';\n\nexport class PromptForParameters extends BaseStep {\n  public async emit(\n    answers: Answers & { config?: Config },\n  ): Promise<Answers & Config> {\n    this.debug(answers);\n    if (!(await getCurrentIntegration(answers).shouldEmit(answers))) {\n      return {};\n    }\n    if (this._argv.quiet) {\n      return {};\n    }\n\n    let url = this._getFullUrl(answers);\n    const organization = await prompt<{ slug: string }>([\n      {\n        message: 'Organization Slug:',\n        name: 'slug',\n        type: 'input',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        validate: this._validateSlug,\n        when: this._shouldAsk(answers, 'config.organization.slug', () => {\n          dim('Please copy/paste your organization slug');\n          dim(`It can be found in the url ${url}`);\n        }),\n      },\n    ]);\n\n    url = this._getFullUrl(answers, organization.slug);\n    const project = await prompt<{ slug: string }>([\n      {\n        message: 'Project Slug:',\n        name: 'slug',\n        type: 'input',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        validate: this._validateSlug,\n        when: this._shouldAsk(answers, 'config.project.slug', () => {\n          dim('Please copy/paste your project slug');\n          dim(`It can be found in the url ${url}`);\n        }),\n      },\n    ]);\n\n    url = this._getFullUrl(answers, organization.slug, project.slug);\n    const dsnKeyUrl = this._getDSNKeyUrl(answers, project.slug);\n    const dsn = await prompt<{ public: string }>([\n      {\n        message: 'DSN:',\n        name: 'public',\n        type: 'input',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        validate: this._validateDSN,\n        when: this._shouldAsk(answers, 'config.dsn.public', () => {\n          dim('Please copy/paste your DSN');\n          dim(`It can be found here: ${dsnKeyUrl}`);\n        }),\n      },\n    ]);\n\n    const auth = await prompt<{ token: string }>([\n      {\n        message: 'Auth Token:',\n        name: 'token',\n        type: 'input',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        validate: this._validateAuthToken,\n        when: this._shouldAsk(answers, 'config.auth.token', () => {\n          dim('Please copy/paste your auth token');\n          dim(`It can be found here: ${this._argv.url}api/`);\n          dim(\n            'In case there is none yet, create one with [project:releases] permission',\n          );\n        }),\n      },\n    ]);\n\n    return {\n      config: {\n        ...answers.config,\n        auth,\n        dsn,\n        project,\n        organization,\n      },\n    } as Answers & { config?: Config };\n  }\n\n  private _getFullUrl(\n    answers: Answers & { config?: Config },\n    organizationSlug?: string,\n    projectSlug?: string,\n  ): string {\n    const baseUrl = this._argv.url;\n    const orgSlug =\n      answers.config?.organization?.slug ??\n      organizationSlug ??\n      'organization_slug';\n    const projSlug =\n      answers.config?.project?.slug ?? projectSlug ?? 'project_slug';\n    return `${baseUrl}${orgSlug}/${projSlug}`;\n  }\n\n  private _getDSNKeyUrl(\n    answers: Answers & { config?: Config },\n    projectSlug?: string,\n  ): string {\n    const baseUrl = this._argv.url;\n    const projSlug =\n      answers.config?.project?.slug ?? projectSlug ?? 'project_slug';\n    return `${baseUrl}settings/projects/${projSlug}/keys`;\n  }\n\n  private _shouldAsk(\n    answers: Answers,\n    configKey: string,\n    preHook?: () => void,\n  ): boolean {\n    const shouldAsk = answers[configKey] != null;\n    if (shouldAsk && preHook) {\n      preHook();\n    }\n    return shouldAsk;\n  }\n\n  private _validateAuthToken(input: string): boolean | string {\n    const isOrgToken = input.startsWith('sntrys_');\n\n    if (isOrgToken) {\n      if (!isValidOrgToken(input)) {\n        return 'Make sure you correctly copied your auth token. It should start with \"sntrys_\"';\n      }\n      return true;\n    }\n\n    if (!input.match(/(sntrys_)?[0-9a-f]{64}/g)) {\n      return 'Make sure you copied the correct auth token, it should be 64 hex chars';\n    }\n    return true;\n  }\n\n  private _validateSlug(input: string): boolean | string {\n    if (input.match(/[A-Z]/g)) {\n      return 'Please copy the slug from the url, it should be all lowercase';\n    }\n    if (input.length === 0) {\n      return \"Can't be empty\";\n    }\n    return true;\n  }\n\n  private _validateDSN(input: string): boolean | string {\n    const match = input.match(\n      /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w.-]+)(?::(\\d+))?(\\/.*)$/,\n    );\n    if (!match) {\n      return 'Invalid DSN format';\n    }\n    if (match[1] !== 'http' && match[1] !== 'https') {\n      return `Unsupported protocol for DSN: ${match[1]}`;\n    }\n    return true;\n  }\n}\n\ntype MaybeOrgAuthToken = {\n  iat?: number;\n  url?: string;\n  org?: string;\n  region_url?: string;\n};\n\n/**\n * Trying to parse and decode an org auth token. Based on:\n * - https://github.com/getsentry/rfcs/blob/main/text/0091-ci-upload-tokens.md#parsing-tokens\n * - https://github.com/getsentry/rfcs/blob/main/text/0091-ci-upload-tokens.md#token-facts\n */\nfunction isValidOrgToken(input: string): boolean {\n  if (!input.startsWith('sntrys_')) {\n    return false;\n  }\n\n  const tokenParts = input.split('_');\n  if (tokenParts.length < 3) {\n    return false;\n  }\n\n  try {\n    const payload = tokenParts[1];\n    const decodedPayload = Buffer.from(payload, 'base64').toString();\n    const jsonPayload = JSON.parse(decodedPayload) as MaybeOrgAuthToken;\n    if (!jsonPayload.iat || !jsonPayload.url || !jsonPayload.org) {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n"]}