{"version":3,"file":"fastfile.test.js","sourceRoot":"","sources":["../../../test/apple/fastfile.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs';\nimport * as os from 'node:os';\nimport * as path from 'node:path';\nimport {\n  addSentryToFastlane,\n  exportForTesting,\n  fastFile,\n} from '../../src/apple/fastlane';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport { beforeEach, describe, expect, it, vi } from 'vitest';\n\nvi.mock('@clack/prompts', async () => ({\n  __esModule: true,\n  ...(await vi.importActual<typeof clack>('@clack/prompts')),\n}));\n\ndescribe('fastlane', () => {\n  beforeEach(() => {\n    vi.spyOn(clack.log, 'warn').mockImplementation(() => {\n      /* empty */\n    });\n    vi.spyOn(clack, 'select').mockResolvedValue(undefined);\n  });\n\n  describe('#fastFile', () => {\n    describe('file exists', () => {\n      it('should return path', () => {\n        // -- Arrange --\n        const { fastlaneDir, projectPath } = createFastlaneDir();\n        const fastfile = createFastfile(fastlaneDir, 'lane :test do');\n\n        // -- Act --\n        const result = fastFile(projectPath);\n\n        // -- Assert --\n        expect(result).toBe(fastfile);\n      });\n    });\n\n    describe('file does not exist', () => {\n      it('should return null', () => {\n        // -- Arrange --\n        const { projectPath } = createFastlaneDir();\n        // do not create Fastfile\n\n        // -- Act --\n        const result = fastFile(projectPath);\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n  });\n\n  describe('#findIOSPlatform', () => {\n    describe('platform block detection', () => {\n      const variations: {\n        name: string;\n        content: string;\n        expected: { index: number; length: number };\n      }[] = [\n        {\n          name: 'no platform',\n          content: `lane :test do\nend`,\n          expected: { index: 0, length: 17 },\n        },\n        {\n          name: 'platform is ios',\n          content: `platform: ios\nlane :test do\nend`,\n          expected: { index: 0, length: 31 },\n        },\n        {\n          name: 'platform is ios and other platform',\n          content: `platform: ios\nend\nplatform: android\n  lane :test do\n  end`,\n          expected: { index: 0, length: 57 },\n        },\n        {\n          name: 'platform is ios and other platform',\n          content: `\n\\t\\tplatform: ios\n\\t\\tend\n\\t\\tplatform: android\n\\t\\t\\tlane :test do\n\\t\\t\\tend`,\n          expected: { index: 0, length: 66 },\n        },\n      ];\n\n      for (const variation of variations) {\n        describe(`${variation.name}`, () => {\n          it('should return null', () => {\n            // -- Act --\n            const result = exportForTesting.findIOSPlatform(variation.content);\n\n            // -- Assert --\n            expect(result).toEqual(variation.expected);\n          });\n        });\n      }\n    });\n\n    describe('platform block not found', () => {\n      it('should return full content', () => {\n        // -- Arrange --\n        const content = `\n        lane :test do\n          puts 'Hello, world!'\n        end`;\n\n        // -- Act --\n        const result = exportForTesting.findIOSPlatform(content);\n\n        // -- Assert --\n        expect(result).toEqual({ index: 0, length: 65 });\n      });\n    });\n\n    describe('invalid platform block', () => {\n      it('should return null', () => {\n        // -- Arrange --\n        // platform block is not opened with `do`\n        const content = `\nplatform :ios\\n\n  lane :test do\n    puts 'Hello, world!'\n  end\nend\n`;\n\n        // -- Act --\n        const result = exportForTesting.findIOSPlatform(content);\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('platform block is not closed', () => {\n      it('should return null', () => {\n        // -- Arrange --\n        const content = `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n  end\n`;\n\n        // -- Act --\n        const result = exportForTesting.findIOSPlatform(content);\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('multiple platforms detected', () => {\n      it('should return block with ios platform', () => {\n        // -- Arrange --\n        const content = `\nfastlane_version '2.53.1'\n\nbefore_all do\n  ensure_git_branch\n  ensure_git_status_clean\n  git_pull\nend\n\nplatform :ios do\n   # iOS Lanes\nend\n\nplatform :android do\n  # Android Lanes\nend\n`;\n        // -- Act --\n        const result = exportForTesting.findIOSPlatform(content);\n\n        // -- Assert --\n        expect(result).toEqual({ index: 121, length: 15 });\n      });\n    });\n  });\n\n  describe('#findLanes', () => {\n    describe('lanes detection', () => {\n      describe('valid cases', () => {\n        const variations: {\n          name: string;\n          content: string;\n          expected: { index: number; length: number; name: string }[] | null;\n        }[] = [\n          {\n            name: 'single lane',\n            content: `\n  lane :test do\n    puts 'Hello, world!'\n  end\n`,\n            expected: [{ index: 17, length: 25, name: 'test' }],\n          },\n          {\n            name: 'multiple lanes',\n            content: `\n  lane :test do\n    puts 'Hello, world!'\n  end\n  lane :test2 do\n    puts 'Hello, world!'\n  end`,\n            expected: [\n              { index: 17, length: 25, name: 'test' },\n              { index: 65, length: 25, name: 'test2' },\n            ],\n          },\n        ];\n\n        for (const variation of variations) {\n          describe(`${variation.name}`, () => {\n            it('should return lanes', () => {\n              // -- Act --\n              const result = exportForTesting.findLanes(variation.content);\n\n              // -- Assert --\n              expect(result).toEqual(variation.expected);\n            });\n          });\n        }\n      });\n\n      describe('invalid cases', () => {\n        describe('lane is not indented', () => {\n          it('should return null', () => {\n            // -- Arrange --\n            const content = `lane :test do\\nend`;\n\n            // -- Act --\n            const result = exportForTesting.findLanes(content);\n\n            // -- Assert --\n            expect(result).toBeNull();\n          });\n        });\n\n        describe('lane is not closed', () => {\n          it('should return null', () => {\n            // -- Arrange --\n            const content = `  lane :test do\\n`;\n\n            // -- Act --\n            const result = exportForTesting.findLanes(content);\n\n            // -- Assert --\n            expect(result).toBeNull();\n          });\n        });\n      });\n    });\n  });\n\n  describe('#addSentryToLane', () => {\n    describe('sentry_cli is not present', () => {\n      it('should return original content', () => {\n        // -- Arrange --\n        const content = `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n  end\nend\n`;\n        const lane = { index: 34, length: 25, name: 'test' };\n\n        // -- Act --\n        const result = exportForTesting.addSentryToLane(\n          content,\n          lane,\n          'test-org',\n          'test-project',\n        );\n\n        // -- Assert --\n        expect(result).toBe(`\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n\n    sentry_cli(\n      org_slug: 'test-org',\n      project_slug: 'test-project',\n      include_sources: true\n    )\n  end\nend\n`);\n      });\n    });\n\n    describe('sentry_cli is present', () => {\n      it('should return updated content', () => {\n        // -- Arrange --\n        const content = `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n\n    sentry_cli(org_slug: 'test-org', project_slug: 'test-project')\n  end\nend\n`;\n        const lane = { index: 34, length: 92, name: 'test' };\n\n        // -- Act --\n        const result = exportForTesting.addSentryToLane(\n          content,\n          lane,\n          'test-org',\n          'test-project',\n        );\n\n        // -- Assert --\n        expect(result).toBe(\n          `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n\n    sentry_cli(\n      org_slug: 'test-org',\n      project_slug: 'test-project',\n      include_sources: true\n    )\n  end\nend\n`,\n        );\n      });\n    });\n  });\n\n  describe('#addSentryToFastlane', () => {\n    const org = 'test-org';\n    const project = 'test-project';\n\n    describe('Fastfile not found', () => {\n      it('should return false', async () => {\n        // -- Arrange --\n        const { projectPath } = createFastlaneDir();\n        const fastfilePath = path.join(projectPath, 'Fastfile');\n        // do not create Fastfile\n\n        // -- Act --\n        const result = await addSentryToFastlane(projectPath, org, project);\n\n        // -- Assert --\n        expect(result).toBe(false);\n        expect(fs.existsSync(fastfilePath)).toBe(false);\n      });\n    });\n\n    describe('platform not found', () => {\n      it('should return false', async () => {\n        // -- Arrange --\n        const { fastlaneDir, projectPath } = createFastlaneDir();\n        const fastfilePath = createFastfile(\n          fastlaneDir,\n          `\nplatform :ios\n  lane :test do\n    puts 'Hello, world!'\n  end\nend\n`,\n        );\n        const originalContent = fs.readFileSync(fastfilePath, 'utf8');\n\n        // -- Act --\n        const result = await addSentryToFastlane(projectPath, org, project);\n\n        // -- Assert --\n        expect(result).toBe(false);\n        expect(fs.readFileSync(fastfilePath, 'utf8')).toBe(originalContent);\n      });\n    });\n\n    describe('no lanes', () => {\n      it('should return false', async () => {\n        // -- Arrange --\n        const { fastlaneDir, projectPath } = createFastlaneDir();\n        createFastfile(fastlaneDir, `platform :ios`);\n\n        // -- Act --\n        const result = await addSentryToFastlane(projectPath, org, project);\n\n        // -- Assert --\n        expect(result).toBe(false);\n      });\n\n      it('should warn user', async () => {\n        // -- Arrange --\n        const { fastlaneDir, projectPath } = createFastlaneDir();\n        createFastfile(fastlaneDir, `platform :ios`);\n\n        // -- Act --\n        const result = await addSentryToFastlane(projectPath, org, project);\n\n        // -- Assert --\n        expect(result).toBe(false);\n        expect(clack.log.warn).toHaveBeenCalledWith(\n          'No suitable lanes in your Fastfile.',\n        );\n      });\n    });\n\n    describe('single lane', () => {\n      it('should return true', async () => {\n        // -- Arrange --\n        const { fastlaneDir, projectPath } = createFastlaneDir();\n        const fastfilePath = createFastfile(\n          fastlaneDir,\n          `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n  end\nend\n`,\n        );\n\n        // -- Act --\n        const result = await addSentryToFastlane(projectPath, org, project);\n\n        // -- Assert --\n        expect(result).toBe(true);\n        expect(fs.readFileSync(fastfilePath, 'utf8')).toBe(\n          `\nplatform :ios do\n  lane :test do\n    puts 'Hello, world!'\n\n    sentry_cli(\n      org_slug: 'test-org',\n      project_slug: 'test-project',\n      include_sources: true\n    )\n  end\nend\n`,\n        );\n      });\n    });\n\n    describe('multiple lanes', () => {\n      let fastfilePath: string;\n      let projectPath: string;\n      let originalContent: string;\n\n      beforeEach(() => {\n        const createdFastlaneDir = createFastlaneDir();\n        projectPath = createdFastlaneDir.projectPath;\n        fastfilePath = createFastfile(\n          createdFastlaneDir.fastlaneDir,\n          `platform :ios do\n  lane :test do\n    puts 'Hello, world!'\n  end\n\n  lane :beta do\n    puts 'Beta lane'\n  end\nend\n`,\n        );\n      });\n\n      describe('no lane selected', () => {\n        it('should not modify Fastfile', async () => {\n          // -- Arrange --\n          originalContent = fs.readFileSync(fastfilePath, 'utf8');\n          vi.spyOn(clack, 'select').mockResolvedValue(undefined);\n\n          // -- Act --\n          const result = await addSentryToFastlane(projectPath, org, project);\n\n          // -- Assert --\n          expect(result).toBe(false);\n          expect(fs.readFileSync(fastfilePath, 'utf8')).toBe(originalContent);\n        });\n      });\n\n      describe('lane selected', () => {\n        it('should modify only selected lane', async () => {\n          // -- Arrange --\n          vi.spyOn(clack, 'select').mockResolvedValue({\n            value: 'beta',\n            index: 1,\n          });\n\n          // -- Act --\n          const result = await addSentryToFastlane(projectPath, org, project);\n\n          // -- Assert --\n          expect(result).toBe(true);\n          expect(fs.readFileSync(fastfilePath, 'utf8')).toBe(\n            `platform :ios do\n  lane :test do\n    puts 'Hello, world!'\n  end\n\n  lane :beta do\n    puts 'Beta lane'\n\n    sentry_cli(\n      org_slug: 'test-org',\n      project_slug: 'test-project',\n      include_sources: true\n    )\n  end\nend\n`,\n          );\n          expect(clack.select).toHaveBeenCalledWith({\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            maxItems: expect.any(Number),\n            message: 'Select lane to add Sentry to:',\n            options: [\n              { value: { value: 'test', index: 0 }, label: 'test' },\n              { value: { value: 'beta', index: 1 }, label: 'beta' },\n            ],\n          });\n        });\n      });\n    });\n  });\n});\n\nfunction createFastlaneDir() {\n  const projectPath = fs.mkdtempSync(path.join(os.tmpdir(), 'test-project'));\n  const fastlaneDir = path.join(projectPath, 'fastlane');\n  fs.mkdirSync(fastlaneDir, {\n    recursive: true,\n  });\n  return { fastlaneDir, projectPath };\n}\n\nfunction createFastfile(fastlaneDir: string, content: string) {\n  const fastfile = path.join(fastlaneDir, 'Fastfile');\n  fs.writeFileSync(fastfile, content);\n  return fastfile;\n}\n"]}