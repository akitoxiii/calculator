"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchesContent = exports.exists = exports.matchFiles = exports.patchMatchingFile = void 0;
const fs = __importStar(require("fs"));
const glob = __importStar(require("glob"));
const IGNORE_PATTERN = ['node_modules/**', 'ios/Pods/**', '**/Pods/**'];
function patchMatchingFile(globPattern, func, ...args) {
    const matches = glob.sync(globPattern, {
        ignore: IGNORE_PATTERN,
    });
    let rv = Promise.resolve();
    matches.forEach((match) => {
        const contents = fs.readFileSync(match, {
            encoding: 'utf-8',
        });
        rv = rv
            .then(() => func(contents, match, ...args))
            .then((newContents) => {
            if (newContents != null && contents !== newContents) {
                fs.writeFileSync(match, newContents);
            }
        });
    });
    return rv;
}
exports.patchMatchingFile = patchMatchingFile;
function matchFiles(globPattern) {
    return glob.sync(globPattern, {
        ignore: IGNORE_PATTERN,
    });
}
exports.matchFiles = matchFiles;
function exists(globPattern) {
    const matches = glob.sync(globPattern, {
        ignore: IGNORE_PATTERN,
    });
    if (matches.length === 0) {
        return false;
    }
    return matches.reduce((prev, match) => {
        return prev && fs.existsSync(match);
    }, true);
}
exports.exists = exists;
function matchesContent(globPattern, contentPattern) {
    const matches = glob.sync(globPattern, {
        ignore: IGNORE_PATTERN,
    });
    if (matches.length === 0) {
        return false;
    }
    return matches.reduce((prev, match) => {
        return !!(prev && fs.readFileSync(match).toString().match(contentPattern));
    }, true);
}
exports.matchesContent = matchesContent;
//# sourceMappingURL=File.js.map