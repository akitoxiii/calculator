{"version":3,"file":"code-tools.test.js","sourceRoot":"","sources":["../../../test/apple/code-tools.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport {\n  addCodeSnippetToProject,\n  exportForTesting,\n} from '../../src/apple/code-tools';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\n\n// Test Constants\nconst invalidAppDelegateSwift = `func application() {}`;\nconst validAppDelegateSwift = `\nimport UIKit\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n}`;\nconst validAppDelegateSwiftWithSentry = `\nimport UIKit\nimport Sentry\n\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        SentrySDK.start { options in\n            options.dsn = \"https://example.com/sentry-dsn\"\n            options.debug = true // Enabled debug when first installing is always helpful\n            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n            // We recommend adjusting this value in production.\n            options.tracesSampleRate = 1.0\n\n            // Configure profiling. Visit https://docs.sentry.io/platforms/apple/profiling/ to learn more.\n            options.configureProfiling = {\n                $0.sessionSampleRate = 1.0 // We recommend adjusting this value in production.\n                $0.lifecycle = .trace\n            }\n\n            // Uncomment the following lines to add more data to your events\n            // options.attachScreenshot = true // This adds a screenshot to the error events\n            // options.attachViewHierarchy = true // This adds the view hierarchy to the error events\n        }\n        // Remove the next line after confirming that your Sentry integration is working.\n        SentrySDK.capture(message: \"This app uses Sentry! :)\")\n\n        // Override point for customization after application launch.\n        return true\n    }\n}`;\nconst invalidAppDelegateObjC = `\n- (BOOL)application:(UIApplication *) {\n  return NO;\n}`;\nconst validAppDelegateObjC = `\n#import \"AppDelegate.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // Override point for customization after application launch.\n    return YES;\n}\n\n@end`;\nconst validAppDelegateObjCWithSentry = `@import Sentry;\n\n#import \"AppDelegate.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [SentrySDK startWithConfigureOptions:^(SentryOptions * options) {\n        options.dsn = @\"https://example.com/sentry-dsn\";\n        options.debug = YES; // Enabled debug when first installing is always helpful\n        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n        // We recommend adjusting this value in production.\n        options.tracesSampleRate = @1.0;\n\n        // Configure profiling. Visit https://docs.sentry.io/platforms/apple/profiling/ to learn more.\n        options.configureProfiling = ^(SentryProfileOptions *profiling) {\n            profiling.sessionSampleRate = 1.0; // We recommend adjusting this value in production.\n            profiling.lifecycle = SentryProfilingLifecycleTrace;\n        };\n\n        //Uncomment the following lines to add more data to your events\n        //options.attachScreenshot = YES; //This will add a screenshot to the error events\n        //options.attachViewHierarchy = YES; //This will add the view hierarchy to the error events\n    }];\n    //Remove the next line after confirming that your Sentry integration is working.\n    [SentrySDK captureMessage:@\"This app uses Sentry!\"];\n\n    // Override point for customization after application launch.\n    return YES;\n}\n\n@end`;\nconst invalidAppDelegateSwiftUI = `\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup { Text(\"Hello, world!\") }\n  }\n}`;\nconst validAppDelegateSwiftUI = `\nimport SwiftUI\n\n@main\nstruct TestApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}`;\nconst validAppDelegateSwiftUIWithSentry = `\nimport SwiftUI\nimport Sentry\n\n\n@main\nstruct TestApp: App {\n    init() {\n        SentrySDK.start { options in\n            options.dsn = \"https://example.com/sentry-dsn\"\n            options.debug = true // Enabled debug when first installing is always helpful\n            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n            // We recommend adjusting this value in production.\n            options.tracesSampleRate = 1.0\n\n            // Configure profiling. Visit https://docs.sentry.io/platforms/apple/profiling/ to learn more.\n            options.configureProfiling = {\n                $0.sessionSampleRate = 1.0 // We recommend adjusting this value in production.\n                $0.lifecycle = .trace\n            }\n\n            // Uncomment the following lines to add more data to your events\n            // options.attachScreenshot = true // This adds a screenshot to the error events\n            // options.attachViewHierarchy = true // This adds the view hierarchy to the error events\n        }\n        // Remove the next line after confirming that your Sentry integration is working.\n        SentrySDK.capture(message: \"This app uses Sentry! :)\")\n    }\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}`;\n\nconst prepareTempDir = (): string => {\n  const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'code-tools-test'));\n  return tempDir;\n};\n\nconst prepareAppDelegateFile = (\n  dir: string,\n  content: string,\n  ext: 'm' | 'mm' | 'swift',\n): string => {\n  const filePath = path.join(dir, `AppDelegate.${ext}`);\n  fs.writeFileSync(filePath, content, 'utf8');\n  return filePath;\n};\n\nconst dsn = 'https://example.com/sentry-dsn';\n\n// Mock Setup\n\nvi.mock('../../src/utils/bash');\nvi.spyOn(Sentry, 'setTag').mockImplementation(() => undefined);\nvi.spyOn(Sentry, 'captureException').mockImplementation(() => 'id');\n\n// Test Suite\n\ndescribe('code-tools', () => {\n  beforeEach(() => {\n    vi.spyOn(clack.log, 'info').mockImplementation(() => undefined);\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('#isAppDelegateFile', () => {\n    const prepareTestFile = (\n      content: string,\n      ext: 'm' | 'mm' | 'swift',\n    ): string => {\n      const tempDir = prepareTempDir();\n      return prepareAppDelegateFile(tempDir, content, ext);\n    };\n\n    describe('swift files', () => {\n      describe('swift app launch regex', () => {\n        describe('valid cases', () => {\n          const variations: {\n            name: string;\n            code: string;\n          }[] = [\n            {\n              name: 'with underscores',\n              code: 'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {',\n            },\n            {\n              name: 'with different dictionary type',\n              code: 'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {',\n            },\n            {\n              name: 'with extra whitespace',\n              code: '  func  application  (  _  application:  UIApplication  ,   didFinishLaunchingWithOptions   launchOptions:   [  NSObject  :  AnyObject  ]?  )   ->   Bool   {  ',\n            },\n            {\n              name: 'macOS notification variant',\n              code: 'func applicationDidFinishLaunching(_ aNotification: Notification) {',\n            },\n            {\n              name: 'macOS with extra whitespace',\n              code: 'func   applicationDidFinishLaunching  (  _   aNotification:  Notification  )  {',\n            },\n          ];\n\n          for (const variation of variations) {\n            describe(`${variation.name}`, () => {\n              it(`should return true`, () => {\n                // -- Arrange --\n                const filePath = prepareTestFile(variation.code, 'swift');\n\n                // -- Act --\n                const result = exportForTesting.isAppDelegateFile(filePath);\n\n                // -- Assert --\n                expect(result).toBeTruthy();\n              });\n            });\n          }\n\n          describe('invalid cases', () => {\n            const variations: {\n              name: string;\n              code: string;\n            }[] = [\n              {\n                name: 'missing application method',\n                code: 'import UIKit',\n              },\n              {\n                name: 'typo in method name',\n                code: 'func applicatioM(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {',\n              },\n              {\n                name: 'garbage input',\n                code: 'asdf;jk23;uas()d{',\n              },\n            ];\n\n            for (const variation of variations) {\n              describe(`${variation.name}`, () => {\n                it('should return false', () => {\n                  // -- Arrange --\n                  const filePath = prepareTestFile(variation.code, 'swift');\n\n                  // -- Act --\n                  const result = exportForTesting.isAppDelegateFile(filePath);\n\n                  // -- Assert --\n                  expect(result).toBeFalsy();\n                });\n              });\n            }\n          });\n        });\n      });\n    });\n\n    describe('objc files', () => {\n      describe('valid cases', () => {\n        const variations: {\n          name: string;\n          code: string;\n        }[] = [\n          {\n            name: 'basic',\n            code: '- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {',\n          },\n          {\n            name: 'with more whitespace',\n            code: '-  (  BOOL )  application:  (  UIApplication  *   )   application   didFinishLaunchingWithOptions:  (  NSDictionary  *  )  launchOptions   {',\n          },\n        ];\n\n        for (const variation of variations) {\n          describe(`${variation.name}`, () => {\n            it('should return true', () => {\n              // -- Arrange --\n              const filePath = prepareTestFile(variation.code, 'm');\n\n              // -- Act --\n              const result = exportForTesting.isAppDelegateFile(filePath);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n            });\n          });\n        }\n      });\n\n      describe('invalid cases', () => {\n        const variations: {\n          name: string;\n          code: string;\n        }[] = [\n          {\n            name: 'missing application method',\n            code: 'import UIKit',\n          },\n        ];\n\n        for (const variation of variations) {\n          describe(`${variation.name}`, () => {\n            it('should return false', () => {\n              // -- Arrange --\n              const filePath = prepareTestFile(variation.code, 'm');\n\n              // -- Act --\n              const result = exportForTesting.isAppDelegateFile(filePath);\n\n              // -- Assert --\n              expect(result).toBeFalsy();\n            });\n          });\n        }\n      });\n    });\n\n    describe('swiftui files', () => {\n      describe('valid cases', () => {\n        const variations: {\n          name: string;\n          code: string;\n        }[] = [\n          {\n            name: 'basic',\n            code: '@main struct MyApp: App {',\n          },\n          {\n            name: 'with more whitespace',\n            code: '@main    struct   MyApp:   App   {',\n          },\n          {\n            name: 'with SwiftUI namespace',\n            code: '@main struct App: SwiftUI.App {',\n          },\n        ];\n\n        for (const variation of variations) {\n          describe(`${variation.name}`, () => {\n            it('should return true', () => {\n              // -- Arrange --\n              const filePath = prepareTestFile(variation.code, 'swift');\n\n              // -- Act --\n              const result = exportForTesting.isAppDelegateFile(filePath);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n            });\n          });\n        }\n      });\n\n      describe('invalid cases', () => {\n        const variations: {\n          name: string;\n          code: string;\n        }[] = [\n          {\n            name: 'missing @main',\n            code: 'struct App: App {',\n          },\n          {\n            name: 'missing super-type App',\n            code: 'struct MyApp {',\n          },\n          {\n            name: 'imported not from SwiftUI',\n            code: '@main struct App: MySwiftyUI.App {',\n          },\n          {\n            name: 'imported not from SwiftUI but similar',\n            code: '@main struct App: MySwiftUI.App {',\n          },\n        ];\n\n        for (const variation of variations) {\n          describe(`${variation.name}`, () => {\n            it('should return false', () => {\n              // -- Arrange --\n              const filePath = prepareTestFile(variation.code, 'swift');\n\n              // -- Act --\n              const result = exportForTesting.isAppDelegateFile(filePath);\n\n              // -- Assert --\n              expect(result).toBeFalsy();\n            });\n          });\n        }\n      });\n    });\n\n    describe('file not found', () => {\n      it('should throw an error', () => {\n        // -- Arrange --\n        const invalidPath = path.join(os.tmpdir(), 'invalid-path');\n\n        // -- Act & Assert --\n        expect(() => exportForTesting.isAppDelegateFile(invalidPath)).toThrow();\n      });\n    });\n  });\n\n  describe('#findAppDidFinishLaunchingWithOptions', () => {\n    describe('no files given', () => {\n      it('should check files in directory', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n        const filePath = prepareAppDelegateFile(\n          tempDir,\n          validAppDelegateSwift,\n          'swift',\n        );\n\n        // -- Act --\n        const result =\n          exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n        // -- Assert --\n        expect(result).toBe(filePath);\n      });\n    });\n\n    describe('SwiftUI file found', () => {\n      describe('is app delegate', () => {\n        it('should return the file path', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = prepareAppDelegateFile(\n            tempDir,\n            validAppDelegateSwiftUI,\n            'swift',\n          );\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBe(filePath);\n        });\n      });\n\n      describe('is not app delegate', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          prepareAppDelegateFile(tempDir, invalidAppDelegateSwiftUI, 'swift');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n    });\n\n    describe('Swift file found', () => {\n      describe('is app delegate', () => {\n        it('should return the file path', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = prepareAppDelegateFile(\n            tempDir,\n            validAppDelegateSwift,\n            'swift',\n          );\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBe(filePath);\n        });\n      });\n\n      describe('is not app delegate', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          prepareAppDelegateFile(tempDir, invalidAppDelegateSwift, 'swift');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n    });\n\n    describe('Objective-C file found', () => {\n      describe('is app delegate', () => {\n        it('should return the file path', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = prepareAppDelegateFile(\n            tempDir,\n            validAppDelegateObjC,\n            'm',\n          );\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBe(filePath);\n        });\n      });\n\n      describe('is not app delegate', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          prepareAppDelegateFile(tempDir, invalidAppDelegateObjC, 'm');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n    });\n\n    describe('Objective-C++ file found', () => {\n      describe('is app delegate', () => {\n        it('should return the file path', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = prepareAppDelegateFile(\n            tempDir,\n            validAppDelegateObjC,\n            'mm',\n          );\n\n          // -- Act --\n          const result = exportForTesting.findAppDidFinishLaunchingWithOptions(\n            tempDir,\n            [filePath],\n          );\n\n          // -- Assert --\n          expect(result).toBe(filePath);\n        });\n      });\n\n      describe('is not app delegate', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          prepareAppDelegateFile(tempDir, invalidAppDelegateObjC, 'mm');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n    });\n\n    describe('file in list not found', () => {\n      it('should return null', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n        const filePath = prepareAppDelegateFile(\n          tempDir,\n          invalidAppDelegateSwift,\n          'swift',\n        );\n\n        // -- Act --\n        const result = exportForTesting.findAppDidFinishLaunchingWithOptions(\n          tempDir,\n          [filePath],\n        );\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('unrelated file found', () => {\n      it('should be ignored', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n        const filePath = prepareAppDelegateFile(\n          tempDir,\n          invalidAppDelegateSwift,\n          'swift',\n        );\n\n        // -- Act --\n        const result = exportForTesting.findAppDidFinishLaunchingWithOptions(\n          tempDir,\n          [filePath],\n        );\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('directory in list', () => {\n      describe('name starts with dot', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n\n          const hiddenDir = path.join(tempDir, '.hidden');\n          fs.mkdirSync(hiddenDir);\n\n          prepareAppDelegateFile(hiddenDir, validAppDelegateSwift, 'swift');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n\n      describe('name ends with .xcodeproj', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const xcodeDir = path.join(tempDir, 'MyProject.xcodeproj');\n          fs.mkdirSync(xcodeDir);\n\n          prepareAppDelegateFile(xcodeDir, validAppDelegateSwift, 'swift');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n\n      describe('name ends with .xcassets', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const xcassetsDir = path.join(tempDir, 'MyProject.xcassets');\n          fs.mkdirSync(xcassetsDir);\n\n          prepareAppDelegateFile(xcassetsDir, validAppDelegateSwift, 'swift');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n\n      describe('is not a directory', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = path.join(tempDir, 'some-file');\n          fs.writeFileSync(filePath, validAppDelegateSwift, 'utf8');\n\n          // -- Act --\n          const result =\n            exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n          // -- Assert --\n          expect(result).toBeNull();\n        });\n      });\n    });\n\n    describe('multiple files could be app delegate', () => {\n      it('should return the first one', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n        const filePath = prepareAppDelegateFile(\n          tempDir,\n          validAppDelegateSwift,\n          'swift',\n        );\n        prepareAppDelegateFile(tempDir, validAppDelegateSwift, 'swift');\n\n        // -- Act --\n        const result =\n          exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n        // -- Assert --\n        expect(result).toBe(filePath);\n      });\n    });\n\n    describe('multiple nested directories with app delegate', () => {\n      it('should return the first one', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n\n        const nestedDir = path.join(tempDir, 'nested');\n        fs.mkdirSync(nestedDir);\n        const nestedFilePath = prepareAppDelegateFile(\n          nestedDir,\n          validAppDelegateSwift,\n          'swift',\n        );\n\n        const nestedDir2 = path.join(tempDir, 'nested2');\n        fs.mkdirSync(nestedDir2);\n        prepareAppDelegateFile(nestedDir2, validAppDelegateSwift, 'swift');\n\n        // -- Act --\n        const result =\n          exportForTesting.findAppDidFinishLaunchingWithOptions(tempDir);\n\n        // -- Assert --\n        expect(result).toBe(nestedFilePath);\n      });\n    });\n\n    describe('no app delegate found', () => {\n      it('should return null', () => {\n        // -- Arrange --\n        const tempDir = fs.mkdtempSync(\n          path.join(os.tmpdir(), 'code-tools-test'),\n        );\n\n        // -- Act --\n        const result = exportForTesting.findAppDidFinishLaunchingWithOptions(\n          tempDir,\n          [],\n        );\n\n        // -- Assert --\n        expect(result).toBeNull();\n      });\n    });\n  });\n\n  describe('#addCodeSnippetToProject', () => {\n    describe('app delegate file is not found', () => {\n      it('should return false', () => {\n        // -- Arrange --\n        const tempDir = prepareTempDir();\n\n        // -- Act --\n        const result = addCodeSnippetToProject(\n          tempDir,\n          ['AppDelegate.swift'],\n          'https://example.com/sentry-dsn',\n        );\n\n        // -- Assert --\n        expect(result).toBeFalsy();\n      });\n    });\n\n    describe('app delegate file is found', () => {\n      let tempDir: string;\n      let appDelegatePath: string;\n\n      beforeEach(() => {\n        // -- Arrange --\n        tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'code-tools-test'));\n        appDelegatePath = path.join(tempDir, 'AppDelegate.swift');\n        fs.writeFileSync(appDelegatePath, validAppDelegateSwift, 'utf8');\n      });\n\n      describe('is Swift file', () => {\n        describe('Sentry is not initialized', () => {\n          let tempDir: string;\n          let filePath: string;\n\n          beforeEach(() => {\n            tempDir = prepareTempDir();\n            filePath = prepareAppDelegateFile(\n              tempDir,\n              validAppDelegateSwift,\n              'swift',\n            );\n          });\n\n          it('should add the code snippet', () => {\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n            expect(modifiedFileContent).toBe(validAppDelegateSwiftWithSentry);\n          });\n\n          it(\"should set tag 'code-language'\", () => {\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            expect(Sentry.setTag).toHaveBeenCalledWith(\n              'code-language',\n              'swift',\n            );\n          });\n\n          it(\"should set tag 'ui-engine'\", () => {\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            expect(Sentry.setTag).toHaveBeenCalledWith('ui-engine', 'uikit');\n          });\n        });\n\n        describe('Sentry is already initialized', () => {\n          it('should not add the code snippet', () => {\n            // -- Arrange --\n            const tempDir = prepareTempDir();\n            const filePath = prepareAppDelegateFile(\n              tempDir,\n              validAppDelegateSwiftWithSentry,\n              'swift',\n            );\n\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n            expect(modifiedFileContent).toBe(validAppDelegateSwiftWithSentry);\n          });\n        });\n\n        describe('is SwiftUI file', () => {\n          describe('Sentry is not initialized', () => {\n            let tempDir: string;\n            let filePath: string;\n\n            beforeEach(() => {\n              tempDir = prepareTempDir();\n              filePath = prepareAppDelegateFile(\n                tempDir,\n                validAppDelegateSwiftUI,\n                'swift',\n              );\n            });\n\n            it('should add the code snippet', () => {\n              // -- Act --\n              const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n              const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n              expect(modifiedFileContent).toBe(\n                validAppDelegateSwiftUIWithSentry,\n              );\n            });\n\n            it(\"should set tag 'code-language'\", () => {\n              // -- Act --\n              const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n              expect(Sentry.setTag).toHaveBeenNthCalledWith(\n                1,\n                'code-language',\n                'swift',\n              );\n            });\n\n            it(\"should set tag 'ui-engine'\", () => {\n              // -- Act --\n              const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n              expect(Sentry.setTag).toHaveBeenNthCalledWith(\n                2,\n                'ui-engine',\n                'swiftui',\n              );\n            });\n          });\n\n          describe('Sentry is already initialized', () => {\n            it('should not add the code snippet', () => {\n              // -- Arrange --\n              const tempDir = prepareTempDir();\n              const filePath = prepareAppDelegateFile(\n                tempDir,\n                validAppDelegateSwiftUIWithSentry,\n                'swift',\n              );\n\n              // -- Act --\n              const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n              // -- Assert --\n              expect(result).toBeTruthy();\n              const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n              expect(modifiedFileContent).toBe(\n                validAppDelegateSwiftUIWithSentry,\n              );\n            });\n          });\n        });\n\n        describe('is not matching SwiftUI regex', () => {\n          it('should not add the code snippet', () => {\n            // -- Arrange --\n            const tempDir = prepareTempDir();\n            const filePath = prepareAppDelegateFile(\n              tempDir,\n              invalidAppDelegateSwiftUI,\n              'swift',\n            );\n\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeFalsy();\n          });\n        });\n      });\n\n      describe('is Objective-C file', () => {\n        describe('Sentry is not initialized', () => {\n          it('should add the code snippet', () => {\n            // -- Act --\n            const tempDir = prepareTempDir();\n            const filePath = prepareAppDelegateFile(\n              tempDir,\n              validAppDelegateObjC,\n              'm',\n            );\n\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n            expect(modifiedFileContent).toBe(validAppDelegateObjCWithSentry);\n          });\n        });\n\n        describe('Sentry is already initialized', () => {\n          let tempDir: string;\n          let filePath: string;\n\n          beforeEach(() => {\n            tempDir = prepareTempDir();\n            filePath = prepareAppDelegateFile(\n              tempDir,\n              validAppDelegateObjCWithSentry,\n              'm',\n            );\n          });\n\n          it('should not add the code snippet', () => {\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            const modifiedFileContent = fs.readFileSync(filePath, 'utf8');\n            expect(modifiedFileContent).toBe(validAppDelegateObjCWithSentry);\n          });\n\n          it('should log info', () => {\n            // -- Act --\n            const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            expect(clack.log.info).toHaveBeenCalledWith(\n              'Sentry is already initialized in your AppDelegate. Skipping adding the code snippet.',\n            );\n          });\n        });\n\n        it(\"should set tag 'code-language'\", () => {\n          // -- Arrange --\n          const tempDir = prepareTempDir();\n          const filePath = prepareAppDelegateFile(\n            tempDir,\n            validAppDelegateObjC,\n            'm',\n          );\n\n          // -- Act --\n          const result = addCodeSnippetToProject(tempDir, [filePath], dsn);\n\n          // -- Assert --\n          expect(result).toBeTruthy();\n          expect(Sentry.setTag).toHaveBeenCalledWith('code-language', 'objc');\n        });\n      });\n    });\n  });\n});\n"]}