{"version":3,"file":"xcode-manager.test.js","sourceRoot":"","sources":["../../../test/apple/xcode-manager.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA8B;AAC9B,4CAA8B;AAC9B,gDAAkC;AASlC,yDAAiE;AACjE,iEAA6D;AAE7D,mCAAyE;AAEzE,WAAE,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;IAC9B,UAAU,EAAE,IAAI;IAChB,GAAG,CAAC,MAAM,WAAE,CAAC,YAAY,CAAY,SAAS,CAAC,CAAC;CACjD,CAAC,CAAC,CAAC;AAEJ,WAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;IAC/B,GAAG,EAAE;QACH,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,OAAO,EAAE,WAAE,CAAC,EAAE,EAAE;QAChB,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;KACd;CACF,CAAC,CAAC,CAAC;AAEJ,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CACpC,SAAS,EACT,wCAAwC,CACzC,CAAC;AACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAClC,iBAAiB,EACjB,sEAAsE,CACvE,CAAC;AACF,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CACpC,iBAAiB,EACjB,8CAA8C,CAC/C,CAAC;AACF,MAAM,uBAAuB,GAAG,IAAI,CAAC,IAAI,CACvC,iBAAiB,EACjB,6DAA6D,CAC9D,CAAC;AACF,MAAM,sBAAsB,GAAG,IAAI,CAAC,IAAI,CACtC,iBAAiB,EACjB,6DAA6D,CAC9D,CAAC;AACF,MAAM,WAAW,GAAsB;IACrC,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,SAAS;IACf,YAAY,EAAE;QACZ,EAAE,EAAE,YAAY;QAChB,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,QAAQ;KACf;IACD,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,8BAA8B,EAAE,EAAE,CAAC;CAC5D,CAAC;AAEF,IAAA,iBAAQ,EAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,WAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAA,iBAAQ,EAAC,eAAe,EAAE,GAAG,EAAE;YAC7B,IAAA,iBAAQ,EAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAE/D,YAAY;oBACZ,MAAM,OAAO,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;gBAChC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,sBAAsB,CAAC,CAAC;oBAE9D,YAAY;oBACZ,MAAM,OAAO,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;gBAC1B,IAAA,WAAE,EAAC,8BAA8B,EAAE,GAAG,EAAE;oBACtC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,oBAAoB,CAAC,CAAC;oBAE5D,YAAY;oBACZ,MAAM,OAAO,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,yCAAyC,EAAE,GAAG,EAAE;gBACvD,IAAA,WAAE,EAAC,8BAA8B,EAAE,GAAG,EAAE;oBACtC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,kBAAkB,CAAC,CAAC;oBAE1D,YAAY;oBACZ,MAAM,OAAO,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;YAClC,IAAI,iBAAyB,CAAC;YAC9B,IAAI,eAAuB,CAAC;YAC5B,IAAI,YAA0B,CAAC;YAE/B,IAAA,mBAAU,EAAC,GAAG,EAAE;gBACd,MAAM,OAAO,GAAG,EAAE,CAAC,WAAW,CAC5B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,sBAAsB,CAAC,CAC/C,CAAC;gBAEF,iBAAiB,GAAG,uBAAuB,CAAC;gBAC5C,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAE3D,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;gBACpD,YAAY,GAAG,IAAI,4BAAY,CAAC,eAAe,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;gBACrC,MAAM,cAAc,GAGd;oBACJ;wBACE,YAAY,EAAE,IAAI;wBAClB,mBAAmB,EAAE,IAAI;qBAC1B;oBACD;wBACE,YAAY,EAAE,IAAI;wBAClB,mBAAmB,EAAE,KAAK;qBAC3B;oBACD;wBACE,YAAY,EAAE,KAAK;wBACnB,mBAAmB,EAAE,IAAI;qBAC1B;oBACD;wBACE,YAAY,EAAE,KAAK;wBACnB,mBAAmB,EAAE,KAAK;qBAC3B;iBACF,CAAC;gBAEF,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;oBACpC,IAAA,iBAAQ,EAAC,mBAAmB,OAAO,CAAC,YAAY,EAAE,QAAQ,EAAE,gCAAgC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE;wBACzI,IAAA,mBAAU,EAAC,GAAG,EAAE;4BACd,WAAE,CAAC,KAAK,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,eAAe,CACxC,OAAO,CAAC,mBAAmB,CAC5B,CAAC;wBACJ,CAAC,CAAC,CAAC;wBAEH,IAAA,kBAAS,EAAC,GAAG,EAAE;4BACb,WAAE,CAAC,eAAe,EAAE,CAAC;wBACvB,CAAC,CAAC,CAAC;wBAEH,IAAA,WAAE,EAAC,oDAAoD,EAAE,GAAG,EAAE;4BAC5D,gBAAgB;4BAChB,MAAM,oBAAoB,GAAG,IAAA,gCAAoB,EAC/C,WAAW,CAAC,YAAY,CAAC,IAAI,EAC7B,WAAW,CAAC,IAAI,EAChB,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,mBAAmB,CAC5B,CAAC;4BACF,MAAM,mBAAmB,GAAG,IAAI,oBAAoB,CAAC,OAAO,CAC1D,IAAI,EACJ,KAAK,CACN,GAAG,CAAC;4BAEL,YAAY;4BACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,KAAK,EAAE,uBAAuB;4BAC9B,OAAO,CAAC,YAAY,CACrB,CAAC;4BAEF,eAAe;4BACf,MAAM,mBAAmB,GAAG,IAAI,4BAAY,CAAC,eAAe,CAAC,CAAC;4BAE9D,+CAA+C;4BAC/C,MAAM,aAAa,GACjB,mBAAmB,CAAC,OAAO,CAAC,wBAAwB,CAAC;4BACvD,IAAA,eAAM,EAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;4BACpC,IAAI,CAAC,aAAa,EAAE;gCAClB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;6BAC7C;4BACD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;4BAC9C,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;4BAEnC,qBAAqB;4BACrB,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAC9B,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CACnC,CAAC;4BACF,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;4BAC/B,IAAI,CAAC,QAAQ,EAAE;gCACb,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;6BACxC;4BACD,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;4BAE5C,gCAAgC;4BAChC,MAAM,MAAM,GAAG,aAAa,CAC1B,QAAQ,CACmB,CAAC;4BAC9B,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;4BAC7B,IAAA,eAAM,EAAC,OAAO,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACzC,IAAA,eAAM,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;gCAChC,6FAA6F;6BAC9F,CAAC,CAAC;4BACH,IAAA,eAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;4BACvC,IAAA,eAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BACzC,IAAA,eAAM,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;4BAExD,MAAM,UAAU,GAAG,GAAG,QAAQ,UAAU,CAAC;4BACzC,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;4BACzC,IAAA,eAAM,EAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CACpC,gCAAgC,CACjC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,sCAAsC,EAAE,GAAG,EAAE;gBACpD,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;oBACtC,IAAA,WAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;wBAC7C,YAAY;wBACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,KAAK,EAAE,uBAAuB;wBAC9B,KAAK,CACN,CAAC;wBAEF,eAAe;wBACf,MAAM,oBAAoB,GAAG,IAAI,4BAAY,CAAC,iBAAiB,CAAC,CAAC;wBACjE,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CACvD,oBAAoB,CAAC,OAAO,CAAC,oBAAoB,CAClD,CAAC;oBACJ,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;oBACrC,MAAM,YAAY,GAAG,IAAI,CAAC;oBAE1B,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;wBACtC,IAAA,WAAE,EAAC,kDAAkD,EAAE,GAAG,EAAE;4BAC1D,YAAY;4BACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,qBAAqB,EACrB,KAAK,EAAE,uBAAuB;4BAC9B,YAAY,CACb,CAAC;4BAEF,eAAe;4BACf,MAAM,oBAAoB,GAAG,IAAI,4BAAY,CAAC,iBAAiB,CAAC,CAAC;4BACjE,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CACvD,oBAAoB,CAAC,OAAO,CAAC,oBAAoB,CAClD,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,IAAA,iBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;wBAClC,IAAA,iBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;4BACjD,IAAA,WAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;gCAC7C,YAAY;gCACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,qBAAqB,EACrB,KAAK,EAAE,uBAAuB;gCAC9B,YAAY,CACb,CAAC;gCAEF,eAAe;gCACf,MAAM,oBAAoB,GAAG,IAAI,4BAAY,CAC3C,iBAAiB,CAClB,CAAC;gCACF,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CACvD,oBAAoB,CAAC,OAAO,CAAC,oBAAoB,CAClD,CAAC;4BACJ,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,IAAA,iBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;4BAC7C,IAAA,WAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;gCAC7C,gBAAgB;gCAChB,YAAY,CAAC,OAAO,CAAC,oBAAoB,GAAG,EAAE,CAAC;gCAE/C,YAAY;gCACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,qBAAqB,EACrB,KAAK,EAAE,uBAAuB;gCAC9B,YAAY,CACb,CAAC;gCAEF,eAAe;gCACf,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;4BAChE,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,IAAA,iBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;4BAC1C,MAAM,oCAAoC,GACxC,0BAA0B,CAAC;4BAC7B,MAAM,sCAAsC,GAC1C,0BAA0B,CAAC;4BAC7B,MAAM,mCAAmC,GACvC,0BAA0B,CAAC;4BAC7B,MAAM,qCAAqC,GACzC,0BAA0B,CAAC;4BAE7B,IAAA,WAAE,EAAC,8CAA8C,EAAE,GAAG,EAAE;gCACtD,YAAY;gCACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,KAAK,EAAE,uBAAuB;gCAC9B,YAAY,CACb,CAAC;gCAEF,eAAe;gCACf,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAC;gCAChE,gDAAgD;gCAChD,MAAM,kBAAkB,GAAG;oCACzB,mCAAmC;oCACnC,qCAAqC,EAAE,UAAU;iCAClD,CAAC;gCACF,KAAK,MAAM,GAAG,IAAI,kBAAkB,EAAE;oCACpC,MAAM,kBAAkB,GAAG,YAAY,CAAC,OAAO;yCAC5C,oBAAoB,EAAE,CAAC,GAAG,CAAyB,CAAC;oCACvD,IAAA,eAAM,EAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;oCACzC,IAAA,eAAM,EAAC,OAAO,kBAAkB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACrD,MAAM,aAAa,GAAG,kBAAkB,CAAC,aAAa,IAAI,EAAE,CAAC;oCAC7D,IAAA,eAAM,EAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,IAAI,CACjD,mBAAmB,CACpB,CAAC;oCACF,IAAA,eAAM,EAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,IAAI,CACtD,MAAM,CACP,CAAC;iCACH;4BACH,CAAC,CAAC,CAAC;4BAEH,IAAA,WAAE,EAAC,mDAAmD,EAAE,GAAG,EAAE;gCAC3D,YAAY;gCACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,KAAK,EAAE,uBAAuB;gCAC9B,YAAY,CACb,CAAC;gCAEF,eAAe;gCACf,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAC;gCAEhE,6CAA6C;gCAC7C,MAAM,uBAAuB,GAAG,YAAY,CAAC,OAAO;qCACjD,oBAAoB,EAAE,CACvB,oCAAoC,CACb,CAAC;gCAC1B,IAAA,eAAM,EAAC,uBAAuB,CAAC,CAAC,WAAW,EAAE,CAAC;gCAC9C,IAAA,eAAM,EAAC,OAAO,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCAC1D,IAAA,eAAM,EACJ,uBAAuB,CAAC,aAAa;oCACnC,EAAE,wBAAwB,CAC7B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCAChB,IAAA,eAAM,EACJ,uBAAuB,CAAC,aAAa;oCACnC,EAAE,6BAA6B,CAClC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCAEd,+CAA+C;gCAC/C,MAAM,yBAAyB,GAAG,YAAY,CAAC,OAAO;qCACnD,oBAAoB,EAAE,CACvB,sCAAsC,CACf,CAAC;gCAC1B,IAAA,eAAM,EAAC,yBAAyB,CAAC,CAAC,WAAW,EAAE,CAAC;gCAChD,IAAA,eAAM,EAAC,OAAO,yBAAyB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCAC5D,IAAA,eAAM,EACJ,yBAAyB,CAAC,aAAa;oCACrC,EAAE,wBAAwB,CAC7B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gCAC5B,IAAA,eAAM,EACJ,yBAAyB,CAAC,aAAa;oCACrC,EAAE,6BAA6B,CAClC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAChB,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;gBACjC,MAAM,eAAe,GAAG,IAAI,CAAC;gBAE7B,IAAA,iBAAQ,EAAC,+CAA+C,EAAE,GAAG,EAAE;oBAC7D,IAAA,WAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;wBAC7C,gBAAgB;wBAChB,YAAY,CAAC,OAAO,CAAC,uBAAuB,GAAG;4BAC7C,cAAc,EAAE;gCACd,GAAG,EAAE,yBAAyB;gCAC9B,KAAK,EAAE;oCACL;wCACE,KAAK,EAAE,KAAK;wCACZ,OAAO,EAAE,sBAAsB;qCAChC;iCACF;6BACF;yBACF,CAAC;wBAEF,YAAY;wBACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,eAAe,CAChB,CAAC;wBAEF,eAAe;wBACf,MAAM,oBAAoB,GAAG,IAAI,4BAAY,CAAC,iBAAiB,CAAC,CAAC;wBACjE,oBAAoB,CAAC,OAAO,CAAC,uBAAuB,GAAG;4BACrD,cAAc,EAAE;gCACd,GAAG,EAAE,yBAAyB;gCAC9B,KAAK,EAAE;oCACL;wCACE,KAAK,EAAE,KAAK;wCACZ,OAAO,EAAE,sBAAsB;qCAChC;iCACF;6BACF;yBACF,CAAC;wBACF,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAC1D,oBAAoB,CAAC,OAAO,CAAC,uBAAuB,CACrD,CAAC;wBACF,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,OAAO,CAChE,oBAAoB,CAAC,OAAO,CAAC,6BAA6B,CAC3D,CAAC;wBACF,IAAA,eAAM,EACJ,YAAY,CAAC,OAAO,CAAC,+BAA+B,CACrD,CAAC,OAAO,CACP,oBAAoB,CAAC,OAAO,CAAC,+BAA+B,CAC7D,CAAC;oBACJ,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAA,WAAE,EAAC,4CAA4C,EAAE,GAAG,EAAE;oBACpD,YAAY;oBACZ,YAAY,CAAC,kBAAkB,CAC7B,WAAW,EACX,SAAS,EACT,eAAe,CAChB,CAAC;oBAEF,eAAe;oBACf,iBAAiB;oBACjB,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,CACnD,0BAA0B,CACR,CAAC;oBACrB,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC7B,IAAI,CAAC,MAAM,EAAE;wBACX,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;qBACxC;oBAED,kDAAkD;oBAClD,IAAA,eAAM,EAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,OAAO,CAAC;wBAChD,eAAM,CAAC,gBAAgB,CAAC;4BACtB,KAAK,EAAE,eAAM,CAAC,GAAG,CAAC,MAAM,CAAW;4BACnC,OAAO,EAAE,QAAQ;yBAClB,CAAC;qBACH,CAAC,CAAC;oBAEH,iEAAiE;oBACjE,MAAM,4BAA4B,GAChC,YAAY,CAAC,OAAO,CAAC,6BAA6B,CAAC;oBACrD,IAAA,eAAM,EAAC,4BAA4B,CAAC,CAAC,WAAW,EAAE,CAAC;oBACnD,IAAI,CAAC,4BAA4B,EAAE;wBACjC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;qBAC/D;oBACD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;oBAC7D,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACnC,oEAAoE;oBACpE,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;oBACjD,0FAA0F;oBAC1F,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;oBAEzD,IAAA,eAAM,EAAC,4BAA4B,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;wBAC5D,GAAG,EAAE,+BAA+B;wBACpC,aAAa,EAAE,8CAA8C;wBAC7D,WAAW,EAAE;4BACX,IAAI,EAAE,sBAAsB;4BAC5B,cAAc,EAAE,OAAO;yBACxB;qBACF,CAAC,CAAC;oBACH,IAAA,eAAM,EAAC,4BAA4B,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CACxD,8CAA8C,CAC/C,CAAC;oBAEF,sDAAsD;oBACtD,MAAM,0BAA0B,GAC9B,YAAY,CAAC,OAAO,CAAC,+BAA+B,CAAC;oBACvD,IAAA,eAAM,EAAC,0BAA0B,CAAC,CAAC,WAAW,EAAE,CAAC;oBACjD,IAAI,CAAC,0BAA0B,EAAE;wBAC/B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;qBACjE;oBACD,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBAC1D,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAClC,qEAAqE;oBACrE,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;oBAChD,2FAA2F;oBAC3F,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;oBACxD,IAAA,eAAM,EAAC,0BAA0B,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;wBACzD,GAAG,EAAE,iCAAiC;wBACtC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;wBACtB,eAAe,EAAE,8CAA8C;wBAC/D,WAAW,EAAE,QAAQ;qBACtB,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;YACrC,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG,SAAS,CAAC;gBAEjD,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;YAChC,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAE/D,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;gBAE/D,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;YACjD,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG;oBACrC,OAAO,EAAE;wBACP,GAAG,EAAE,iBAAiB;wBACtB,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE,SAAS;qBACvB;iBACF,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;YAC1C,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG;oBACrC,OAAO,EAAE;wBACP,GAAG,EAAE,iBAAiB;wBACtB,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE,SAAS;qBACvB;iBACF,CAAC;gBACF,YAAY,CAAC,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;gBAEtD,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;YACnD,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG;oBACrC,OAAO,EAAE;wBACP,GAAG,EAAE,iBAAiB;wBACtB,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE;4BACX;gCACE,KAAK,EAAE,oBAAoB;6BAC5B;yBACF;qBACF;iBACF,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,iCAAiC,EAAE,GAAG,EAAE;YAC/C,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG;oBACrC,OAAO,EAAE;wBACP,GAAG,EAAE,iBAAiB;wBACtB,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE;4BACX;gCACE,KAAK,EAAE,iBAAiB;6BACzB;yBACF;qBACF;iBACF,CAAC;gBACF,YAAY,CAAC,OAAO,CAAC,oBAAoB,GAAG;oBAC1C,iBAAiB,EAAE;wBACjB,GAAG,EAAE,sBAAsB;wBAC3B,KAAK,EAAE,SAAS;qBACjB;iBACF,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;YACxC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAE/D,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;YACtC,IAAI,YAA0B,CAAC;YAE/B,IAAA,mBAAU,EAAC,GAAG,EAAE;gBACd,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBACzD,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG;oBACrC,aAAa,EAAE;wBACb,GAAG,EAAE,iBAAiB;wBACtB,IAAI,EAAE,aAAa;wBACnB,WAAW,EAAE;4BACX;gCACE,KAAK,EAAE,iBAAiB;6BACzB;yBACF;qBACF;iBACF,CAAC;gBACF,YAAY,CAAC,OAAO,CAAC,oBAAoB,GAAG;oBAC1C,iBAAiB,EAAE;wBACjB,GAAG,EAAE,sBAAsB;wBAC3B,KAAK,EAAE;4BACL;gCACE,KAAK,EAAE,UAAU;6BAClB;yBACF;qBACF;iBACF,CAAC;gBACF,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG;oBAClC,UAAU,EAAE;wBACV,GAAG,EAAE,cAAc;wBACnB,OAAO,EAAE,cAAc;qBACxB;iBACF,CAAC;gBACF,YAAY,CAAC,KAAK,GAAG;oBACnB;wBACE,GAAG,EAAE,cAAc;wBACnB,IAAI,EAAE,WAAW;qBAClB;iBACF,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,oCAAoC,EAAE,GAAG,EAAE;gBAClD,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;oBAE9C,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;oBAEzD,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;gBAC9C,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,EAAE,CAAC;oBAEvC,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;oBAEzD,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;gBACxC,IAAA,iBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;oBAC3C,IAAA,WAAE,EAAC,wBAAwB,EAAE,GAAG,EAAE;wBAChC,gBAAgB;wBAChB,YAAY,CAAC,KAAK,GAAG,EAAE,CAAC;wBAExB,YAAY;wBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;wBAEzD,eAAe;wBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAA,WAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;oBAC3C,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;oBAEzD,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC;wBACpB,IAAI,CAAC,IAAI,CACP,iBAAiB,EACjB,2BAA2B,EAC3B,WAAW,CACZ;qBACF,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;YACpC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAE1C,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAE1C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;YACpC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,CAC/C,0BAA0B,CACb,CAAC;gBAChB,IAAI,OAAO,EAAE;oBACX,OAAO,OAAO,CAAC,SAAS,CAAC;iBAC1B;gBAED,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAE1C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;YAChC,IAAA,WAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;gBAC3C,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAE/D,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAE1C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC;oBACpB;wBACE,GAAG,EAAE,0BAA0B;wBAC/B,IAAI,EAAE,aAAa;qBACpB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,WAAE,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAE/D,aAAa;gBACb,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;gBAE3C,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;gBAE1C,eAAe;gBACf,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,IAAA,iBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;YAC5C,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,MAAM,KAAK,GAAa;oBACtB,GAAG,EAAE,UAAU;oBACf,QAAQ,EAAE,SAAS;oBACnB,IAAI,EAAE,EAAE;iBACT,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAE7C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;YACrC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,MAAM,KAAK,GAAa;oBACtB,GAAG,EAAE,UAAU;iBAChB,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAE7C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;YAC7C,MAAM,KAAK,GAAa;gBACtB,GAAG,EAAE,UAAU;gBACf,QAAQ,EAAE;oBACR;wBACE,KAAK,EAAE,0BAA0B;qBAClC;iBACF;gBACD,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,IAAA,iBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;gBAC7C,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,YAAY,CAAC,OAAO,CAAC,gBAAgB,GAAG,SAAS,CAAC;oBAElD,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;gBACxC,IAAA,WAAE,EAAC,mBAAmB,EAAE,GAAG,EAAE;oBAC3B,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,MAAM,KAAK,GAAa;wBACtB,GAAG,EAAE,UAAU;wBACf,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,kCAAkC;6BAC1C;yBACF;wBACD,IAAI,EAAE,EAAE;qBACT,CAAC;oBAEF,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;gBACvC,IAAA,WAAE,EAAC,sCAAsC,EAAE,GAAG,EAAE;oBAC9C,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,YAAY,CAAC,OAAO,CAAC,gBAAgB,GAAG;wBACtC,wBAAwB,EAAE;4BACxB,GAAG,EAAE,kBAAkB;4BACvB,IAAI,EAAE,2BAA2B;4BACjC,UAAU,EAAE,aAAa;yBAC1B;qBACF,CAAC;oBACF,MAAM,KAAK,GAAa;wBACtB,GAAG,EAAE,UAAU;wBACf,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,0BAA0B;6BAClC;yBACF;wBACD,IAAI,EAAE,EAAE;qBACT,CAAC;oBAEF,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC;wBACpB;4BACE,GAAG,EAAE,0BAA0B;4BAC/B,IAAI,EAAE,yBAAyB;yBAChC;qBACF,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;YAC9C,MAAM,KAAK,GAAa;gBACtB,GAAG,EAAE,UAAU;gBACf,QAAQ,EAAE;oBACR;wBACE,KAAK,EAAE,0BAA0B;qBAClC;iBACF;gBACD,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;gBACpC,IAAA,WAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;oBACnC,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,YAAY,CAAC,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;oBAE1C,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;gBACzC,IAAA,WAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;oBAC3C,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,MAAM,KAAK,GAAa;wBACtB,GAAG,EAAE,UAAU;wBACf,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,kCAAkC;6BAC1C;yBACF;wBACD,IAAI,EAAE,EAAE;qBACT,CAAC;oBAEF,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;gBACxC,IAAA,WAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;oBAC3C,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAE/D,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC;wBACpB;4BACE,GAAG,EAAE,0BAA0B;4BAC/B,IAAI,EAAE,aAAa;yBACpB;qBACF,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;gBACxC,IAAA,WAAE,EAAC,0CAA0C,EAAE,GAAG,EAAE;oBAClD,gBAAgB;oBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;oBAC/D,MAAM,KAAK,GAAa;wBACtB,GAAG,EAAE,UAAU;wBACf,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,WAAW;6BACnB;yBACF;wBACD,IAAI,EAAE,sBAAsB;qBAC7B,CAAC;oBACF,MAAM,QAAQ,GAAa;wBACzB,GAAG,EAAE,UAAU;wBACf,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,cAAc;6BACtB;yBACF;qBACF,CAAC;oBACF,MAAM,IAAI,GAAqB;wBAC7B,GAAG,EAAE,kBAAkB;wBACvB,IAAI,EAAE,2BAA2B;wBACjC,UAAU,EAAE,SAAS;qBACtB,CAAC;oBACF,YAAY,CAAC,OAAO,CAAC,QAAQ,GAAG;wBAC9B,YAAY,EAAE,KAAK;wBACnB,WAAW,EAAE,QAAQ;qBACtB,CAAC;oBACF,YAAY,CAAC,OAAO,CAAC,gBAAgB,GAAG;wBACtC,cAAc,EAAE,IAAI;qBACrB,CAAC;oBAEF,YAAY;oBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAE7C,eAAe;oBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC;wBACpB;4BACE,GAAG,EAAE,cAAc;4BACnB,IAAI,EAAE,yBAAyB;yBAChC;qBACF,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,8CAA8C,EAAE,GAAG,EAAE;YAC5D,IAAA,WAAE,EAAC,mBAAmB,EAAE,GAAG,EAAE;gBAC3B,gBAAgB;gBAChB,MAAM,YAAY,GAAG,IAAI,4BAAY,CAAC,uBAAuB,CAAC,CAAC;gBAC/D,YAAY,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACnC,YAAY,CAAC,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAC3C,MAAM,KAAK,GAAa;oBACtB,GAAG,EAAE,UAAU;oBACf,QAAQ,EAAE;wBACR;4BACE,KAAK,EAAE,YAAY;yBACpB;qBACF;oBACD,IAAI,EAAE,EAAE;iBACT,CAAC;gBAEF,YAAY;gBACZ,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAE7C,eAAe;gBACf,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'node:fs';\nimport * as os from 'node:os';\nimport * as path from 'node:path';\nimport type {\n  PBXFileReference,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  PBXShellScriptBuildPhase,\n  XCBuildConfiguration,\n} from 'xcode';\nimport { getRunScriptTemplate } from '../../src/apple/templates';\nimport { XcodeProject } from '../../src/apple/xcode-manager';\nimport type { SentryProjectData } from '../../src/utils/types';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\n\nvi.mock('node:fs', async () => ({\n  __esModule: true,\n  ...(await vi.importActual<typeof fs>('node:fs')),\n}));\n\nvi.mock('@clack/prompts', () => ({\n  log: {\n    info: vi.fn(),\n    success: vi.fn(),\n    step: vi.fn(),\n  },\n}));\n\nconst appleProjectsPath = path.resolve(\n  __dirname,\n  '../../fixtures/test-applications/apple',\n);\nconst damagedProjectPath = path.join(\n  appleProjectsPath,\n  'damaged-missing-configuration-list/Project.xcodeproj/project.pbxproj',\n);\nconst noTargetsProjectPath = path.join(\n  appleProjectsPath,\n  'no-targets/Project.xcodeproj/project.pbxproj',\n);\nconst singleTargetProjectPath = path.join(\n  appleProjectsPath,\n  'spm-swiftui-single-target/Project.xcodeproj/project.pbxproj',\n);\nconst multiTargetProjectPath = path.join(\n  appleProjectsPath,\n  'spm-swiftui-multi-targets/Project.xcodeproj/project.pbxproj',\n);\nconst projectData: SentryProjectData = {\n  id: '1234567890',\n  slug: 'project',\n  organization: {\n    id: '1234567890',\n    name: 'Sentry',\n    slug: 'sentry',\n  },\n  keys: [{ dsn: { public: 'https://sentry.io/1234567890' } }],\n};\n\ndescribe('XcodeManager', () => {\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('XcodeProject', () => {\n    describe('getAllTargets', () => {\n      describe('single target', () => {\n        it('should return all targets', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n          // -- Act --\n          const targets = xcodeProject.getAllTargets();\n\n          // -- Assert --\n          expect(targets).toEqual(['Project']);\n        });\n      });\n\n      describe('multiple targets', () => {\n        it('should return all targets', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(multiTargetProjectPath);\n\n          // -- Act --\n          const targets = xcodeProject.getAllTargets();\n\n          // -- Assert --\n          expect(targets).toEqual(['Project1', 'Project2']);\n        });\n      });\n\n      describe('no targets', () => {\n        it('should return an empty array', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(noTargetsProjectPath);\n\n          // -- Act --\n          const targets = xcodeProject.getAllTargets();\n\n          // -- Assert --\n          expect(targets).toEqual([]);\n        });\n      });\n\n      describe('project with missing configuration list', () => {\n        it('should return an empty array', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(damagedProjectPath);\n\n          // -- Act --\n          const targets = xcodeProject.getAllTargets();\n\n          // -- Assert --\n          expect(targets).toEqual([]);\n        });\n      });\n    });\n\n    describe('updateXcodeProject', () => {\n      let sourceProjectPath: string;\n      let tempProjectPath: string;\n      let xcodeProject: XcodeProject;\n\n      beforeEach(() => {\n        const tempDir = fs.mkdtempSync(\n          path.join(os.tmpdir(), 'update-xcode-project'),\n        );\n\n        sourceProjectPath = singleTargetProjectPath;\n        tempProjectPath = path.resolve(tempDir, 'project.pbxproj');\n\n        fs.copyFileSync(sourceProjectPath, tempProjectPath);\n        xcodeProject = new XcodeProject(tempProjectPath);\n      });\n\n      describe('upload symbols script', () => {\n        const scriptVariants: {\n          uploadSource: boolean;\n          includeHomebrewPath: boolean;\n        }[] = [\n          {\n            uploadSource: true,\n            includeHomebrewPath: true,\n          },\n          {\n            uploadSource: true,\n            includeHomebrewPath: false,\n          },\n          {\n            uploadSource: false,\n            includeHomebrewPath: true,\n          },\n          {\n            uploadSource: false,\n            includeHomebrewPath: false,\n          },\n        ];\n\n        for (const variant of scriptVariants) {\n          describe(`upload source = ${variant.uploadSource?.toString()} and include homebrew path = ${variant.includeHomebrewPath.toString()}`, () => {\n            beforeEach(() => {\n              vi.spyOn(fs, 'existsSync').mockReturnValue(\n                variant.includeHomebrewPath,\n              );\n            });\n\n            afterEach(() => {\n              vi.restoreAllMocks();\n            });\n\n            it('should add the upload symbols script to the target', () => {\n              // -- Arrange --\n              const generatedShellScript = getRunScriptTemplate(\n                projectData.organization.slug,\n                projectData.slug,\n                variant.uploadSource,\n                variant.includeHomebrewPath,\n              );\n              const expectedShellScript = `\"${generatedShellScript.replace(\n                /\"/g,\n                '\\\\\"',\n              )}\"`;\n\n              // -- Act --\n              xcodeProject.updateXcodeProject(\n                projectData,\n                'Project',\n                false, // Ignore SPM reference\n                variant.uploadSource,\n              );\n\n              // -- Assert --\n              const updatedXcodeProject = new XcodeProject(tempProjectPath);\n\n              // Expect the upload symbols script to be added\n              const scriptObjects =\n                updatedXcodeProject.objects.PBXShellScriptBuildPhase;\n              expect(scriptObjects).toBeDefined();\n              if (!scriptObjects) {\n                throw new Error('Script objects not found');\n              }\n              const scriptKeys = Object.keys(scriptObjects);\n              expect(scriptKeys).toHaveLength(2);\n\n              // Find the script ID\n              const scriptId = scriptKeys.find(\n                (key) => !key.endsWith('_comment'),\n              );\n              expect(scriptId).toBeDefined();\n              if (!scriptId) {\n                throw new Error('Script ID not found');\n              }\n              expect(scriptId).toMatch(/^[A-F0-9]{24}$/i);\n\n              // Expect the script to be added\n              const script = scriptObjects[\n                scriptId\n              ] as PBXShellScriptBuildPhase;\n              expect(script).toBeDefined();\n              expect(typeof script).not.toBe('string');\n              expect(script.inputPaths).toEqual([\n                '\"${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${TARGET_NAME}\"',\n              ]);\n              expect(script.outputPaths).toEqual([]);\n              expect(script.shellPath).toBe('/bin/sh');\n              expect(script.shellScript).toEqual(expectedShellScript);\n\n              const commentKey = `${scriptId}_comment`;\n              expect(scriptKeys).toContain(commentKey);\n              expect(scriptObjects[commentKey]).toBe(\n                'Upload Debug Symbols to Sentry',\n              );\n            });\n          });\n        }\n      });\n\n      describe('debug information format and sandbox', () => {\n        describe('upload source is false', () => {\n          it('should not update the Xcode project', () => {\n            // -- Act --\n            xcodeProject.updateXcodeProject(\n              projectData,\n              'Project',\n              false, // Ignore SPM reference\n              false,\n            );\n\n            // -- Assert --\n            const expectedXcodeProject = new XcodeProject(sourceProjectPath);\n            expect(xcodeProject.objects.XCBuildConfiguration).toEqual(\n              expectedXcodeProject.objects.XCBuildConfiguration,\n            );\n          });\n        });\n\n        describe('upload source is true', () => {\n          const uploadSource = true;\n\n          describe('named target not found', () => {\n            it('should not update the flags in the Xcode project', () => {\n              // -- Act --\n              xcodeProject.updateXcodeProject(\n                projectData,\n                'Invalid Target Name',\n                false, // Ignore SPM reference\n                uploadSource,\n              );\n\n              // -- Assert --\n              const originalXcodeProject = new XcodeProject(sourceProjectPath);\n              expect(xcodeProject.objects.XCBuildConfiguration).toEqual(\n                originalXcodeProject.objects.XCBuildConfiguration,\n              );\n            });\n          });\n\n          describe('named target found', () => {\n            describe('build configurations is undefined', () => {\n              it('should not update the Xcode project', () => {\n                // -- Act --\n                xcodeProject.updateXcodeProject(\n                  projectData,\n                  'Invalid Target Name',\n                  false, // Ignore SPM reference\n                  uploadSource,\n                );\n\n                // -- Assert --\n                const originalXcodeProject = new XcodeProject(\n                  sourceProjectPath,\n                );\n                expect(xcodeProject.objects.XCBuildConfiguration).toEqual(\n                  originalXcodeProject.objects.XCBuildConfiguration,\n                );\n              });\n            });\n\n            describe('no build configurations found', () => {\n              it('should not update the Xcode project', () => {\n                // -- Arrange --\n                xcodeProject.objects.XCBuildConfiguration = {};\n\n                // -- Act --\n                xcodeProject.updateXcodeProject(\n                  projectData,\n                  'Invalid Target Name',\n                  false, // Ignore SPM reference\n                  uploadSource,\n                );\n\n                // -- Assert --\n                expect(xcodeProject.objects.XCBuildConfiguration).toEqual({});\n              });\n            });\n\n            describe('build configurations found', () => {\n              const debugProjectBuildConfigurationListId =\n                'D4E604DA2D50CEEE00CAB00F';\n              const releaseProjectBuildConfigurationListId =\n                'D4E604DB2D50CEEE00CAB00F';\n              const debugTargetBuildConfigurationListId =\n                'D4E604DD2D50CEEE00CAB00F';\n              const releaseTargetBuildConfigurationListId =\n                'D4E604DE2D50CEEE00CAB00F';\n\n              it('should update the target configuration lists', () => {\n                // -- Act --\n                xcodeProject.updateXcodeProject(\n                  projectData,\n                  'Project',\n                  false, // Ignore SPM reference\n                  uploadSource,\n                );\n\n                // -- Assert --\n                expect(xcodeProject.objects.XCBuildConfiguration).toBeDefined();\n                // Both Debug and Release are configured equally\n                const expectedConfigKeys = [\n                  debugTargetBuildConfigurationListId, // Debug\n                  releaseTargetBuildConfigurationListId, // Release\n                ];\n                for (const key of expectedConfigKeys) {\n                  const buildConfiguration = xcodeProject.objects\n                    .XCBuildConfiguration?.[key] as XCBuildConfiguration;\n                  expect(buildConfiguration).toBeDefined();\n                  expect(typeof buildConfiguration).not.toBe('string');\n                  const buildSettings = buildConfiguration.buildSettings ?? {};\n                  expect(buildSettings.DEBUG_INFORMATION_FORMAT).toBe(\n                    '\"dwarf-with-dsym\"',\n                  );\n                  expect(buildSettings.ENABLE_USER_SCRIPT_SANDBOXING).toBe(\n                    '\"NO\"',\n                  );\n                }\n              });\n\n              it('should not update the project configuration lists', () => {\n                // -- Act --\n                xcodeProject.updateXcodeProject(\n                  projectData,\n                  'Project',\n                  false, // Ignore SPM reference\n                  uploadSource,\n                );\n\n                // -- Assert --\n                expect(xcodeProject.objects.XCBuildConfiguration).toBeDefined();\n\n                // Check project build configurations 'Debug'\n                const debugBuildConfiguration = xcodeProject.objects\n                  .XCBuildConfiguration?.[\n                  debugProjectBuildConfigurationListId\n                ] as XCBuildConfiguration;\n                expect(debugBuildConfiguration).toBeDefined();\n                expect(typeof debugBuildConfiguration).not.toBe('string');\n                expect(\n                  debugBuildConfiguration.buildSettings\n                    ?.DEBUG_INFORMATION_FORMAT,\n                ).toBe('dwarf');\n                expect(\n                  debugBuildConfiguration.buildSettings\n                    ?.ENABLE_USER_SCRIPT_SANDBOXING,\n                ).toBe('YES');\n\n                // Check project build configurations 'Release'\n                const releaseBuildConfiguration = xcodeProject.objects\n                  .XCBuildConfiguration?.[\n                  releaseProjectBuildConfigurationListId\n                ] as XCBuildConfiguration;\n                expect(releaseBuildConfiguration).toBeDefined();\n                expect(typeof releaseBuildConfiguration).not.toBe('string');\n                expect(\n                  releaseBuildConfiguration.buildSettings\n                    ?.DEBUG_INFORMATION_FORMAT,\n                ).toBe('\"dwarf-with-dsym\"');\n                expect(\n                  releaseBuildConfiguration.buildSettings\n                    ?.ENABLE_USER_SCRIPT_SANDBOXING,\n                ).toBe('YES');\n              });\n            });\n          });\n        });\n      });\n\n      describe('add SPM reference', () => {\n        const addSPMReference = true;\n\n        describe('framework build phase already contains Sentry', () => {\n          it('should not update the Xcode project', () => {\n            // -- Arrange --\n            xcodeProject.objects.PBXFrameworksBuildPhase = {\n              'framework-id': {\n                isa: 'PBXFrameworksBuildPhase',\n                files: [\n                  {\n                    value: '123',\n                    comment: 'Sentry in Frameworks',\n                  },\n                ],\n              },\n            };\n\n            // -- Act --\n            xcodeProject.updateXcodeProject(\n              projectData,\n              'Project',\n              addSPMReference,\n            );\n\n            // -- Assert --\n            const expectedXcodeProject = new XcodeProject(sourceProjectPath);\n            expectedXcodeProject.objects.PBXFrameworksBuildPhase = {\n              'framework-id': {\n                isa: 'PBXFrameworksBuildPhase',\n                files: [\n                  {\n                    value: '123',\n                    comment: 'Sentry in Frameworks',\n                  },\n                ],\n              },\n            };\n            expect(xcodeProject.objects.PBXFrameworksBuildPhase).toEqual(\n              expectedXcodeProject.objects.PBXFrameworksBuildPhase,\n            );\n            expect(xcodeProject.objects.XCRemoteSwiftPackageReference).toEqual(\n              expectedXcodeProject.objects.XCRemoteSwiftPackageReference,\n            );\n            expect(\n              xcodeProject.objects.XCSwiftPackageProductDependency,\n            ).toEqual(\n              expectedXcodeProject.objects.XCSwiftPackageProductDependency,\n            );\n          });\n        });\n\n        it('should add the SPM reference to the target', () => {\n          // -- Act --\n          xcodeProject.updateXcodeProject(\n            projectData,\n            'Project',\n            addSPMReference,\n          );\n\n          // -- Assert --\n          // Get the target\n          const target = xcodeProject.objects.PBXNativeTarget?.[\n            'D4E604CC2D50CEEC00CAB00F'\n          ] as PBXNativeTarget;\n          expect(target).toBeDefined();\n          if (!target) {\n            throw new Error('Target is undefined');\n          }\n\n          // Check the SPM dependency is added to the target\n          expect(target.packageProductDependencies).toEqual([\n            expect.objectContaining({\n              value: expect.any(String) as string,\n              comment: 'Sentry',\n            }),\n          ]);\n\n          // Check the SPM package reference object is added to the project\n          const remoteSwiftPackageReferences =\n            xcodeProject.objects.XCRemoteSwiftPackageReference;\n          expect(remoteSwiftPackageReferences).toBeDefined();\n          if (!remoteSwiftPackageReferences) {\n            throw new Error('XCRemoteSwiftPackageReference is undefined');\n          }\n          const rspRefKeys = Object.keys(remoteSwiftPackageReferences);\n          expect(rspRefKeys).toHaveLength(2);\n          // First key is expected to be the UUID of the SPM package reference\n          expect(rspRefKeys[0]).toMatch(/^[A-F0-9]{24}$/i);\n          // Second key is expected to be the UUID of the SPM package reference with _comment suffix\n          expect(rspRefKeys[1]).toMatch(/^[A-F0-9]{24}_comment$/i);\n\n          expect(remoteSwiftPackageReferences?.[rspRefKeys[0]]).toEqual({\n            isa: 'XCRemoteSwiftPackageReference',\n            repositoryURL: '\"https://github.com/getsentry/sentry-cocoa/\"',\n            requirement: {\n              kind: 'upToNextMajorVersion',\n              minimumVersion: '8.0.0',\n            },\n          });\n          expect(remoteSwiftPackageReferences?.[rspRefKeys[1]]).toBe(\n            'XCRemoteSwiftPackageReference \"sentry-cocoa\"',\n          );\n\n          // Check the SPM package is a dependency of the target\n          const packageProductDependencies =\n            xcodeProject.objects.XCSwiftPackageProductDependency;\n          expect(packageProductDependencies).toBeDefined();\n          if (!packageProductDependencies) {\n            throw new Error('XCSwiftPackageProductDependency is undefined');\n          }\n          const ppDepKeys = Object.keys(packageProductDependencies);\n          expect(ppDepKeys).toHaveLength(2);\n          // First key is expected to be the UUID of the SPM package dependency\n          expect(ppDepKeys[0]).toMatch(/^[A-F0-9]{24}$/i);\n          // Second key is expected to be the UUID of the SPM package dependency with _comment suffix\n          expect(ppDepKeys[1]).toMatch(/^[A-F0-9]{24}_comment$/i);\n          expect(packageProductDependencies?.[ppDepKeys[0]]).toEqual({\n            isa: 'XCSwiftPackageProductDependency',\n            package: rspRefKeys[0],\n            package_comment: 'XCRemoteSwiftPackageReference \"sentry-cocoa\"',\n            productName: 'Sentry',\n          });\n        });\n      });\n    });\n  });\n\n  describe('filesForTarget', () => {\n    describe('targets are undefined', () => {\n      it('should return undefined', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = undefined;\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toBeUndefined();\n      });\n    });\n\n    describe('target not found', () => {\n      it('should return undefined', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('NonExistentTarget');\n\n        // -- Assert --\n        expect(files).toBeUndefined();\n      });\n    });\n\n    describe('target build phases are undefined', () => {\n      it('should return undefined', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = {\n          Project: {\n            isa: 'PBXNativeTarget',\n            name: 'Project',\n            buildPhases: undefined,\n          },\n        };\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toBeUndefined();\n      });\n    });\n\n    describe('build phases are undefined', () => {\n      it('should return undefined', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = {\n          Project: {\n            isa: 'PBXNativeTarget',\n            name: 'Project',\n            buildPhases: undefined,\n          },\n        };\n        xcodeProject.objects.PBXSourcesBuildPhase = undefined;\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toBeUndefined();\n      });\n    });\n\n    describe('referenced build phase is undefined', () => {\n      it('should return undefined', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = {\n          Project: {\n            isa: 'PBXNativeTarget',\n            name: 'Project',\n            buildPhases: [\n              {\n                value: 'random-build-phase',\n              },\n            ],\n          },\n        };\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toBeUndefined();\n      });\n    });\n\n    describe('build phase files are undefined', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = {\n          Project: {\n            isa: 'PBXNativeTarget',\n            name: 'Project',\n            buildPhases: [\n              {\n                value: 'build-phase-key',\n              },\n            ],\n          },\n        };\n        xcodeProject.objects.PBXSourcesBuildPhase = {\n          'build-phase-key': {\n            isa: 'PBXSourcesBuildPhase',\n            files: undefined,\n          },\n        };\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('build phase has no files', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n        // -- Act --\n        const files = xcodeProject.filesForTarget('Project');\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('build phase with files', () => {\n      let xcodeProject: XcodeProject;\n\n      beforeEach(() => {\n        xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXNativeTarget = {\n          'some-target': {\n            isa: 'PBXNativeTarget',\n            name: 'some-target',\n            buildPhases: [\n              {\n                value: 'build-phase-key',\n              },\n            ],\n          },\n        };\n        xcodeProject.objects.PBXSourcesBuildPhase = {\n          'build-phase-key': {\n            isa: 'PBXSourcesBuildPhase',\n            files: [\n              {\n                value: 'file-key',\n              },\n            ],\n          },\n        };\n        xcodeProject.objects.PBXBuildFile = {\n          'file-key': {\n            isa: 'PBXBuildFile',\n            fileRef: 'file-ref-key',\n          },\n        };\n        xcodeProject.files = [\n          {\n            key: 'file-ref-key',\n            path: 'file-path',\n          },\n        ];\n      });\n\n      describe('build file objects are not defined', () => {\n        it('should return empty array', () => {\n          // -- Arrange --\n          xcodeProject.objects.PBXBuildFile = undefined;\n\n          // -- Act --\n          const files = xcodeProject.filesForTarget('some-target');\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('build file object is not found', () => {\n        it('should return empty array', () => {\n          // -- Arrange --\n          xcodeProject.objects.PBXBuildFile = {};\n\n          // -- Act --\n          const files = xcodeProject.filesForTarget('some-target');\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('build file object exists', () => {\n        describe('file reference is undefined', () => {\n          it('should ignore the file', () => {\n            // -- Arrange --\n            xcodeProject.files = [];\n\n            // -- Act --\n            const files = xcodeProject.filesForTarget('some-target');\n\n            // -- Assert --\n            expect(files).toEqual([]);\n          });\n        });\n\n        it('should return array of file paths', () => {\n          // -- Act --\n          const files = xcodeProject.filesForTarget('some-target');\n\n          // -- Assert --\n          expect(files).toEqual([\n            path.join(\n              appleProjectsPath,\n              'spm-swiftui-single-target',\n              'file-path',\n            ),\n          ]);\n        });\n      });\n    });\n  });\n\n  describe('projectFiles', () => {\n    describe('no groups in project', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXGroup = undefined;\n\n        // -- Act --\n        const files = xcodeProject.projectFiles();\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('main group not found', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        const project = xcodeProject.objects.PBXProject?.[\n          'D4E604C52D50CEEC00CAB00F'\n        ] as PBXProject;\n        if (project) {\n          delete project.mainGroup;\n        }\n\n        // -- Act --\n        const files = xcodeProject.projectFiles();\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('main group found', () => {\n      it('should return array of file paths', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n        // -- Act --\n        const files = xcodeProject.projectFiles();\n\n        // -- Assert --\n        expect(files).toEqual([\n          {\n            key: 'D4E604CD2D50CEEC00CAB00F',\n            path: 'Project.app',\n          },\n        ]);\n      });\n\n      it('should cache the result', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n        // Smoke test\n        expect(xcodeProject.files).toBeUndefined();\n\n        // -- Act --\n        const files = xcodeProject.projectFiles();\n\n        // -- Assert --\n        expect(xcodeProject.files).toBeDefined();\n        expect(xcodeProject.files).toEqual(files);\n      });\n    });\n  });\n\n  describe('buildGroup', () => {\n    describe('group has undefined children', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        const group: PBXGroup = {\n          isa: 'PBXGroup',\n          children: undefined,\n          path: '',\n        };\n\n        // -- Act --\n        const files = xcodeProject.buildGroup(group);\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('group has no children', () => {\n      it('should return empty array', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        const group: PBXGroup = {\n          isa: 'PBXGroup',\n        };\n\n        // -- Act --\n        const files = xcodeProject.buildGroup(group);\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n\n    describe('group child is file reference', () => {\n      const group: PBXGroup = {\n        isa: 'PBXGroup',\n        children: [\n          {\n            value: 'D4E604CD2D50CEEC00CAB00F',\n          },\n        ],\n        path: '',\n      };\n\n      describe('file references are undefined', () => {\n        it('should return empty array', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          xcodeProject.objects.PBXFileReference = undefined;\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('file reference is string', () => {\n        it('should be ignored', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          const group: PBXGroup = {\n            isa: 'PBXGroup',\n            children: [\n              {\n                value: 'D4E604CD2D50CEEC00CAB00F_comment',\n              },\n            ],\n            path: '',\n          };\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('file reference is valid', () => {\n        it('should return array of escaped paths', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          xcodeProject.objects.PBXFileReference = {\n            D4E604CD2D50CEEC00CAB00F: {\n              isa: 'PBXFileReference',\n              path: '\"some/path/to/file.swift\"',\n              sourceTree: 'SOURCE_ROOT',\n            },\n          };\n          const group: PBXGroup = {\n            isa: 'PBXGroup',\n            children: [\n              {\n                value: 'D4E604CD2D50CEEC00CAB00F',\n              },\n            ],\n            path: '',\n          };\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([\n            {\n              key: 'D4E604CD2D50CEEC00CAB00F',\n              path: 'some/path/to/file.swift',\n            },\n          ]);\n        });\n      });\n    });\n\n    describe('group child is group reference', () => {\n      const group: PBXGroup = {\n        isa: 'PBXGroup',\n        children: [\n          {\n            value: 'D4E604C42D50CEEC00CAB00F',\n          },\n        ],\n        path: '',\n      };\n\n      describe('groups are undefined', () => {\n        it('should return empty array', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          xcodeProject.objects.PBXGroup = undefined;\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('group reference is string', () => {\n        it('should return array of file paths', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          const group: PBXGroup = {\n            isa: 'PBXGroup',\n            children: [\n              {\n                value: 'D4E604CE2D50CEEC00CAB00F_comment',\n              },\n            ],\n            path: '',\n          };\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([]);\n        });\n      });\n\n      describe('group reference is valid', () => {\n        it('should return array of file paths', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([\n            {\n              key: 'D4E604CD2D50CEEC00CAB00F',\n              path: 'Project.app',\n            },\n          ]);\n        });\n      });\n\n      describe('group reference has path', () => {\n        it('should append the path to the file paths', () => {\n          // -- Arrange --\n          const xcodeProject = new XcodeProject(singleTargetProjectPath);\n          const group: PBXGroup = {\n            isa: 'PBXGroup',\n            children: [\n              {\n                value: 'sub-group',\n              },\n            ],\n            path: '\"some/path/to/group\"',\n          };\n          const subgroup: PBXGroup = {\n            isa: 'PBXGroup',\n            children: [\n              {\n                value: 'file-at-path',\n              },\n            ],\n          };\n          const file: PBXFileReference = {\n            isa: 'PBXFileReference',\n            path: '\"some/file/at/path.swift\"',\n            sourceTree: '<group>',\n          };\n          xcodeProject.objects.PBXGroup = {\n            'main-group': group,\n            'sub-group': subgroup,\n          };\n          xcodeProject.objects.PBXFileReference = {\n            'file-at-path': file,\n          };\n\n          // -- Act --\n          const files = xcodeProject.buildGroup(group);\n\n          // -- Assert --\n          expect(files).toEqual([\n            {\n              key: 'file-at-path',\n              path: 'some/file/at/path.swift',\n            },\n          ]);\n        });\n      });\n    });\n\n    describe('group child is not a file reference or group', () => {\n      it('should be ignored', () => {\n        // -- Arrange --\n        const xcodeProject = new XcodeProject(singleTargetProjectPath);\n        xcodeProject.objects.PBXGroup = {};\n        xcodeProject.objects.PBXFileReference = {};\n        const group: PBXGroup = {\n          isa: 'PBXGroup',\n          children: [\n            {\n              value: 'random-key',\n            },\n          ],\n          path: '',\n        };\n\n        // -- Act --\n        const files = xcodeProject.buildGroup(group);\n\n        // -- Assert --\n        expect(files).toEqual([]);\n      });\n    });\n  });\n});\n"]}