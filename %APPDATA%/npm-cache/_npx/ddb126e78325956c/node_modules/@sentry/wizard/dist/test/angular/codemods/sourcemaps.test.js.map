{"version":3,"file":"sourcemaps.test.js","sourceRoot":"","sources":["../../../../test/angular/codemods/sourcemaps.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, vi, expect, beforeEach } from 'vitest';\nimport {\n  addSourcemapEntryToAngularJSON,\n  addSourceMapsSetting,\n} from '../../../src/angular/codemods/sourcemaps';\n\nimport * as AngularSourceMapsWizard from '../../../src/sourcemaps/tools/angular';\n\nconst { readFileSyncMock, writeFileSyncMock } = vi.hoisted(() => {\n  return {\n    readFileSyncMock: vi.fn(),\n    writeFileSyncMock: vi.fn(),\n  };\n});\n\nvi.mock('fs', async () => {\n  return {\n    ...(await vi.importActual('fs')),\n    readFileSync: readFileSyncMock,\n    writeFileSync: writeFileSyncMock,\n  };\n});\n\ndescribe('addSourcemapEntryToAngularJSON', () => {\n  const configureAngularSourcemapGenerationFlowSpy = vi\n    .spyOn(AngularSourceMapsWizard, 'configureAngularSourcemapGenerationFlow')\n    .mockImplementation(() => Promise.resolve());\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('reads and writes the `angular.json` file correctly', async () => {\n    const angularJsonPath = 'angular.json';\n    const angularJsonContent = JSON.stringify({\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {\n                production: {\n                  someKey: 'someValue',\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    readFileSyncMock.mockReturnValue(angularJsonContent);\n\n    await addSourcemapEntryToAngularJSON();\n\n    expect(readFileSyncMock).toHaveBeenCalledWith(\n      expect.stringContaining(angularJsonPath),\n      'utf-8',\n    );\n    expect(writeFileSyncMock).toHaveBeenCalledWith(\n      expect.stringContaining(angularJsonPath),\n      JSON.stringify(\n        {\n          projects: {\n            project1: {\n              architect: {\n                build: {\n                  configurations: {\n                    production: {\n                      someKey: 'someValue',\n                      sourceMap: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        null,\n        2,\n      ),\n    );\n  });\n\n  it('falls back to printing copy/paste instructions when reading fails', async () => {\n    readFileSyncMock.mockImplementation(() => {\n      throw new Error('File not found');\n    });\n\n    await addSourcemapEntryToAngularJSON();\n\n    expect(configureAngularSourcemapGenerationFlowSpy).toHaveBeenCalledOnce();\n    expect(writeFileSyncMock).not.toHaveBeenCalled();\n  });\n\n  it('falls back to printing copy/paste instructions when writing fails', async () => {\n    const angularJsonContent = JSON.stringify({\n      projects: {\n        project1: {},\n      },\n    });\n\n    readFileSyncMock.mockReturnValue(angularJsonContent);\n    writeFileSyncMock.mockImplementation(() => {\n      throw new Error('Write failed');\n    });\n\n    await addSourcemapEntryToAngularJSON();\n\n    expect(configureAngularSourcemapGenerationFlowSpy).toHaveBeenCalledOnce();\n    expect(writeFileSyncMock).toHaveBeenCalled();\n  });\n\n  it('falls back to printing copy/paste instructions when angular.json` has no projects', async () => {\n    const angularJsonContent = JSON.stringify({\n      projects: {},\n    });\n\n    readFileSyncMock.mockReturnValue(angularJsonContent);\n\n    await addSourcemapEntryToAngularJSON();\n\n    expect(configureAngularSourcemapGenerationFlowSpy).toHaveBeenCalledOnce();\n    expect(writeFileSyncMock).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('addSourceMapsSetting', () => {\n  it('adds sourceMap setting to angular.json', () => {\n    const angularJson = {\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {\n                production: {},\n              },\n            },\n          },\n        },\n        project2: {\n          architect: {},\n        },\n      },\n    };\n\n    const updatedAngularJson = addSourceMapsSetting(angularJson);\n\n    expect(updatedAngularJson).toEqual({\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {\n                production: { sourceMap: true },\n              },\n            },\n          },\n        },\n        project2: {\n          architect: {\n            build: {\n              configurations: {\n                production: {\n                  sourceMap: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  });\n\n  it('returns `undefined` if no projects are found', () => {\n    const angularJson = {};\n\n    const updatedAngularJson = addSourceMapsSetting(angularJson);\n\n    expect(updatedAngularJson).toBeUndefined();\n  });\n\n  it('returns `undefined` if projects have no architect', () => {\n    const angularJson = {\n      projects: {},\n    };\n\n    const updatedAngularJson = addSourceMapsSetting(angularJson);\n\n    expect(updatedAngularJson).toBeUndefined();\n  });\n\n  it.each([\n    {\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {\n                production: {},\n              },\n            },\n          },\n        },\n      },\n    },\n    {\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {},\n            },\n          },\n        },\n      },\n    },\n    {\n      projects: {\n        project1: {\n          architect: {\n            build: {},\n          },\n        },\n      },\n    },\n    {\n      projects: {\n        project1: {\n          architect: {},\n        },\n      },\n    },\n    {\n      projects: {\n        project1: {},\n      },\n    },\n  ])('handles incomplete project declarations (%s)', (angularJson) => {\n    const updatedAngularJson = addSourceMapsSetting(angularJson);\n\n    expect(updatedAngularJson).toEqual({\n      projects: {\n        project1: {\n          architect: {\n            build: {\n              configurations: {\n                production: { sourceMap: true },\n              },\n            },\n          },\n        },\n      },\n    });\n  });\n});\n"]}