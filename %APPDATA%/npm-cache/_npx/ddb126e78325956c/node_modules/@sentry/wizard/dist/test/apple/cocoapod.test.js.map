{"version":3,"file":"cocoapod.test.js","sourceRoot":"","sources":["../../../test/apple/cocoapod.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport {\n  addCocoaPods,\n  podInstall,\n  usesCocoaPod,\n} from '../../src/apple/cocoapod';\nimport * as bash from '../../src/utils/bash';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nvi.mock('@clack/prompts', async () => ({\n  __esModule: true,\n  ...(await vi.importActual<typeof clack>('@clack/prompts')),\n}));\n\nvi.mock('../../src/utils/bash');\nvi.spyOn(Sentry, 'setTag').mockImplementation(() => {\n  /* empty */\n});\nvi.spyOn(Sentry, 'captureException').mockImplementation(() => 'id');\n\nconst clackSpinnerMock = {\n  start: vi.fn(),\n  stop: vi.fn(),\n  message: vi.fn(),\n};\n\ndescribe('cocoapod', () => {\n  beforeEach(() => {\n    vi.spyOn(clack, 'spinner').mockReturnValue(clackSpinnerMock);\n    vi.spyOn(clack.log, 'error').mockImplementation(() => {\n      /* empty */\n    });\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('usesCocoaPod', () => {\n    describe('Podfile exists', () => {\n      it('should return true', () => {\n        // -- Arrange --\n        const projPath = path.join(os.tmpdir(), 'test-project-with-podfile');\n        const tempDir = fs.mkdtempSync(projPath);\n\n        const podfile = path.join(tempDir, 'Podfile');\n        fs.writeFileSync(podfile, '');\n\n        // -- Act --\n        const result = usesCocoaPod(tempDir);\n\n        // -- Assert --\n        expect(result).toBeTruthy();\n      });\n    });\n\n    describe('Podfile does not exist', () => {\n      it('should return false', () => {\n        // -- Arrange --\n        const projPath = path.join(os.tmpdir(), 'test-project-without-podfile');\n        const tempDir = fs.mkdtempSync(projPath);\n\n        // -- Act --\n        const result = usesCocoaPod(tempDir);\n\n        // -- Assert --\n        expect(result).toBeFalsy();\n      });\n    });\n  });\n\n  describe('addCocoaPods', () => {\n    describe('Podfile does not exist', () => {\n      it('should throw an error', async () => {\n        // -- Arrange --\n        const projPath = path.join(os.tmpdir(), 'test-project-without-podfile');\n        const tempDir = fs.mkdtempSync(projPath);\n\n        // -- Act & Assert --\n        await expect(addCocoaPods(tempDir)).rejects.toThrow(\n          'ENOENT: no such file or directory, open',\n        );\n      });\n    });\n\n    describe('Podfile exists', () => {\n      describe('Podfile includes Sentry pod', () => {\n        const variations = [\n          {\n            case: 'simple',\n            content: 'pod \"Sentry\"',\n          },\n          {\n            case: 'with-swiftui',\n            content: 'pod \"SentrySwiftUI\"',\n          },\n          {\n            case: 'leading-space',\n            content: '  pod \"Sentry\"',\n          },\n          {\n            case: 'leading-space-and-swiftui',\n            content: '  pod \"SentrySwiftUI\"',\n          },\n          {\n            case: 'trailing-space',\n            content: 'pod \"Sentry\" ',\n          },\n          {\n            case: 'trailing-space-and-swiftui',\n            content: 'pod \"SentrySwiftUI\" ',\n          },\n          {\n            case: 'single-quotes',\n            content: \"pod 'Sentry'\",\n          },\n          {\n            case: 'double-quotes',\n            content: 'pod \"Sentry\"',\n          },\n        ];\n        for (const variation of variations) {\n          it(`should not change the Podfile for ${variation.case}`, async () => {\n            // -- Arrange --\n            const projPath = fs.mkdtempSync(path.join(os.tmpdir(), 'project'));\n            fs.mkdirSync(projPath, {\n              recursive: true,\n            });\n\n            const podfile = path.join(projPath, 'Podfile');\n            fs.writeFileSync(podfile, variation.content, 'utf8');\n\n            // -- Act --\n            const result = await addCocoaPods(projPath);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            expect(fs.readFileSync(podfile, 'utf8')).toBe(variation.content);\n          });\n        }\n      });\n\n      describe('Podfile includes no other pods', () => {\n        describe('Podfile does not include use_frameworks!', () => {\n          it('should not change the Podfile', async () => {\n            // -- Arrange --\n            const projPath = fs.mkdtempSync(path.join(os.tmpdir(), 'project'));\n            fs.mkdirSync(projPath, {\n              recursive: true,\n            });\n\n            const podfile = path.join(projPath, 'Podfile');\n            fs.writeFileSync(podfile, '', 'utf8');\n\n            // -- Act --\n            const result = await addCocoaPods(projPath);\n\n            // -- Assert --\n            expect(result).toBeFalsy();\n            expect(fs.readFileSync(podfile, 'utf8')).toBe('');\n          });\n        });\n\n        describe('Podfile includes use_frameworks!', () => {\n          it('should change the Podfile', async () => {\n            // -- Arrange --\n            const projPath = fs.mkdtempSync(path.join(os.tmpdir(), 'project'));\n            fs.mkdirSync(projPath, {\n              recursive: true,\n            });\n\n            const podfile = path.join(projPath, 'Podfile');\n            fs.writeFileSync(podfile, `use_frameworks!`, 'utf8');\n\n            // -- Act --\n            const result = await addCocoaPods(projPath);\n\n            // -- Assert --\n            expect(result).toBeTruthy();\n            expect(fs.readFileSync(podfile, 'utf8')).toBe(\n              `use_frameworks!\\npod 'Sentry'\\n`,\n            );\n          });\n        });\n      });\n\n      describe('Podfile includes other pods', () => {\n        it('should append Sentry pod after last pod', async () => {\n          // -- Arrange --\n          const projPath = fs.mkdtempSync(path.join(os.tmpdir(), 'project'));\n          fs.mkdirSync(projPath, {\n            recursive: true,\n          });\n\n          const podfile = path.join(projPath, 'Podfile');\n          fs.writeFileSync(podfile, 'pod \"OtherPod\"', 'utf8');\n\n          // -- Act --\n          const result = await addCocoaPods(projPath);\n\n          // -- Assert --\n          expect(result).toBeTruthy();\n          expect(fs.readFileSync(podfile, 'utf8')).toBe(\n            `pod \"OtherPod\"\\npod 'Sentry'\\n`,\n          );\n        });\n      });\n    });\n  });\n\n  describe('podInstall', () => {\n    let workDir: string;\n\n    beforeEach(() => {\n      workDir = path.join(os.tmpdir(), 'test-project');\n    });\n\n    describe('any bash scripts fail', () => {\n      beforeEach(() => {\n        vi.spyOn(bash, 'execute').mockRejectedValue(new Error('test error'));\n      });\n\n      it('should not throw an error', async () => {\n        // -- Act & Assert --\n        await expect(podInstall(workDir)).resolves.not.toThrow();\n      });\n\n      it('should set tag', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(Sentry.setTag).toHaveBeenCalledWith('pods-installed', false);\n      });\n\n      it('should capture exception', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(Sentry.captureException).toHaveBeenCalledWith(\n          'Sentry pod install failed.',\n        );\n      });\n\n      it('should start and stop spinner', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(clackSpinnerMock.start).toHaveBeenCalledWith(\n          \"Running 'pod install'. This may take a few minutes...\",\n        );\n        expect(clackSpinnerMock.stop).toHaveBeenCalledWith(\n          'Failed to install pods.',\n        );\n      });\n    });\n\n    describe('all bash scripts work', () => {\n      beforeEach(() => {\n        vi.spyOn(bash, 'execute').mockResolvedValue('');\n      });\n\n      it('should call pod update and install', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(bash.execute).toHaveBeenCalledWith(\n          `cd ${workDir} && pod repo update`,\n        );\n        expect(bash.execute).toHaveBeenCalledWith(\n          `cd ${workDir} && pod install --silent`,\n        );\n      });\n\n      it('should set tag', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(Sentry.setTag).toHaveBeenCalledWith('pods-installed', true);\n      });\n\n      it('should start and stop spinner', async () => {\n        // -- Act --\n        await podInstall(workDir);\n\n        // -- Assert --\n        expect(clackSpinnerMock.start).toHaveBeenCalledWith(\n          \"Running 'pod install'. This may take a few minutes...\",\n        );\n        expect(clackSpinnerMock.stop).toHaveBeenCalledWith('Pods installed.');\n      });\n    });\n\n    describe('dir not given', () => {\n      it('should use current directory', async () => {\n        // -- Act --\n        await podInstall();\n\n        // -- Assert --\n        expect(bash.execute).toHaveBeenCalledWith(`cd . && pod repo update`);\n        expect(bash.execute).toHaveBeenCalledWith(\n          `cd . && pod install --silent`,\n        );\n      });\n    });\n  });\n});\n"]}