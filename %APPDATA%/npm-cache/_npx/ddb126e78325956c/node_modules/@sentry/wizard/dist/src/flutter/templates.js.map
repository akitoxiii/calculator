{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../../src/flutter/templates.ts"],"names":[],"mappings":";;;AAAA,0CAAiD;AAEpC,QAAA,YAAY,GAAG,wDAAwD,CAAC;AAErF,SAAgB,cAAc,CAAC,OAAe,EAAE,GAAW;IACzD,OAAO;;;aAGI,OAAO;SACX,GAAG;CACX,CAAC;AACF,CAAC;AAPD,wCAOC;AAED,SAAgB,gBAAgB,CAAC,SAAiB;IAChD,OAAO,cAAc,SAAS,EAAE,CAAC;AACnC,CAAC;AAFD,4CAEC;AAED,SAAgB,WAAW,CACzB,GAAW,EACX,mBAGC,EACD,MAAc;IAEd,IAAI,OAAO,GAAG;;uBAEO,GAAG,IAAI,CAAC;IAE7B,IAAI,mBAAmB,CAAC,OAAO,EAAE;QAC/B,OAAO,IAAI;;;sCAGuB,CAAC;KACpC;IAED,IAAI,mBAAmB,CAAC,SAAS,IAAI,mBAAmB,CAAC,OAAO,EAAE;QAChE,OAAO,IAAI;;;wCAGyB,CAAC;KACtC;IAED,OAAO,IAAI;;kDAEqC,MAAM;;;4EAGoB,CAAC;IAE3E,OAAO,OAAO,CAAC;AACjB,CAAC;AAlCD,kCAkCC;AAED,SAAgB,qBAAqB,CACnC,aAAqB,EACrB,aAAqB,EACrB,OAAe,EACf,GAAW;IAEX,MAAM,OAAO,GAAG;oBACE,aAAa;;;wBAGT,aAAa;;EAEnC,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;IAE/B,OAAO,IAAA,uBAAe,EAAC,IAAI,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACxD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,sDAiBC;AAED,SAAgB,kBAAkB,CAAC,GAAW;IAC5C,MAAM,OAAO,GAAG;;;;;uBAKK,GAAG;;;;;;;EAOxB,CAAC;IACD,OAAO,IAAA,uBAAe,EAAC,IAAI,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACxD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,gDAiBC","sourcesContent":["import { makeCodeSnippet } from '../utils/clack';\n\nexport const sentryImport = `import 'package:sentry_flutter/sentry_flutter.dart';\\n`;\n\nexport function pubspecOptions(project: string, org: string): string {\n  return `sentry:\n  upload_debug_symbols: true\n  upload_source_maps: true\n  project: ${project}\n  org: ${org}\n`;\n}\n\nexport function sentryProperties(authToken: string): string {\n  return `auth_token=${authToken}`;\n}\n\nexport function initSnippet(\n  dsn: string,\n  selectedFeaturesMap: {\n    tracing: boolean;\n    profiling: boolean;\n  },\n  runApp: string,\n): string {\n  let snippet = `await SentryFlutter.init(\n    (options) {\n      options.dsn = '${dsn}';`;\n\n  if (selectedFeaturesMap.tracing) {\n    snippet += `\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.\n      // We recommend adjusting this value in production.\n      options.tracesSampleRate = 1.0;`;\n  }\n\n  if (selectedFeaturesMap.profiling && selectedFeaturesMap.tracing) {\n    snippet += `\n      // The sampling rate for profiling is relative to tracesSampleRate\n      // Setting to 1.0 will profile 100% of sampled transactions:\n      options.profilesSampleRate = 1.0;`;\n  }\n\n  snippet += `\n    },\n    appRunner: () => runApp(SentryWidget(child: ${runApp})),\n  );\n  // TODO: Remove this line after sending the first sample event to sentry.\n  await Sentry.captureException(StateError('This is a sample exception.'));`;\n\n  return snippet;\n}\n\nexport function pubspecSnippetColored(\n  sentryVersion: string,\n  pluginVersion: string,\n  project: string,\n  org: string,\n): string {\n  const snippet = `dependencies:\n  sentry_flutter: ${sentryVersion}\n\ndev_dependencies:\n  sentry_dart_plugin: ${pluginVersion}\n  \n${pubspecOptions(project, org)}`;\n\n  return makeCodeSnippet(true, (_unchanged, plus, _minus) => {\n    return plus(snippet);\n  });\n}\n\nexport function initSnippetColored(dsn: string): string {\n  const snippet = `import 'package:sentry_flutter/sentry_flutter.dart';\n\nFuture<void>main() async {\n  await SentryFlutter.init(\n    (options) {\n      options.dsn = '${dsn}';\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.\n      // We recommend adjusting this value in production.\n      options.tracesSampleRate = 1.0;\n    },\n    appRunner: () => runApp(SentryWidget(child: YourApp())),\n  )\n}`;\n  return makeCodeSnippet(true, (_unchanged, plus, _minus) => {\n    return plus(snippet);\n  });\n}\n"]}