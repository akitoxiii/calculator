"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../../Constants");
const SentryCli_1 = require("../SentryCli");
const vitest_1 = require("vitest");
const args = {
    debug: false,
    integration: Constants_1.Integration.reactNative,
    platform: [Constants_1.Platform.ios],
    quiet: false,
    skipConnect: false,
    uninstall: false,
    url: 'https://localhost:1234',
    signup: false,
    disableTelemetry: false,
};
const demoAnswers = {
    config: {
        auth: {
            token: 'abcd',
        },
        organization: {
            slug: 'test_org',
        },
        project: {
            slug: 'test_proj',
        },
    },
};
(0, vitest_1.describe)('SentryCli', () => {
    const resolveFunc = vitest_1.vi
        .fn()
        .mockReturnValue('node_modules/sentry/cli');
    (0, vitest_1.test)('convertAnswersToProperties', () => {
        const sentry = new SentryCli_1.SentryCli(args);
        sentry.setResolveFunction(resolveFunc);
        const props = sentry.convertAnswersToProperties(demoAnswers);
        (0, vitest_1.expect)(props['defaults/url']).toBe('https://localhost:1234');
        (0, vitest_1.expect)(props['defaults/org']).toBe('test_org');
        (0, vitest_1.expect)(props['defaults/project']).toBe('test_proj');
        (0, vitest_1.expect)(props['auth/token']).toBe('abcd');
        (0, vitest_1.expect)(props['cli/executable']).toBe('node_modules/sentry/cli');
    });
    (0, vitest_1.test)('dump properties', () => {
        const sentry = new SentryCli_1.SentryCli(args);
        sentry.setResolveFunction(resolveFunc);
        const props = sentry.convertAnswersToProperties(demoAnswers);
        (0, vitest_1.expect)(sentry.dumpProperties(props))
            .toBe(`defaults.url=https://localhost:1234
defaults.org=test_org
defaults.project=test_proj
auth.token=abcd
cli.executable=node_modules/sentry/cli
`);
    });
    (0, vitest_1.test)('dump config', () => {
        const sentry = new SentryCli_1.SentryCli(args);
        sentry.setResolveFunction(resolveFunc);
        const props = {
            auth: { 'auth/token': 'myToken' },
        };
        (0, vitest_1.expect)(sentry.dumpConfig(props)).toMatchInlineSnapshot(`
      "[auth]
      token=myToken
      "
    `);
    });
    (0, vitest_1.test)('convertAnswersToProperties windows', () => {
        const resolveFunc = vitest_1.vi
            .fn()
            .mockReturnValue('node_modules\\sentry\\cli');
        const sentry = new SentryCli_1.SentryCli(args);
        sentry.setResolveFunction(resolveFunc);
        const props = sentry.convertAnswersToProperties(demoAnswers);
        (0, vitest_1.expect)(props['defaults/url']).toBe('https://localhost:1234');
        (0, vitest_1.expect)(props['defaults/org']).toBe('test_org');
        (0, vitest_1.expect)(props['defaults/project']).toBe('test_proj');
        (0, vitest_1.expect)(props['auth/token']).toBe('abcd');
        (0, vitest_1.expect)(props['cli/executable']).toBe('node_modules\\\\sentry\\\\cli');
    });
    (0, vitest_1.test)('dump properties windows', () => {
        const resolveFunc = vitest_1.vi
            .fn()
            .mockReturnValue('node_modules\\sentry\\cli');
        const sentry = new SentryCli_1.SentryCli(args);
        sentry.setResolveFunction(resolveFunc);
        const props = sentry.convertAnswersToProperties(demoAnswers);
        (0, vitest_1.expect)(sentry.dumpProperties(props))
            .toBe(`defaults.url=https://localhost:1234
defaults.org=test_org
defaults.project=test_proj
auth.token=abcd
cli.executable=node_modules\\\\sentry\\\\cli
`);
    });
});
//# sourceMappingURL=SentryCli.js.map