{"version":3,"file":"templates.test.js","sourceRoot":"","sources":["../../../test/flutter/templates.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,2DAIqC;AAErC,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,iBAAQ,EAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAA,WAAE,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,QAAQ,GAAG,IAAA,0BAAc,EAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;YAClE,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC;;;;;;;aAOhC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAA,iBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,WAAE,EAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,QAAQ,GAAG,IAAA,4BAAgB,EAAC,eAAe,CAAC,CAAC;YACnD,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAA,iBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,WAAE,EAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,QAAQ,GAAG,IAAA,uBAAW,EAC1B,QAAQ,EACR;gBACE,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI;aAChB,EACD,eAAe,CAChB,CAAC;YACF,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;OAetC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,QAAQ,GAAG,IAAA,uBAAW,EAC1B,QAAQ,EACR;gBACE,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,KAAK;aACjB,EACD,eAAe,CAChB,CAAC;YACF,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;OAYtC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,IAAA,uBAAW,EAC1B,QAAQ,EACR;gBACE,OAAO,EAAE,KAAK;gBACd,SAAS,EAAE,KAAK;aACjB,EACD,eAAe,CAChB,CAAC;YACF,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;OAStC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport {\n  pubspecOptions,\n  sentryProperties,\n  initSnippet,\n} from '../../src/flutter/templates';\n\ndescribe('Flutter code templates', () => {\n  describe('pubspec', () => {\n    it('generates pubspec with project and org', () => {\n      const template = pubspecOptions('fixture-project', 'fixture-org');\n      expect(template).toMatchInlineSnapshot(`\n              \"sentry:\n                upload_debug_symbols: true\n                upload_source_maps: true\n                project: fixture-project\n                org: fixture-org\n              \"\n            `);\n    });\n  });\n  describe('sentry.properties', () => {\n    it('generates sentry.properties with token', () => {\n      const template = sentryProperties('fixture-token');\n      expect(template).toMatchInlineSnapshot(`\"auth_token=fixture-token\"`);\n    });\n  });\n  describe('init', () => {\n    it('generates Sentry config with all features enabled', () => {\n      const template = initSnippet(\n        'my-dsn',\n        {\n          tracing: true,\n          profiling: true,\n        },\n        'const MyApp()',\n      );\n      expect(template).toMatchInlineSnapshot(`\n        \"await SentryFlutter.init(\n            (options) {\n              options.dsn = 'my-dsn';\n              // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.\n              // We recommend adjusting this value in production.\n              options.tracesSampleRate = 1.0;\n              // The sampling rate for profiling is relative to tracesSampleRate\n              // Setting to 1.0 will profile 100% of sampled transactions:\n              options.profilesSampleRate = 1.0;\n            },\n            appRunner: () => runApp(SentryWidget(child: const MyApp())),\n          );\n          // TODO: Remove this line after sending the first sample event to sentry.\n          await Sentry.captureException(StateError('This is a sample exception.'));\"\n      `);\n    });\n\n    it('generates Sentry config with profiling disabled', () => {\n      const template = initSnippet(\n        'my-dsn',\n        {\n          tracing: true,\n          profiling: false,\n        },\n        'const MyApp()',\n      );\n      expect(template).toMatchInlineSnapshot(`\n        \"await SentryFlutter.init(\n            (options) {\n              options.dsn = 'my-dsn';\n              // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.\n              // We recommend adjusting this value in production.\n              options.tracesSampleRate = 1.0;\n            },\n            appRunner: () => runApp(SentryWidget(child: const MyApp())),\n          );\n          // TODO: Remove this line after sending the first sample event to sentry.\n          await Sentry.captureException(StateError('This is a sample exception.'));\"\n      `);\n    });\n\n    it('generates Sentry config with tracing disabled', () => {\n      const template = initSnippet(\n        'my-dsn',\n        {\n          tracing: false,\n          profiling: false,\n        },\n        'const MyApp()',\n      );\n      expect(template).toMatchInlineSnapshot(`\n        \"await SentryFlutter.init(\n            (options) {\n              options.dsn = 'my-dsn';\n            },\n            appRunner: () => runApp(SentryWidget(child: const MyApp())),\n          );\n          // TODO: Remove this line after sending the first sample event to sentry.\n          await Sentry.captureException(StateError('This is a sample exception.'));\"\n      `);\n    });\n  });\n});\n"]}