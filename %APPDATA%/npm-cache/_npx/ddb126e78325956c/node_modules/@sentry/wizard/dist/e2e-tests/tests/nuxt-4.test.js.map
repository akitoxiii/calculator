{"version":3,"file":"nuxt-4.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/nuxt-4.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport { cleanupGit, revertLocalChanges } from '../utils';\nimport {\n  KEYS,\n  TEST_ARGS,\n  checkEnvBuildPlugin,\n  checkFileContents,\n  checkFileExists,\n  checkIfBuilds,\n  checkIfRunsOnProdMode,\n  checkPackageJson,\n  startWizardInstance,\n} from '../utils';\nimport { afterAll, beforeAll, describe, test } from 'vitest';\n\ndescribe('Nuxt-4', () => {\n  const projectDir = path.resolve(\n    __dirname,\n    '../test-applications/nuxt-4-test-app',\n  );\n\n  beforeAll(async () => {\n    await runWizardOnNuxtProject(projectDir);\n  });\n\n  afterAll(() => {\n    revertLocalChanges(projectDir);\n    cleanupGit(projectDir);\n  });\n\n  testNuxtProjectSetup(projectDir);\n\n  testNuxtProjectConfigs(projectDir);\n\n  testNuxtProjectBuildsAndRuns(projectDir);\n});\n\nasync function runWizardOnNuxtProject(projectDir: string): Promise<void> {\n  const integration = Integration.nuxt;\n\n  const wizardInstance = startWizardInstance(integration, projectDir);\n  const packageManagerPrompted = await wizardInstance.waitForOutput(\n    'Please select your package manager.',\n  );\n\n  const nftOverridePrompted =\n    packageManagerPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      // Selecting `yarn` as the package manager\n      [KEYS.DOWN, KEYS.ENTER],\n      'Do you want to add an override for @vercel/nft version ^0.27.4?',\n      {\n        timeout: 240_000,\n      },\n    ));\n\n  const deploymentPlatformPrompted =\n    nftOverridePrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      KEYS.ENTER,\n      'Please select your deployment platform.',\n      {\n        timeout: 240_000,\n      },\n    ));\n\n  const tracingOptionPrompted =\n    deploymentPlatformPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      KEYS.ENTER,\n      // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n      'Do you want to enable',\n      {\n        timeout: 240_000,\n      },\n    ));\n\n  const replayOptionPrompted =\n    tracingOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      // \"Do you want to enable Sentry Session Replay\", sometimes doesn't work as `Sentry Session Replay` can be printed in bold.\n      'to get a video-like reproduction of errors during a user session?',\n    ));\n\n  replayOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Do you want to create an example page',\n      {\n        optional: true,\n      },\n    ));\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER, KEYS.ENTER],\n    'Successfully installed the Sentry Nuxt SDK!',\n  );\n\n  wizardInstance.kill();\n}\n\nfunction testNuxtProjectSetup(projectDir: string) {\n  const integration = Integration.nuxt;\n\n  test('package.json is updated correctly', () => {\n    checkPackageJson(projectDir, integration);\n  });\n\n  test('.env-sentry-build-plugin is created and contains the auth token', () => {\n    checkEnvBuildPlugin(projectDir);\n  });\n\n  test('config files created', () => {\n    checkFileExists(`${projectDir}/sentry.server.config.ts`);\n    checkFileExists(`${projectDir}/sentry.client.config.ts`);\n  });\n\n  test('example page exists', () => {\n    checkFileExists(`${projectDir}/app/pages/sentry-example-page.vue`);\n    checkFileExists(`${projectDir}/server/api/sentry-example-api.ts`);\n  });\n}\n\nfunction testNuxtProjectConfigs(projectDir: string) {\n  test('nuxt config contains sentry module', () => {\n    checkFileContents(path.resolve(projectDir, 'nuxt.config.ts'), [\n      \"modules: ['@sentry/nuxt/module'],\",\n      'sentry: {',\n      '  sourceMapsUploadOptions: {',\n      `    org: '${TEST_ARGS.ORG_SLUG}',`,\n      `    project: '${TEST_ARGS.PROJECT_SLUG}'`,\n      '  }',\n      '},',\n      'sourcemap: {',\n      \"  client: 'hidden'\",\n      '}',\n    ]);\n  });\n\n  test('sentry.client.config.ts contents', () => {\n    checkFileContents(path.resolve(projectDir, 'sentry.client.config.ts'), [\n      'import * as Sentry from \"@sentry/nuxt\";',\n      'Sentry.init({',\n      '  // If set up, you can use your runtime config here',\n      '  // dsn: useRuntimeConfig().public.sentry.dsn,',\n      `  dsn: \"${TEST_ARGS.PROJECT_DSN}\",`,\n      '  // We recommend adjusting this value in production, or using tracesSampler',\n      '  // for finer control',\n      '  tracesSampleRate: 1.0,',\n      '  // This sets the sample rate to be 10%. You may want this to be 100% while',\n      '  // in development and sample at a lower rate in production',\n      '  replaysSessionSampleRate: 0.1,',\n      '  // If the entire session is not sampled, use the below sample rate to sample',\n      '  // sessions when an error occurs.',\n      '  replaysOnErrorSampleRate: 1.0,',\n      \"  // If you don't want to use Session Replay, just remove the line below:\",\n      '  integrations: [Sentry.replayIntegration()],',\n      \"  // Setting this option to true will print useful information to the console while you're setting up Sentry.\",\n      '  debug: false,',\n      '});',\n    ]);\n  });\n\n  test('sentry.server.config.ts contents', () => {\n    checkFileContents(path.resolve(projectDir, 'sentry.server.config.ts'), [\n      'import * as Sentry from \"@sentry/nuxt\";',\n      'Sentry.init({',\n      `  dsn: \"${TEST_ARGS.PROJECT_DSN}\",`,\n      '  // We recommend adjusting this value in production, or using tracesSampler',\n      '  // for finer control',\n      '  tracesSampleRate: 1.0,',\n      \"  // Setting this option to true will print useful information to the console while you're setting up Sentry.\",\n      '  debug: false,',\n      '});',\n    ]);\n  });\n}\n\nfunction testNuxtProjectBuildsAndRuns(projectDir: string) {\n  test('builds successfully', async () => {\n    await checkIfBuilds(projectDir);\n  });\n\n  test('runs on prod mode correctly', async () => {\n    await checkIfRunsOnProdMode(projectDir, 'Listening on');\n  });\n}\n"]}