{"version":3,"file":"code-tools.js","sourceRoot":"","sources":["../../../src/apple/code-tools.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as templates from './templates';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\n\nconst swiftAppLaunchRegex =\n  /(func\\s+application\\s*\\(\\s*_\\s+application:\\s*[^,]+,\\s*didFinishLaunchingWithOptions[^,]+:\\s*[^)]+\\s*\\)\\s+->\\s+Bool\\s+{)|func\\s+applicationDidFinishLaunching\\s*\\(\\s*_\\s+aNotification:\\s+Notification\\s*\\)\\s*{/im;\nconst objcAppLaunchRegex =\n  /-\\s*\\(\\s*BOOL\\s*\\)\\s*application:\\s*\\(\\s*UIApplication\\s*\\*\\s*\\)\\s*application\\s+didFinishLaunchingWithOptions:\\s*\\(\\s*NSDictionary\\s*\\*\\s*\\)\\s*launchOptions\\s*{/im;\nconst swiftUIRegex = /@main\\s+struct[^:]+:\\s*(SwiftUI\\.)?App\\s*{/im;\n\nfunction isAppDelegateFile(filePath: string): boolean {\n  const appLaunchRegex = filePath.toLowerCase().endsWith('.swift')\n    ? swiftAppLaunchRegex\n    : objcAppLaunchRegex;\n\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  return appLaunchRegex.test(fileContent) || swiftUIRegex.test(fileContent);\n}\n\nfunction findAppDidFinishLaunchingWithOptions(\n  dir: string,\n  files: string[] | undefined = undefined,\n): string | null {\n  if (!files) {\n    files = fs.readdirSync(dir);\n    files = files.map((f) => path.join(dir, f));\n  }\n\n  //iterate over subdirectories later,\n  //the appdelegate usually is in the top level\n  const dirs: string[] = [];\n\n  for (const filePath of files) {\n    if (\n      filePath.endsWith('.swift') ||\n      filePath.endsWith('.m') ||\n      filePath.endsWith('.mm')\n    ) {\n      if (fs.existsSync(filePath) && isAppDelegateFile(filePath)) {\n        return filePath;\n      }\n    } else if (\n      !path.basename(filePath).startsWith('.') &&\n      !filePath.endsWith('.xcodeproj') &&\n      !filePath.endsWith('.xcassets') &&\n      fs.existsSync(filePath) &&\n      fs.lstatSync(filePath).isDirectory()\n    ) {\n      dirs.push(filePath);\n    }\n  }\n\n  for (const dr of dirs) {\n    const result = findAppDidFinishLaunchingWithOptions(dr);\n    if (result) return result;\n  }\n  return null;\n}\n\nexport function addCodeSnippetToProject(\n  projPath: string,\n  files: string[],\n  dsn: string,\n): boolean {\n  const appDelegate = findAppDidFinishLaunchingWithOptions(projPath, files);\n  if (!appDelegate) {\n    return false;\n  }\n\n  const fileContent = fs.readFileSync(appDelegate, 'utf8');\n  const isSwift = appDelegate.toLowerCase().endsWith('.swift');\n  const appLaunchRegex = isSwift ? swiftAppLaunchRegex : objcAppLaunchRegex;\n  const importStatement = isSwift ? 'import Sentry\\n' : '@import Sentry;\\n';\n  const checkForSentryInit = isSwift ? 'SentrySDK.start' : '[SentrySDK start';\n  let codeSnippet = isSwift\n    ? templates.getSwiftSnippet(dsn)\n    : templates.getObjcSnippet(dsn);\n\n  Sentry.setTag('code-language', isSwift ? 'swift' : 'objc');\n  Sentry.setTag(\n    'ui-engine',\n    swiftUIRegex.test(fileContent) ? 'swiftui' : 'uikit',\n  );\n\n  if (fileContent.includes(checkForSentryInit)) {\n    //already initialized\n    clack.log.info(\n      'Sentry is already initialized in your AppDelegate. Skipping adding the code snippet.',\n    );\n    return true;\n  }\n\n  let match = appLaunchRegex.exec(fileContent);\n  if (!match) {\n    const swiftUIMatch = swiftUIRegex.exec(fileContent);\n    if (!swiftUIMatch) {\n      // This branch is not reached, because we already checked for SwiftUI in isAppDelegateFile\n      return false;\n    }\n    //Is SwiftUI with no init\n    match = swiftUIMatch;\n    codeSnippet = `    init() {\\n${codeSnippet}    }`;\n  }\n\n  const insertIndex = match.index + match[0].length;\n  let newFileContent =\n    fileContent.slice(0, insertIndex) +\n    '\\n' +\n    codeSnippet +\n    fileContent.slice(insertIndex);\n\n  if (newFileContent.indexOf(importStatement) < 0) {\n    const firstImport = /^[ \\t]*import +\\w+.*$/m.exec(newFileContent);\n    if (firstImport) {\n      const importIndex = firstImport.index + firstImport[0].length;\n      newFileContent =\n        newFileContent.slice(0, importIndex) +\n        '\\n' +\n        importStatement +\n        newFileContent.slice(importIndex);\n    } else {\n      newFileContent = importStatement + newFileContent;\n    }\n  }\n\n  fs.writeFileSync(appDelegate, newFileContent, 'utf8');\n\n  clack.log.step('Added Sentry initialization code snippet to ' + appDelegate);\n  return true;\n}\n\n/**\n * Exported for testing purposes, but should not be used in other modules.\n */\nexport let exportForTesting: {\n  isAppDelegateFile: typeof isAppDelegateFile;\n  findAppDidFinishLaunchingWithOptions: typeof findAppDidFinishLaunchingWithOptions;\n};\nif (process.env.NODE_ENV === 'test') {\n  exportForTesting = {\n    isAppDelegateFile,\n    findAppDidFinishLaunchingWithOptions,\n  };\n}\n"]}