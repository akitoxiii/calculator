{"version":3,"file":"root-v2.js","sourceRoot":"","sources":["../../../../src/remix/codemods/root-v2.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n\nimport * as recast from 'recast';\nimport * as path from 'path';\n\nimport type { ExportNamedDeclaration, Program } from '@babel/types';\n\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { loadFile, writeFile } from 'magicast';\n\nimport { ERROR_BOUNDARY_TEMPLATE_V2 } from '../templates';\nimport { hasSentryContent } from '../utils';\nimport { wrapAppWithSentry } from './root-common';\n\nexport async function instrumentRootRouteV2(\n  rootFileName: string,\n): Promise<void> {\n  const rootRouteAst = await loadFile(\n    path.join(process.cwd(), 'app', rootFileName),\n  );\n\n  const exportsAst = rootRouteAst.exports.$ast as Program;\n\n  const namedExports = exportsAst.body.filter(\n    (node) => node.type === 'ExportNamedDeclaration',\n  ) as ExportNamedDeclaration[];\n\n  let foundErrorBoundary = false;\n\n  namedExports.forEach((namedExport) => {\n    const declaration = namedExport.declaration;\n\n    if (!declaration) {\n      return;\n    }\n\n    if (declaration.type === 'FunctionDeclaration') {\n      if (declaration.id?.name === 'ErrorBoundary') {\n        foundErrorBoundary = true;\n      }\n    } else if (declaration.type === 'VariableDeclaration') {\n      const declarations = declaration.declarations;\n\n      declarations.forEach((declaration) => {\n        // @ts-expect-error - id should always have a name in this case\n        if (declaration.id?.name === 'ErrorBoundary') {\n          foundErrorBoundary = true;\n        }\n      });\n    }\n  });\n\n  if (!foundErrorBoundary) {\n    rootRouteAst.imports.$add({\n      from: '@sentry/remix',\n      imported: 'captureRemixErrorBoundaryError',\n      local: 'captureRemixErrorBoundaryError',\n    });\n\n    rootRouteAst.imports.$add({\n      from: '@remix-run/react',\n      imported: 'useRouteError',\n      local: 'useRouteError',\n    });\n\n    recast.visit(rootRouteAst.$ast, {\n      visitExportDefaultDeclaration(path) {\n        const implementation = recast.parse(ERROR_BOUNDARY_TEMPLATE_V2).program\n          .body[0];\n\n        path.insertBefore(\n          recast.types.builders.exportDeclaration(false, implementation),\n        );\n\n        this.traverse(path);\n      },\n    });\n    // If there is already a ErrorBoundary export, and it doesn't have Sentry content\n  } else if (!hasSentryContent(rootFileName, rootRouteAst.$code)) {\n    rootRouteAst.imports.$add({\n      from: '@sentry/remix',\n      imported: 'captureRemixErrorBoundaryError',\n      local: 'captureRemixErrorBoundaryError',\n    });\n\n    wrapAppWithSentry(rootRouteAst, rootFileName);\n\n    recast.visit(rootRouteAst.$ast, {\n      visitExportNamedDeclaration(path) {\n        // Find ErrorBoundary export\n        if (path.value.declaration?.id?.name === 'ErrorBoundary') {\n          const errorBoundaryExport = path.value.declaration;\n\n          let errorIdentifier;\n\n          // check if useRouteError is called\n          recast.visit(errorBoundaryExport, {\n            visitVariableDeclaration(path) {\n              const variableDeclaration = path.value.declarations[0];\n              const initializer = variableDeclaration.init;\n\n              if (\n                initializer.type === 'CallExpression' &&\n                initializer.callee.name === 'useRouteError'\n              ) {\n                errorIdentifier = variableDeclaration.id.name;\n              }\n\n              this.traverse(path);\n            },\n          });\n\n          // We don't have an errorIdentifier, which means useRouteError is not called / imported\n          // We need to add it and capture the error\n          if (!errorIdentifier) {\n            rootRouteAst.imports.$add({\n              from: '@remix-run/react',\n              imported: 'useRouteError',\n              local: 'useRouteError',\n            });\n\n            const useRouteErrorCall = recast.parse(\n              `const error = useRouteError();`,\n            ).program.body[0];\n\n            // Insert at the top of ErrorBoundary body\n            errorBoundaryExport.body.body.splice(0, 0, useRouteErrorCall);\n          }\n\n          const captureErrorCall = recast.parse(\n            `captureRemixErrorBoundaryError(error);`,\n          ).program.body[0];\n\n          // Insert just before the the fallback page is returned\n          errorBoundaryExport.body.body.splice(\n            errorBoundaryExport.body.body.length - 1,\n            0,\n            captureErrorCall,\n          );\n        }\n        this.traverse(path);\n      },\n    });\n  }\n\n  await writeFile(\n    rootRouteAst.$ast,\n    path.join(process.cwd(), 'app', rootFileName),\n  );\n}\n"]}