{"version":3,"file":"angular-19.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/angular-19.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Integration } from '../../lib/Constants';\nimport {\n  checkFileContents,\n  checkFileDoesNotContain,\n  checkFileExists,\n  checkIfBuilds,\n  checkIfRunsOnDevMode,\n  checkIfRunsOnProdMode,\n  checkPackageJson,\n  cleanupGit,\n  KEYS,\n  modifyFile,\n  revertLocalChanges,\n  startWizardInstance,\n} from '../utils';\nimport * as path from 'path';\nimport { TEST_ARGS } from '../utils';\nimport { test, expect, describe, beforeAll, afterAll } from 'vitest';\n\nasync function runWizardOnAngularProject(\n  projectDir: string,\n  integration: Integration,\n  fileModificationFn?: (projectDir: string) => unknown,\n) {\n  const wizardInstance = startWizardInstance(integration, projectDir);\n\n  if (fileModificationFn) {\n    fileModificationFn(projectDir);\n\n    await wizardInstance.waitForOutput('Do you want to continue anyway?');\n\n    await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Please select your package manager.',\n    );\n  } else {\n    await wizardInstance.waitForOutput('Please select your package manager.');\n  }\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    // Selecting `yarn` as the package manager\n    [KEYS.DOWN, KEYS.ENTER],\n    // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n    'to track the performance of your application?',\n    {\n      timeout: 240_000,\n      optional: true,\n    },\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER],\n    // \"Do you want to enable Sentry Session Replay\", sometimes doesn't work as `Sentry Session Replay` can be printed in bold.\n    'to get a video-like reproduction of errors during a user session?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    // The first choice here is Angular\n    [KEYS.ENTER],\n    'Where are your build artifacts located?',\n    {\n      optional: true,\n      timeout: 5000,\n    },\n  );\n\n  const sourcemapsConfiguredPromise = wizardInstance.waitForOutput(\n    'Added a sentry:sourcemaps script to your package.json',\n  );\n\n  const buildScriptPromptedPromise = wizardInstance.waitForOutput(\n    'Do you want to automatically run the sentry:sourcemaps script after each production build?',\n  );\n\n  const optionalArtifactsNotFoundPromise = wizardInstance.waitForOutput(\n    \"We couldn't find artifacts\",\n    {\n      optional: true,\n      timeout: 5000,\n    },\n  );\n\n  // ./dist is the default value, no need to change it\n  wizardInstance.sendStdin(KEYS.ENTER);\n\n  const optionalArtifactsNotFoundPrompted =\n    await optionalArtifactsNotFoundPromise;\n\n  if (optionalArtifactsNotFoundPrompted) {\n    wizardInstance.sendStdin(KEYS.DOWN);\n    wizardInstance.sendStdin(KEYS.ENTER);\n  }\n\n  await sourcemapsConfiguredPromise;\n  await buildScriptPromptedPromise;\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER], // yes, automatically add sentry:sourcemaps script\n    'Is yarn build your production build command?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER], // yes, yarn build is the production build command\n    'Are you using a CI/CD tool to build and deploy your application?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.DOWN, KEYS.ENTER], // no CI/CD tool\n    'Do you want to create an example component to test your Sentry setup?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER], // yes, create example component\n    'Did you apply the snippet above?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER], // yes, applied the snippet\n    'Looks like you have Prettier in your project. Do you want to run it on your files?',\n  );\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER], // yes, run prettier\n    'Successfully installed the Sentry Angular SDK!',\n  );\n\n  wizardInstance.kill();\n}\n\nfunction checkAngularProject(\n  projectDir: string,\n  integration: Integration,\n  options?: {\n    preExistingErrorHandler?: boolean;\n  },\n) {\n  test('package.json is updated correctly', () => {\n    checkPackageJson(projectDir, integration);\n\n    const packageJsonFile = path.resolve(projectDir, 'package.json');\n    checkFileContents(packageJsonFile, [\n      `\"sentry:sourcemaps\": \"sentry-cli sourcemaps inject --org ${TEST_ARGS.ORG_SLUG} --project ${TEST_ARGS.PROJECT_SLUG} ./dist && sentry-cli sourcemaps upload --org ${TEST_ARGS.ORG_SLUG} --project ${TEST_ARGS.PROJECT_SLUG} ./dist\"`,\n      `\"build\": \"ng build && yarn sentry:sourcemaps\"`,\n    ]);\n  });\n\n  test('Sentry is correctly injected into Angular app config', () => {\n    const appConfigFile = path.resolve(projectDir, 'src/main.ts');\n    checkFileExists(appConfigFile);\n\n    checkFileContents(appConfigFile, [\n      `import * as Sentry from '@sentry/angular'`,\n      'Sentry.init({',\n      TEST_ARGS.PROJECT_DSN,\n      'Sentry.browserTracingIntegration()',\n      'Sentry.replayIntegration()',\n      'tracesSampleRate: 1',\n      'replaysSessionSampleRate: 0.1',\n      'replaysOnErrorSampleRate: 1',\n    ]);\n  });\n\n  test('Sentry is correctly injected into Angular app module', () => {\n    const appModuleFile = path.resolve(projectDir, 'src/app/app.config.ts');\n    checkFileExists(appModuleFile);\n\n    // Checking if the ErrorHandler is already present in the providers array,\n    // and if it is, we skip adding it\n    if (options?.preExistingErrorHandler) {\n      checkFileDoesNotContain(appModuleFile, 'Sentry.createErrorHandler()');\n    }\n\n    checkFileContents(appModuleFile, [\n      `import * as Sentry from '@sentry/angular'`,\n      options?.preExistingErrorHandler\n        ? `provide: ErrorHandler,\n      useValue: null`\n        : `provide: ErrorHandler,\n      useValue: Sentry.createErrorHandler()`,\n      `provide: Sentry.TraceService,\n      deps: [Router]`,\n      `provideAppInitializer(() => {\n      inject(Sentry.TraceService);\n    })`,\n    ]);\n  });\n\n  test('angular.json is updated correctly', async () => {\n    const angularJsonFile = path.resolve(projectDir, 'angular.json');\n    checkFileExists(angularJsonFile);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const angularJson = (await import(angularJsonFile)) as Record<string, any>;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    for (const [, project] of Object.entries(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      angularJson.projects as Record<string, any>,\n    )) {\n      expect(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        project?.architect?.build?.configurations?.production?.sourceMap,\n      ).toBe(true);\n    }\n  });\n\n  test('builds successfully', async () => {\n    await checkIfBuilds(projectDir);\n  });\n\n  test('runs on prod mode correctly', async () => {\n    await checkIfRunsOnProdMode(\n      projectDir,\n      'Application bundle generation complete.',\n    );\n  });\n\n  test('runs on dev mode correctly', async () => {\n    await checkIfRunsOnDevMode(\n      projectDir,\n      'Application bundle generation complete.',\n    );\n  });\n}\n\ndescribe('Angular-19', () => {\n  describe('with empty project', () => {\n    const integration = Integration.angular;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/angular-19-test-app',\n    );\n\n    beforeAll(async () => {\n      revertLocalChanges(projectDir);\n      await runWizardOnAngularProject(projectDir, integration);\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkAngularProject(projectDir, integration);\n  });\n  describe('with pre-defined ErrorHandler', () => {\n    const integration = Integration.angular;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/angular-19-test-app',\n    );\n\n    beforeAll(async () => {\n      revertLocalChanges(projectDir);\n      await runWizardOnAngularProject(projectDir, integration, (projectDir) => {\n        modifyFile(`${projectDir}/src/app/app.config.ts`, {\n          'providers: [': `providers: [{\n            provide: ErrorHandler,\n            useValue: null\n            },\n            `,\n        });\n      });\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkAngularProject(projectDir, integration, {\n      preExistingErrorHandler: true,\n    });\n  });\n});\n"]}