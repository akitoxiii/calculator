{"version":3,"file":"metro.test.js","sourceRoot":"","sources":["../../../test/react-native/metro.test.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { generateCode, type ProxifiedModule, parseModule } from 'magicast';\n\nimport * as recast from 'recast';\nimport x = recast.types;\nimport t = x.namedTypes;\n\nimport {\n  addSentrySerializerRequireToMetroConfig,\n  addSentrySerializerToMetroConfig,\n  getMetroConfigObject,\n  patchMetroWithSentryConfigInMemory,\n  removeSentryRequire,\n  removeSentrySerializerFromMetroConfig,\n} from '../../src/react-native/metro';\nimport { describe, expect, it } from 'vitest';\n\ndescribe('patch metro config - sentry serializer', () => {\n  describe('patchMetroWithSentryConfigInMemory', () => {\n    it('patches react native 0.72 default metro config', async () => {\n      const mod =\n        parseModule(`const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('metro-config').MetroConfig}\n */\nconst config = {};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);`);\n\n      const result = await patchMetroWithSentryConfigInMemory(mod, async () => {\n        /* noop */\n      });\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code)\n        .toBe(`const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\nconst {\n withSentryConfig\n} = require(\"@sentry/react-native/metro\");\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('metro-config').MetroConfig}\n */\nconst config = {};\n\nmodule.exports = withSentryConfig(mergeConfig(getDefaultConfig(__dirname), config));`);\n    });\n\n    it('patches react native 0.65 default metro config', async () => {\n      const mod = parseModule(`/**\n* Metro configuration for React Native\n* https://github.com/facebook/react-native\n*\n* @format\n*/\n\nmodule.exports = {\n  transformer: {\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n};`);\n\n      const result = await patchMetroWithSentryConfigInMemory(mod, async () => {\n        /* noop */\n      });\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`const {\n  withSentryConfig\n} = require(\"@sentry/react-native/metro\");\n\n/**\n* Metro configuration for React Native\n* https://github.com/facebook/react-native\n*\n* @format\n*/\n\nmodule.exports = withSentryConfig({\n  transformer: {\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n});`);\n    });\n\n    it('patches react native metro config exported variable', async () => {\n      const mod = parseModule(`const testConfig = {};\n\nmodule.exports = testConfig;`);\n\n      const result = await patchMetroWithSentryConfigInMemory(mod, async () => {\n        /* noop */\n      });\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`const {\n  withSentryConfig\n} = require(\"@sentry/react-native/metro\");\n\nconst testConfig = {};\n\nmodule.exports = withSentryConfig(testConfig);`);\n    });\n\n    it('patches custom react native metro config', async () => {\n      const mod =\n        parseModule(`const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\nconst defaultConfig = getDefaultConfig(__dirname);\nconst {assetExts, sourceExts} = defaultConfig.resolver;\n/**\n * Metro configuration\n * https://facebook.github.io/metro/docs/configuration\n *\n * @type {import('metro-config').MetroConfig}\n */\n\nconst jsoMetroPlugin = require('obfuscator-io-metro-plugin')(\n  {\n    // for these option look javascript-obfuscator library options from  above url\n    compact: false,\n    sourceMap: false,\n    controlFlowFlattening: true,\n    controlFlowFlatteningThreshold: 1,\n    numbersToExpressions: true,\n    simplify: true,\n    stringArrayShuffle: true,\n    splitStrings: true,\n    stringArrayThreshold: 1,\n  },\n  {\n    runInDev: false /* optional */,\n    logObfuscatedFiles: true /* optional generated files will be located at ./.jso */,\n    // source Map generated after obfuscation is not useful right now\n    sourceMapLocation:\n      './index.android.bundle.map' /* optional  only works if sourceMap: true in obfuscation option */,\n  },\n);\n\nconst config = {\n  transformer: {\n    babelTransformerPath: require.resolve('react-native-svg-transformer'),\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n  resolver: {\n    assetExts: assetExts.filter(ext => ext !== 'svg'),\n    sourceExts: [...sourceExts, 'svg'],\n  },\n  ...jsoMetroPlugin,\n};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);`);\n\n      const result = await patchMetroWithSentryConfigInMemory(mod, async () => {\n        /* noop */\n      });\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code)\n        .toBe(`const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\nconst {\n  withSentryConfig\n} = require(\"@sentry/react-native/metro\");\n\nconst defaultConfig = getDefaultConfig(__dirname);\nconst {assetExts, sourceExts} = defaultConfig.resolver;\n/**\n * Metro configuration\n * https://facebook.github.io/metro/docs/configuration\n *\n * @type {import('metro-config').MetroConfig}\n */\n\nconst jsoMetroPlugin = require('obfuscator-io-metro-plugin')(\n  {\n    // for these option look javascript-obfuscator library options from  above url\n    compact: false,\n    sourceMap: false,\n    controlFlowFlattening: true,\n    controlFlowFlatteningThreshold: 1,\n    numbersToExpressions: true,\n    simplify: true,\n    stringArrayShuffle: true,\n    splitStrings: true,\n    stringArrayThreshold: 1,\n  },\n  {\n    runInDev: false /* optional */,\n    logObfuscatedFiles: true /* optional generated files will be located at ./.jso */,\n    // source Map generated after obfuscation is not useful right now\n    sourceMapLocation:\n      './index.android.bundle.map' /* optional  only works if sourceMap: true in obfuscation option */,\n  },\n);\n\nconst config = {\n  transformer: {\n    babelTransformerPath: require.resolve('react-native-svg-transformer'),\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n  resolver: {\n    assetExts: assetExts.filter(ext => ext !== 'svg'),\n    sourceExts: [...sourceExts, 'svg'],\n  },\n  ...jsoMetroPlugin,\n};\n\nmodule.exports = withSentryConfig(mergeConfig(getDefaultConfig(__dirname), config));`);\n    });\n\n    it('does not patch react native metro config exported as factory function', async () => {\n      const mod = parseModule(`module.exports = () => ({});`);\n\n      const result = await patchMetroWithSentryConfigInMemory(mod, async () => {\n        /* noop */\n      });\n      expect(result).toBe(false);\n      expect(generateCode(mod.$ast).code).toBe(`module.exports = () => ({});`);\n    });\n  });\n\n  describe('addSentrySerializerToMetroConfig', () => {\n    it('add to empty config', () => {\n      const mod = parseModule(`module.exports = {\n        other: 'config'\n      }`);\n      const configObject = getModuleExportsObject(mod);\n      const result = addSentrySerializerToMetroConfig(configObject);\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`module.exports = {\n  other: 'config',\n\n  serializer: {\n    customSerializer: createSentryMetroSerializer()\n  }\n}`);\n    });\n\n    it('add to existing serializer config', () => {\n      const mod = parseModule(`module.exports = {\n  other: 'config',\n  serializer: {\n    other: 'config'\n  }\n}`);\n      const configObject = getModuleExportsObject(mod);\n      const result = addSentrySerializerToMetroConfig(configObject);\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`module.exports = {\n  other: 'config',\n  serializer: {\n    other: 'config',\n    customSerializer: createSentryMetroSerializer()\n  }\n}`);\n    });\n\n    it('not add to existing customSerializer config', () => {\n      const mod = parseModule(`module.exports = {\n  other: 'config',\n  serializer: {\n    other: 'config',\n    customSerializer: 'existing-serializer'\n  }\n}`);\n      const configObject = getModuleExportsObject(mod);\n      const result = addSentrySerializerToMetroConfig(configObject);\n      expect(result).toBe(false);\n      expect(generateCode(mod.$ast).code).toBe(`module.exports = {\n  other: 'config',\n  serializer: {\n    other: 'config',\n    customSerializer: 'existing-serializer'\n  }\n}`);\n    });\n  });\n\n  describe('addSentrySerializerImportToMetroConfig', () => {\n    it('add import', () => {\n      const mod =\n        parseModule(`const { getDefaultConfig, mergeConfig } = require('@react-native/metro-config');\n\nmodule.exports = {\n  other: 'config'\n}`);\n      const result = addSentrySerializerRequireToMetroConfig(\n        mod.$ast as t.Program,\n      );\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code)\n        .toBe(`const { getDefaultConfig, mergeConfig } = require('@react-native/metro-config');\n\nconst {\n  createSentryMetroSerializer\n} = require(\"@sentry/react-native/dist/js/tools/sentryMetroSerializer\");\n\nmodule.exports = {\n  other: 'config'\n}`);\n    });\n  });\n\n  describe('getMetroConfigObject', () => {\n    it('get config object from variable called config', () => {\n      const mod = parseModule(`var config = { some: 'config' };`);\n      const configObject = getMetroConfigObject(mod.$ast as t.Program);\n      expect(\n        ((configObject?.properties[0] as t.ObjectProperty).key as t.Identifier)\n          .name,\n      ).toBe('some');\n      expect(\n        (\n          (configObject?.properties[0] as t.ObjectProperty)\n            .value as t.StringLiteral\n        ).value,\n      ).toBe('config');\n    });\n\n    it('get config object from const called config', () => {\n      const mod = parseModule(`const config = { some: 'config' };`);\n      const configObject = getMetroConfigObject(mod.$ast as t.Program);\n      expect(\n        ((configObject?.properties[0] as t.ObjectProperty).key as t.Identifier)\n          .name,\n      ).toBe('some');\n      expect(\n        (\n          (configObject?.properties[0] as t.ObjectProperty)\n            .value as t.StringLiteral\n        ).value,\n      ).toBe('config');\n    });\n\n    it('get config oject from let called config', () => {\n      const mod = parseModule(`let config = { some: 'config' };`);\n      const configObject = getMetroConfigObject(mod.$ast as t.Program);\n      expect(\n        ((configObject?.properties[0] as t.ObjectProperty).key as t.Identifier)\n          .name,\n      ).toBe('some');\n      expect(\n        (\n          (configObject?.properties[0] as t.ObjectProperty)\n            .value as t.StringLiteral\n        ).value,\n      ).toBe('config');\n    });\n\n    it('get config object from module.exports', () => {\n      const mod = parseModule(`module.exports = { some: 'config' };`);\n      const configObject = getMetroConfigObject(mod.$ast as t.Program);\n      expect(\n        ((configObject?.properties[0] as t.ObjectProperty).key as t.Identifier)\n          .name,\n      ).toBe('some');\n      expect(\n        (\n          (configObject?.properties[0] as t.ObjectProperty)\n            .value as t.StringLiteral\n        ).value,\n      ).toBe('config');\n    });\n  });\n\n  describe('remove @sentry require', () => {\n    it('nothing to remove', () => {\n      const mod = parseModule(`let config = { some: 'config' };`);\n      const result = removeSentryRequire(mod.$ast as t.Program);\n      expect(result).toBe(false);\n      expect(generateCode(mod.$ast).code).toBe(\n        `let config = { some: 'config' };`,\n      );\n    });\n\n    it('remove metro serializer import', () => {\n      const mod = parseModule(`const {\n  createSentryMetroSerializer,\n} = require('@sentry/react-native/dist/js/tools/sentryMetroSerializer');\nlet config = { some: 'config' };`);\n      const result = removeSentryRequire(mod.$ast as t.Program);\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(\n        `let config = { some: 'config' };`,\n      );\n    });\n\n    it('remove all sentry imports', () => {\n      const mod = parseModule(`const {\n  createSentryMetroSerializer,\n} = require('@sentry/react-native/dist/js/tools/sentryMetroSerializer');\nvar Sentry = require('@sentry/react-native');\nlet SentryIntegrations = require('@sentry/integrations');\n\nlet config = { some: 'config' };`);\n      const result = removeSentryRequire(mod.$ast as t.Program);\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(\n        `let config = { some: 'config' };`,\n      );\n    });\n  });\n\n  describe('remove sentryMetroSerializer', () => {\n    it('no custom serializer to remove', () => {\n      const mod = parseModule(`let config = { some: 'config' };`);\n      const result = removeSentrySerializerFromMetroConfig(\n        mod.$ast as t.Program,\n      );\n      expect(result).toBe(false);\n      expect(generateCode(mod.$ast).code).toBe(\n        `let config = { some: 'config' };`,\n      );\n    });\n\n    it('no Sentry custom serializer to remove', () => {\n      const mod = parseModule(`let config = {\n  serializer: {\n    customSerializer: 'existing-serializer',\n    other: 'config',\n  },\n  other: 'config',\n};`);\n      const result = removeSentrySerializerFromMetroConfig(\n        mod.$ast as t.Program,\n      );\n      expect(result).toBe(false);\n      expect(generateCode(mod.$ast).code).toBe(`let config = {\n  serializer: {\n    customSerializer: 'existing-serializer',\n    other: 'config',\n  },\n  other: 'config',\n};`);\n    });\n\n    it('Sentry serializer to remove', () => {\n      const mod = parseModule(`let config = {\n  serializer: {\n    customSerializer: createSentryMetroSerializer(),\n    other: 'config',\n  },\n  other: 'config',\n};`);\n      const result = removeSentrySerializerFromMetroConfig(\n        mod.$ast as t.Program,\n      );\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`let config = {\n  serializer: {\n    other: 'config'\n  },\n  other: 'config',\n};`);\n    });\n\n    it('Sentry serializer to remove with wrapped serializer', () => {\n      const mod = parseModule(`let config = {\n  serializer: {\n    customSerializer: createSentryMetroSerializer(wrappedSerializer()),\n    other: 'config',\n  },\n  other: 'config',\n};`);\n      const result = removeSentrySerializerFromMetroConfig(\n        mod.$ast as t.Program,\n      );\n      expect(result).toBe(true);\n      expect(generateCode(mod.$ast).code).toBe(`let config = {\n  serializer: {\n    customSerializer: wrappedSerializer(),\n    other: 'config',\n  },\n  other: 'config',\n};`);\n    });\n  });\n});\n\nfunction getModuleExportsObject(\n  mod: ProxifiedModule,\n  index = 0,\n): t.ObjectExpression {\n  return (\n    ((mod.$ast as t.Program).body[index] as t.ExpressionStatement)\n      .expression as t.AssignmentExpression\n  ).right as t.ObjectExpression;\n}\n"]}