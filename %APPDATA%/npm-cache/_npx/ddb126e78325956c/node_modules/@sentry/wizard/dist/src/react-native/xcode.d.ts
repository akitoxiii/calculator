import { Project } from 'xcode';
type BuildPhase = {
    shellScript: string;
};
type BuildPhaseMap = Record<string, BuildPhase>;
export declare function getValidExistingBuildPhases(xcodeProject: any): BuildPhaseMap;
export declare class ErrorPatchSnippet {
    snippet: string;
    constructor(snippet: string);
}
export declare function patchBundlePhase(bundlePhase: BuildPhase | undefined, patch: (script: string) => string | ErrorPatchSnippet): Promise<void>;
export declare function unPatchBundlePhase(bundlePhase: BuildPhase | undefined): void;
export declare function removeSentryFromBundleShellScript(script: string): string;
export declare function findBundlePhase(buildPhases: BuildPhaseMap): BuildPhase | undefined;
export declare function doesBundlePhaseIncludeSentry(buildPhase: BuildPhase): boolean;
export declare function addSentryWithBundledScriptsToBundleShellScript(script: string): string | ErrorPatchSnippet;
export declare function addSentryWithCliToBundleShellScript(script: string): string | ErrorPatchSnippet;
export declare function addDebugFilesUploadPhaseWithBundledScripts(xcodeProject: any, { debugFilesUploadPhaseExists }: {
    debugFilesUploadPhaseExists: boolean;
}): void;
export declare function addDebugFilesUploadPhaseWithCli(xcodeProject: any, { debugFilesUploadPhaseExists }: {
    debugFilesUploadPhaseExists: boolean;
}): void;
export declare function unPatchDebugFilesUploadPhase(xcodeProject: any): void;
export declare function findDebugFilesUploadPhase(buildPhasesMap: Record<string, BuildPhase>): [key: string, buildPhase: BuildPhase] | undefined;
export declare function writeXcodeProject(xcodeProjectPath: string, xcodeProject: Project): void;
export {};
