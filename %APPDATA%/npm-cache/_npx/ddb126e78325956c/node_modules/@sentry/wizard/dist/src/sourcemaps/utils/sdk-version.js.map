{"version":3,"file":"sdk-version.js","sourceRoot":"","sources":["../../../../src/sourcemaps/utils/sdk-version.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+EAA+E;AAC/E,6DAAmC;AACnC,kDAA0B;AAC1B,mCAA+C;AAC/C,6CAI2B;AAE3B,qDAAuC;AACvC,2DAAwE;AAExE,MAAM,4BAA4B,GAAG,QAAQ,CAAC;AAE9C,+DAA+D;AAC/D,qEAAqE;AACrE,0EAA0E;AAC1E,qDAAqD;AACrD,MAAM,wBAAwB,GAAG;IAC/B,2DAA2D;IAC3D,eAAe;IACf,gBAAgB;IAChB,gBAAgB;IAChB,cAAc;IACd,eAAe;IACf,oBAAoB;IACpB,mBAAmB;IAEnB,iBAAiB;IACjB,iBAAiB;IACjB,qBAAqB;IACrB,wBAAwB;IACxB,aAAa;IACb,eAAe;IACf,iCAAiC;IACjC,gBAAgB;IAChB,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,oBAAoB;IAEpB,YAAY;IACZ,iBAAiB;IACjB,cAAc;IACd,cAAc;CACf,CAAC;AAEF;;;;;;;;;;;;GAYG;AACI,KAAK,UAAU,kCAAkC;IACtD,MAAM,mBAAmB,GAAG,IAAA,2CAA4B,EACtD,wBAAwB,EACxB,MAAM,IAAA,yBAAiB,GAAE,CAC1B,CAAC;IAEF,UAAU;IACV,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAO,MAAM,oBAAoB,EAAE,CAAC;KACrC;IAED,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,OAAO,EAAE,0BAA0B,EAAE,GACnE,mBAAmB,CAAC;IAEtB,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAEjD,MAAM,mBAAmB,GAAG,sBAAsB,CAChD,0BAA0B,EAC1B,gBAAgB,CACjB,CAAC;IAEF,IAAI,CAAC,mBAAmB,EAAE;QACxB,yDAAyD;QACzD,OAAO;KACR;IAED,MAAM,8BAA8B,GAAG,IAAA,kBAAS,EAC9C,mBAAmB,EACnB,KAAK,4BAA4B,EAAE,CACpC,CAAC;IAEF,UAAU;IACV,IAAI,8BAA8B,EAAE;QAClC,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;QACjD,OAAO;KACR;IAED,MAAM,eAAe,GAAG,IAAA,kBAAS,EAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;IAElE,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,GAAG,eAAK,CAAC,YAAY,CACnB,mDAAmD,0BAA0B,YAAY,eAAK,CAAC,IAAI,CACjG,gBAAgB,CACjB,OAAO,CACT;4DACuD,eAAK,CAAC,IAAI,CAChE,4BAA4B,CAC7B;CACJ,CACE,CAAC;IAEF,UAAU;IACV,IAAI,eAAe,EAAE;QACnB,MAAM,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAC5C,OAAO;KACR;IAED,UAAU;IACV,MAAM,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;AACrD,CAAC;AA3DD,gFA2DC;AAED,KAAK,UAAU,uBAAuB,CAAC,mBAA2B;IAChE,MAAM,CAAC,MAAM,CACX,qBAAqB,EACrB,GAAG,IAAA,kBAAS,EAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAClE,CAAC;IAEF,iBAAK,CAAC,GAAG;SACN,IAAI,CAAC;;CAET,CAAC,CAAC;IAED,MAAM,SAAS,GAAG,MAAM,IAAA,wBAAgB,EACtC,iBAAK,CAAC,MAAM,CAAC;QACX,OAAO,EAAE,gDAAgD;QACzD,OAAO,EAAE;YACP;gBACE,KAAK,EAAE,MAAM;gBACb,KAAK,EAAE,IAAI;aACZ;YACD;gBACE,KAAK,EAAE,yBAAyB;gBAChC,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,eAAK,CAAC,MAAM,CAChB,2CAA2C,4BAA4B,GAAG,CAC3E;aACF;SACF;QACD,YAAY,EAAE,IAAI;KACnB,CAAC,CACH,CAAC;IAEF,MAAM,CAAC,MAAM,CACX,qBAAqB,EACrB,SAAS,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,cAAc,CAChD,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,WAAmB;IACpD,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;IAExD,MAAM,YAAY,GAAG,MAAM,IAAA,wBAAgB,EACzC,iBAAK,CAAC,MAAM,CAAC;QACX,OAAO,EACL,qEAAqE;QACvE,OAAO,EAAE;YACP;gBACE,KAAK,EAAE,MAAM;gBACb,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,eAAK,CAAC,KAAK,CAAC,aAAa,CAAC;aACjC;YACD;gBACE,KAAK,EAAE,yBAAyB;gBAChC,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,eAAK,CAAC,MAAM,CAChB,2CAA2C,4BAA4B,GAAG,CAC3E;aACF;SACF;QACD,YAAY,EAAE,IAAI;KACnB,CAAC,CACH,CAAC;IAEF,IAAI,YAAY,EAAE;QAChB,MAAM,IAAA,sBAAc,EAAC;YACnB,WAAW;YACX,gBAAgB,EAAE,IAAI;YACtB,iBAAiB,EAAE,KAAK,EAAE,4BAA4B;SACvD,CAAC,CAAC;KACJ;IAED,MAAM,CAAC,MAAM,CACX,qBAAqB,EACrB,YAAY,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,cAAc,CACxD,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,oBAAoB;IACjC,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IAC7C,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IAEvC,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,GAAG,eAAK,CAAC,YAAY,CACnB,oEAAoE,CACrE;;;EAGH,eAAK,CAAC,GAAG,CAAC;wBACY,CAAC,EAAE,CACxB,CAAC;IAEF,MAAM,YAAY,GAAG,MAAM,IAAA,wBAAgB,EACzC,iBAAK,CAAC,MAAM,CAAC;QACX,OAAO,EAAE,iCAAiC;QAC1C,OAAO,EAAE;YACP,EAAE,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;YACxC;gBACE,KAAK,EAAE,qBAAqB;gBAC5B,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,eAAK,CAAC,MAAM,CAChB,qDAAqD,CACtD;aACF;SACF;QACD,YAAY,EAAE,IAAI;KACnB,CAAC,CACH,CAAC;IAEF,MAAM,CAAC,MAAM,CACX,qBAAqB,EACrB,YAAY,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,eAAe,CACtD,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAC7B,0BAAkC,EAClC,gBAAwB;IAExB,IAAI;QACF,wEAAwE;QACxE,2EAA2E;QAC3E,iEAAiE;QACjE,MAAM,mBAAmB,GAAG,IAAA,mBAAU,EAAC,0BAA0B,CAAC,EAAE,OAAO,CAAC;QAC5E,IAAI,mBAAmB,EAAE;YACvB,OAAO,mBAAmB,CAAC;SAC5B;KACF;IAAC,MAAM;QACN,kDAAkD;KACnD;IAED,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,SAAS,CAAC,CAAC;IAChD,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,GAAG,eAAK,CAAC,MAAM,CACb,uDAAuD,gBAAgB,OAAO,0BAA0B,IAAI,CAC7G;;8DAEyD,eAAK,CAAC,IAAI,CAClE,4BAA4B,CAC7B;KACA,CACF,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport { minVersion, satisfies } from 'semver';\nimport {\n  abortIfCancelled,\n  getPackageDotJson,\n  installPackage,\n} from '../../utils/clack';\n\nimport * as Sentry from '@sentry/node';\nimport { findInstalledPackageFromList } from '../../utils/package-json';\n\nconst MINIMUM_DEBUG_ID_SDK_VERSION = '7.47.0';\n\n// This array is orderd by the SDKs we want to check for first.\n// The reason is that some SDKs depend on others and some users might\n// have added the dependencies to their package.json. We want to make sure\n// that we actually detect the \"top-level\" SDK first.\nconst SENTRY_SDK_PACKAGE_NAMES = [\n  // SDKs using other framework SDKs need to be checked first\n  '@sentry/astro',\n  '@sentry/gatsby',\n  '@sentry/nextjs',\n  '@sentry/nuxt',\n  '@sentry/remix',\n  '@sentry/solidstart',\n  '@sentry/sveltekit',\n\n  // Framework SDKs\n  '@sentry/angular',\n  '@sentry/angular-ivy',\n  '@sentry/aws-serverless',\n  '@sentry/bun',\n  '@sentry/ember',\n  '@sentry/google-cloud-serverless',\n  '@sentry/nestjs',\n  '@sentry/react',\n  '@sentry/solid',\n  '@sentry/svelte',\n  '@sentry/vue',\n  '@sentry/serverless',\n\n  // Base SDKs\n  '@sentry/browser',\n  '@sentry/node',\n  '@sentry/deno',\n];\n\n/**\n * Check for a minimum SDK version and prompt the user to upgrade if necessary.\n * We distinguish between 4 cases here:\n *\n * 1. Users didn't install any SDK yet\n *    -> We tell them to install an SDK and then continue with the wizard\n * 2. Users installed an SDK in the range >=7.47.0\n *    -> All good, no need to do anything!\n * 3. Users installed an SDK in the range >=7.0.0 <= 7.46.0\n *    -> We ask if they want to auto-update to the latest version\n * 4. Users installed an SDK in the range <7.x\n *    -> We tell users to manually upgrade (migrate between majors)\n */\nexport async function ensureMinimumSdkVersionIsInstalled(): Promise<void> {\n  const installedSdkPackage = findInstalledPackageFromList(\n    SENTRY_SDK_PACKAGE_NAMES,\n    await getPackageDotJson(),\n  );\n\n  // Case 1:\n  if (!installedSdkPackage) {\n    return await handleNoSdkInstalled();\n  }\n\n  const { name: installedSdkName, version: installedSdkVersionOrRange } =\n    installedSdkPackage;\n\n  Sentry.setTag('installed-sdk', installedSdkName);\n\n  const minInstalledVersion = getMinInstalledVersion(\n    installedSdkVersionOrRange,\n    installedSdkName,\n  );\n\n  if (!minInstalledVersion) {\n    // This is handled in the getMinInstalledVersion function\n    return;\n  }\n\n  const hasDebugIdCompatibleSdkVersion = satisfies(\n    minInstalledVersion,\n    `>=${MINIMUM_DEBUG_ID_SDK_VERSION}`,\n  );\n\n  // Case 2:\n  if (hasDebugIdCompatibleSdkVersion) {\n    Sentry.setTag('initial-sdk-version', '>=7.47.0');\n    return;\n  }\n\n  const hasV7SdkVersion = satisfies(minInstalledVersion, '>=7.0.0');\n\n  clack.log.warn(\n    `${chalk.yellowBright(\n      `It seems like you're using an outdated version (${installedSdkVersionOrRange}) of the ${chalk.bold(\n        installedSdkName,\n      )} SDK.`,\n    )}\nUploading source maps is easiest with an SDK from version ${chalk.bold(\n      MINIMUM_DEBUG_ID_SDK_VERSION,\n    )} or newer.    \n`,\n  );\n\n  // Case 3:\n  if (hasV7SdkVersion) {\n    await handleAutoUpdateSdk(installedSdkName);\n    return;\n  }\n\n  // Case 4:\n  await handleManuallyUpdateSdk(minInstalledVersion);\n}\n\nasync function handleManuallyUpdateSdk(minInstalledVersion: string) {\n  Sentry.setTag(\n    'initial-sdk-version',\n    `${satisfies(minInstalledVersion, '>=6.0.0') ? '6.x' : '<6.0.0'}`,\n  );\n\n  clack.log\n    .info(`When upgrading from a version older than 7.0.0, make sure to follow the migration guide:\nhttps://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#upgrading-from-6x-to-7x\n`);\n\n  const didUpdate = await abortIfCancelled(\n    clack.select({\n      message: 'Did you update your SDK to the latest version?',\n      options: [\n        {\n          label: 'Yes!',\n          value: true,\n        },\n        {\n          label: \"No, I'll do it later...\",\n          value: false,\n          hint: chalk.yellow(\n            `Remember to update your SDK to at least ${MINIMUM_DEBUG_ID_SDK_VERSION}.`,\n          ),\n        },\n      ],\n      initialValue: true,\n    }),\n  );\n\n  Sentry.setTag(\n    'resolved-sdk-status',\n    didUpdate ? 'updated-manually' : 'update-later',\n  );\n}\n\nasync function handleAutoUpdateSdk(packageName: string) {\n  Sentry.setTag('initial-sdk-version', '>=7.0.0 <7.47.0');\n\n  const shouldUpdate = await abortIfCancelled(\n    clack.select({\n      message:\n        'Do you want to automatically update your SDK to the latest version?',\n      options: [\n        {\n          label: 'Yes!',\n          value: true,\n          hint: chalk.green('Recommended'),\n        },\n        {\n          label: \"No, I'll do it later...\",\n          value: false,\n          hint: chalk.yellow(\n            `Remember to update your SDK to at least ${MINIMUM_DEBUG_ID_SDK_VERSION}.`,\n          ),\n        },\n      ],\n      initialValue: true,\n    }),\n  );\n\n  if (shouldUpdate) {\n    await installPackage({\n      packageName,\n      alreadyInstalled: true,\n      askBeforeUpdating: false, // we already did this above\n    });\n  }\n\n  Sentry.setTag(\n    'resolved-sdk-status',\n    shouldUpdate ? 'updated-automatically' : 'update-later',\n  );\n}\n\nasync function handleNoSdkInstalled(): Promise<void> {\n  Sentry.setTag('initial-sdk-version', 'none');\n  Sentry.setTag('installed-sdk', 'none');\n\n  clack.log.warn(\n    `${chalk.yellowBright(\n      `It seems like you didn't yet install a Sentry SDK in your project.`,\n    )}\nWe recommend setting up the SDK before continuing with the source maps wizard.\n\n${chalk.dim(`Take a look at our docs to get started:\nhttps://docs.sentry.io/`)}`,\n  );\n\n  const installedSDK = await abortIfCancelled(\n    clack.select({\n      message: 'Did you set up your Sentry SDK?',\n      options: [\n        { label: 'Yes, continue!', value: true },\n        {\n          label: \"I'll do it later...\",\n          value: false,\n          hint: chalk.yellow(\n            'You need to set up an SDK before you can use Sentry',\n          ),\n        },\n      ],\n      initialValue: true,\n    }),\n  );\n\n  Sentry.setTag(\n    'resolved-sdk-status',\n    installedSDK ? 'installed-manually' : 'install-later',\n  );\n}\n\nfunction getMinInstalledVersion(\n  installedSdkVersionOrRange: string,\n  installedSdkName: string,\n): string | undefined {\n  try {\n    // If `minVersion` is unable to parse the version it will throw an error\n    // However, it will also return `null` if the parameter is undefined, which\n    // we explicitly checked before but the typing doesn't know that.\n    const minInstalledVersion = minVersion(installedSdkVersionOrRange)?.version;\n    if (minInstalledVersion) {\n      return minInstalledVersion;\n    }\n  } catch {\n    // handling this, along with the `null` case below\n  }\n\n  Sentry.setTag('initial-sdk-version', 'unknown');\n  clack.log.warn(\n    `${chalk.yellow(\n      `Could not parse the version of your installed SDK (\"${installedSdkName}\": \"${installedSdkVersionOrRange}\")`,\n    )}\n\nPlease make sure that your Sentry SDK is updated to version ${chalk.bold(\n      MINIMUM_DEBUG_ID_SDK_VERSION,\n    )} or newer.\n    `,\n  );\n\n  return undefined;\n}\n"]}