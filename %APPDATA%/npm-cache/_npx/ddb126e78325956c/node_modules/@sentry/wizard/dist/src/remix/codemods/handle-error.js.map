{"version":3,"file":"handle-error.js","sourceRoot":"","sources":["../../../../src/remix/codemods/handle-error.ts"],"names":[],"mappings":";AAAA,4DAA4D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM5D,+CAAiC;AAEjC,4CAAwD;AACxD,oCAA2E;AAE3E,+EAA+E;AAC/E,6DAAmC;AACnC,kDAA0B;AAE1B,kFAAkF;AAClF,uCAAwC;AAExC,SAAgB,qBAAqB;AACnC,iFAAiF;AACjF,8DAA8D;AAC9D,sBAA4C,EAC5C,mBAA2B;IAE3B,MAAM,yBAAyB,GAAG,sBAAsB,CAAC,IAAe,CAAC;IAEzE,MAAM,yBAAyB,GAAG,yBAAyB,CAAC,IAAI,CAAC,IAAI,CACnE,CAAC,IAAI,EAAE,EAAE;QACP,OAAO,CACL,IAAI,CAAC,IAAI,KAAK,wBAAwB;YACtC,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,qBAAqB;YAChD,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,KAAK,aAAa,CAC5C,CAAC;IACJ,CAAC,CACF,CAAC;IAEF,MAAM,4CAA4C,GAChD,yBAAyB,CAAC,IAAI,CAAC,IAAI,CACjC,CAAC,IAAI,EAAE,EAAE,CACP,IAAI,CAAC,IAAI,KAAK,wBAAwB;QACtC,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,qBAAqB;QAChD,+DAA+D;QAC/D,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,KAAK,aAAa,CAC7D,CAAC;IAEJ,IACE,CAAC,yBAAyB;QAC1B,CAAC,4CAA4C,EAC7C;QACA,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,2BAA2B,eAAK,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,eAAK,CAAC,IAAI,CACnE,mBAAmB,CACpB,yBAAyB,CAC3B,CAAC;QAEF,sEAAsE;QACtE,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,oCAAwB,CAAC,CAAC,OAAO;aAClE,IAAI,CAAC,CAAC,CAAC,CAAC;QAEX,yBAAyB,CAAC,IAAI,CAAC,MAAM,CACnC,IAAA,qCAA6B,EAAC,yBAAyB,CAAC,EACxD,CAAC;QACD,gFAAgF;QAChF,iEAAiE;QACjE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAC7D,CAAC;KACH;SAAM,IACL,CAAC,yBAAyB;QACxB,CAAC,2BAA2B,EAAE,mBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC/D,IAAA,wBAAgB,EACd,IAAA,uBAAY,EAAC,yBAAyB,CAAC,CAAC,IAAI,EAC5C,sBAAsB,CAAC,KAAK,EAC5B,IAAI,CACL,CACF,CAAC;QACJ,CAAC,4CAA4C;YAC3C,CAAC,2BAA2B,EAAE,mBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC/D,IAAA,wBAAgB,EACd,IAAA,uBAAY,EAAC,4CAA4C,CAAC,CAAC,IAAI,EAC/D,sBAAsB,CAAC,KAAK,EAC5B,IAAI,CACL,CACF,CAAC,EACJ;QACA,OAAO,KAAK,CAAC;KACd;SAAM,IAAI,yBAAyB,EAAE;QACpC,sEAAsE;QACtE,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,oCAAwB,CAAC,CAAC,OAAO;aAClE,IAAI,CAAC,CAAC,CAAC,CAAC;QAEX,gHAAgH;QAChH,yGAAyG;QACzG,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;QAChE,qFAAqF;QACrF,sEAAsE;QACtE,GAAG,yBAAyB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CACnD,CAAC;QAEF,qFAAqF;QACrF,yBAAyB,CAAC,WAAW,GAAG,cAAc,CAAC;KACxD;SAAM,IAAI,4CAA4C,EAAE;QACvD,sEAAsE;QACtE,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,oCAAwB,CAAC,CAAC,OAAO;aAClE,IAAI,CAAC,CAAC,CAAC,CAAC;QAEX,gHAAgH;QAChH,yGAAyG;QACzG,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;QAChE,qFAAqF;QACrF,sEAAsE;QACtE,GAAG,4CAA4C,CAAC,WAAW;aACxD,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAClC,CAAC;QAEF,qFAAqF;QACrF,4CAA4C,CAAC,WAAW,GAAG,cAAc,CAAC;KAC3E;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AArGD,sDAqGC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport type { ProxifiedModule } from 'magicast';\nimport type { Program } from '@babel/types';\n\nimport * as recast from 'recast';\n\nimport { HANDLE_ERROR_TEMPLATE_V2 } from '../templates';\nimport { getAfterImportsInsertionIndex, hasSentryContent } from '../utils';\n\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport clack from '@clack/prompts';\nimport chalk from 'chalk';\n\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { generateCode } from 'magicast';\n\nexport function instrumentHandleError(\n  // MagicAst returns `ProxifiedModule<any>` so therefore we have to use `any` here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  originalEntryServerMod: ProxifiedModule<any>,\n  serverEntryFilename: string,\n): boolean {\n  const originalEntryServerModAST = originalEntryServerMod.$ast as Program;\n\n  const handleErrorFunctionExport = originalEntryServerModAST.body.find(\n    (node) => {\n      return (\n        node.type === 'ExportNamedDeclaration' &&\n        node.declaration?.type === 'FunctionDeclaration' &&\n        node.declaration.id?.name === 'handleError'\n      );\n    },\n  );\n\n  const handleErrorFunctionVariableDeclarationExport =\n    originalEntryServerModAST.body.find(\n      (node) =>\n        node.type === 'ExportNamedDeclaration' &&\n        node.declaration?.type === 'VariableDeclaration' &&\n        // @ts-expect-error - id should always have a name in this case\n        node.declaration.declarations[0].id.name === 'handleError',\n    );\n\n  if (\n    !handleErrorFunctionExport &&\n    !handleErrorFunctionVariableDeclarationExport\n  ) {\n    clack.log.warn(\n      `Could not find function ${chalk.cyan('handleError')} in ${chalk.cyan(\n        serverEntryFilename,\n      )}. Creating one for you.`,\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const implementation = recast.parse(HANDLE_ERROR_TEMPLATE_V2).program\n      .body[0];\n\n    originalEntryServerModAST.body.splice(\n      getAfterImportsInsertionIndex(originalEntryServerModAST),\n      0,\n      // @ts-expect-error - string works here because the AST is proxified by magicast\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      recast.types.builders.exportNamedDeclaration(implementation),\n    );\n  } else if (\n    (handleErrorFunctionExport &&\n      ['wrapHandleErrorWithSentry', 'sentryHandleError'].some((util) =>\n        hasSentryContent(\n          generateCode(handleErrorFunctionExport).code,\n          originalEntryServerMod.$code,\n          util,\n        ),\n      )) ||\n    (handleErrorFunctionVariableDeclarationExport &&\n      ['wrapHandleErrorWithSentry', 'sentryHandleError'].some((util) =>\n        hasSentryContent(\n          generateCode(handleErrorFunctionVariableDeclarationExport).code,\n          originalEntryServerMod.$code,\n          util,\n        ),\n      ))\n  ) {\n    return false;\n  } else if (handleErrorFunctionExport) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const implementation = recast.parse(HANDLE_ERROR_TEMPLATE_V2).program\n      .body[0];\n\n    // If the current handleError function has a body, we need to merge the new implementation with the existing one\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    implementation.declarations[0].init.arguments[0].body.body.unshift(\n      // @ts-expect-error - declaration works here because the AST is proxified by magicast\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      ...handleErrorFunctionExport.declaration.body.body,\n    );\n\n    // @ts-expect-error - declaration works here because the AST is proxified by magicast\n    handleErrorFunctionExport.declaration = implementation;\n  } else if (handleErrorFunctionVariableDeclarationExport) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const implementation = recast.parse(HANDLE_ERROR_TEMPLATE_V2).program\n      .body[0];\n\n    // If the current handleError function has a body, we need to merge the new implementation with the existing one\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    implementation.declarations[0].init.arguments[0].body.body.unshift(\n      // @ts-expect-error - declaration works here because the AST is proxified by magicast\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      ...handleErrorFunctionVariableDeclarationExport.declaration\n        .declarations[0].init.body.body,\n    );\n\n    // @ts-expect-error - declaration works here because the AST is proxified by magicast\n    handleErrorFunctionVariableDeclarationExport.declaration = implementation;\n  }\n\n  return true;\n}\n"]}