{"version":3,"file":"MobileProject.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/MobileProject.ts"],"names":[],"mappings":";;;AACA,uCAAkC;AAElC,+CAA+D;AAC/D,kDAA2C;AAC3C,uDAAoD;AAEpD,MAAsB,aAAc,SAAQ,iCAAe;IAC/C,UAAU,CAAa;IAE1B,YAAY,CAAC,OAAgB;QAClC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QACD,MAAM,wBAAwB,GAC5B,OAAO,CAAC,wBAA8D,CAAC;QACzE,OAAO,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC;aAC5C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACzB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAuB;IACpD,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,OAAgB;QAC3C,IAAI,EAAE,wBAAwB,EAAE,GAAG,OAElC,CAAC;QACF,IAAI,wBAAwB,EAAE;YAC5B,OAAO,EAAE,wBAAwB,EAAE,CAAC;SACrC;QAED,MAAM,aAAa,GACjB,IAAI,CAAC,KAAK,CAAC,QAAQ;YACnB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAClC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAE/B,IAAI,CAAC,UAAU,GAAG,aAAa;YAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;YACrB,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,QAAQ,CAAC;QAE9C,wBAAwB,GAAG,EAAE,CAAC;QAC9B,kEAAkE;QAClE,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,oBAAQ,CAAC,EAAE;YAC9C,wBAAwB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACrE,CAAC,CAAC,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;gBAC/C,CAAC,CAAC,KAAK,CAAC;YACV,IACE,wBAAwB,CAAC,QAAQ,CAAC,KAAK,KAAK;gBAC5C,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,KAAK,EAC9B;gBACA,IAAA,aAAG,EAAC,sBAAsB,QAAQ,EAAE,CAAC,CAAC;aACvC;SACF;QACD,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACtC,CAAC;IAES,iBAAiB;QACzB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QACD,OAAO,IAAA,iBAAM,EAAC;YACZ;gBACE,OAAO,EAAE,IAAA,8BAAkB,GAAE;gBAC7B,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,UAAU;aACjB;SACF,CAAC,CAAC;IACL,CAAC;CAKF;AAhED,sCAgEC","sourcesContent":["import type { Answers } from 'inquirer';\nimport { prompt } from 'inquirer';\n\nimport { getPlatformChoices, Platform } from '../../Constants';\nimport { dim } from '../../Helper/Logging';\nimport { BaseIntegration } from './BaseIntegration';\n\nexport abstract class MobileProject extends BaseIntegration {\n  protected _platforms: Platform[];\n\n  public getPlatforms(answers: Answers): string[] {\n    if (!answers.shouldConfigurePlatforms) {\n      throw new Error('No platform selected');\n    }\n    const shouldConfigurePlatforms =\n      answers.shouldConfigurePlatforms as Partial<Record<Platform, boolean>>;\n    return Object.entries(shouldConfigurePlatforms)\n      .filter((pair) => pair[1])\n      .map((pair) => pair[0]); // only return the keys\n  }\n\n  public async shouldConfigure(answers: Answers): Promise<Answers> {\n    let { shouldConfigurePlatforms } = answers as {\n      shouldConfigurePlatforms?: Partial<Record<Platform, boolean>>;\n    };\n    if (shouldConfigurePlatforms) {\n      return { shouldConfigurePlatforms };\n    }\n\n    const isPlatformSet =\n      this._argv.platform &&\n      Array.isArray(this._argv.platform) &&\n      !!this._argv.platform.length;\n\n    this._platforms = isPlatformSet\n      ? this._argv.platform\n      : (await this._platformSelector()).platform;\n\n    shouldConfigurePlatforms = {};\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    for (const platform of Object.values(Platform)) {\n      shouldConfigurePlatforms[platform] = this._platforms.includes(platform)\n        ? await this._shouldConfigurePlatform(platform)\n        : false;\n      if (\n        shouldConfigurePlatforms[platform] === false &&\n        this._argv.uninstall === false\n      ) {\n        dim(`will not configure ${platform}`);\n      }\n    }\n    return { shouldConfigurePlatforms };\n  }\n\n  protected _platformSelector(): Promise<Answers & { platform: Platform[] }> {\n    if (this._argv.quiet) {\n      throw new Error('You need to choose a platform');\n    }\n    return prompt([\n      {\n        choices: getPlatformChoices(),\n        message: 'Select the platforms you like to set up:',\n        name: 'platform',\n        type: 'checkbox',\n      },\n    ]);\n  }\n\n  protected abstract _shouldConfigurePlatform(\n    platform: Platform,\n  ): Promise<boolean>;\n}\n"]}