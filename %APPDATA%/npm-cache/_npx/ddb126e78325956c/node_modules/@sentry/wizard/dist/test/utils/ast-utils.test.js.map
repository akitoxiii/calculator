{"version":3,"file":"ast-utils.test.js","sourceRoot":"","sources":["../../../test/utils/ast-utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getObjectProperty,\n  getOrSetObjectProperty,\n  hasSentryContent,\n  parseJsonC,\n  printJsonC,\n  setOrUpdateObjectProperty,\n} from '../../src/utils/ast-utils';\n\nimport * as recast from 'recast';\nconst b = recast.types.builders;\n\nimport { describe, it, expect } from 'vitest';\n\ndescribe('hasSentryContent', () => {\n  it.each([\n    `\n      const { sentryVitePlugin } = require(\"@sentry/vite-plugin\");\n      const somethingelse = require('gs');\n    `,\n    `\n        import { sentryVitePlugin } from \"@sentry/vite-plugin\";\n        import * as somethingelse from 'gs';\n\n        export default {\n            plugins: [sentryVitePlugin()]\n        }\n      `,\n  ])(\n    \"returns true if a require('@sentry/') call was found in the parsed module\",\n    (code) => {\n      // recast.parse returns a Program node (or fails) but it's badly typed as any\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const program = recast.parse(code)\n        .program as recast.types.namedTypes.Program;\n      expect(hasSentryContent(program)).toBe(true);\n    },\n  );\n\n  it.each([\n    `const whatever = require('something')`,\n    `// const {sentryWebpackPlugin} = require('@sentry/webpack-plugin')`,\n    `const {sAntryWebpackPlugin} = require('webpack-plugin-@sentry')`,\n    `\n      import * as somethingelse from 'gs';\n      export default {\n          plugins: []\n      }\n      `,\n    `import * as somethingelse from 'gs';\n       // import { sentryVitePlugin } from \"@sentry/vite-plugin\"\n      export default {\n          plugins: []\n      }\n      `,\n    `import * as thirdPartyVitePlugin from \"vite-plugin-@sentry\"\n      export default {\n        plugins: [thirdPartyVitePlugin()]\n      }\n      `,\n  ])(\n    \"returns false if the file doesn't contain any require('@sentry/') calls\",\n    (code) => {\n      // recast.parse returns a Program node (or fails) but it's badly typed as any\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const program = recast.parse(code)\n        .program as recast.types.namedTypes.Program;\n      expect(hasSentryContent(program)).toBe(false);\n    },\n  );\n});\n\ndescribe('getObjectProperty', () => {\n  it.each([\n    [\n      'literal',\n      b.objectExpression([\n        b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n        b.objectProperty(\n          b.stringLiteral('needle'),\n          b.stringLiteral('haystack'),\n        ),\n      ]),\n    ],\n    [\n      'stringLiteral',\n      b.objectExpression([\n        b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n        b.objectProperty(b.literal('needle'), b.stringLiteral('haystack')),\n      ]),\n    ],\n    [\n      'identifier',\n      b.objectExpression([\n        b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n        b.objectProperty(b.identifier('needle'), b.stringLiteral('haystack')),\n      ]),\n    ],\n  ])('returns the poperty (%s) if it exists', (_, object) => {\n    const property = getObjectProperty(object, 'needle');\n    expect(property).toBeDefined();\n    // @ts-expect-error we know it's defined due to the expect above\n    expect(recast.print(property).code).toEqual(\n      expect.stringContaining('needle'),\n    );\n  });\n\n  it('returns undefined if the property does not exist', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n    ]);\n    const property = getObjectProperty(object, 'needle');\n    expect(property).toBeUndefined();\n  });\n\n  it('handles objects without simple properties', () => {\n    const object = b.objectExpression([b.spreadElement(b.identifier('foo'))]);\n    const property = getObjectProperty(object, 'needle');\n    expect(property).toBeUndefined();\n  });\n});\n\ndescribe('getOrSetObjectProperty', () => {\n  it('returns the property if it exists', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('needle'), b.stringLiteral('haystack')),\n    ]);\n\n    const property = getOrSetObjectProperty(\n      object,\n      'needle',\n      b.stringLiteral('nope'),\n    );\n\n    expect(property).toBeDefined();\n    expect(property.type).toBe('ObjectProperty');\n    // @ts-expect-error we know its type\n    expect(property.key.name).toBe('needle');\n    // @ts-expect-error we know its type\n    expect(property.value.value).toBe('haystack');\n  });\n\n  it('adds the property if it does not exist', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n    ]);\n\n    const property = getOrSetObjectProperty(\n      object,\n      'needle',\n      b.stringLiteral('haystack'),\n    );\n\n    expect(property).toBeDefined();\n    expect(property.type).toBe('Property');\n    // @ts-expect-error we know its type\n    expect(property.key.value).toBe('needle');\n    // @ts-expect-error we know its type\n    expect(property.value.value).toBe('haystack');\n  });\n});\n\ndescribe('setOrUpdateObjectProperty', () => {\n  it('sets a new property if it does not exist yet', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n    ]);\n\n    setOrUpdateObjectProperty(object, 'needle', b.stringLiteral('haystack'));\n\n    expect(getObjectProperty(object, 'needle')).toBeDefined();\n  });\n\n  it('updates an existing property if it exists', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n      b.objectProperty(b.identifier('needle'), b.stringLiteral('haystack')),\n    ]);\n\n    setOrUpdateObjectProperty(object, 'needle', b.stringLiteral('haystack2'));\n\n    const property = getObjectProperty(object, 'needle');\n    // @ts-expect-error it must be defiend, otherwise we fail anyway\n    expect(property?.value.value).toBe('haystack2');\n  });\n\n  it('adds a comment to the existing property if provided', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n    ]);\n\n    setOrUpdateObjectProperty(\n      object,\n      'needle',\n      b.stringLiteral('haystack'),\n      'This is a comment',\n    );\n\n    const property = getObjectProperty(object, 'needle');\n    expect(property?.comments).toHaveLength(1);\n    // @ts-expect-error it must be defiend, otherwise we fail anyway\n    expect(property?.comments[0].value).toBe(' This is a comment');\n  });\n\n  it('adds a comment to the new property if provided', () => {\n    const object = b.objectExpression([\n      b.objectProperty(b.identifier('foo'), b.stringLiteral('bar')),\n    ]);\n\n    setOrUpdateObjectProperty(\n      object,\n      'needle',\n      b.stringLiteral('haystack'),\n      'This is a comment',\n    );\n\n    const property = getObjectProperty(object, 'needle');\n    expect(property?.comments).toHaveLength(1);\n    // @ts-expect-error it must be defiend, otherwise we fail anyway\n    expect(property?.comments[0].value).toBe(' This is a comment');\n  });\n});\n\ndescribe('parse and print JSON-C', () => {\n  it.each([\n    ['simple JSON', \"{'foo': 'bar'}\"],\n    [\n      'JSON-C with inline comment',\n      `\n    {\n      \"foo\": \"bar\" // with an inline comment\n    }\n    `,\n    ],\n    [\n      'JSON-C with multiple comments',\n      `\n    /*\n     * let's throw in a block comment for good measure\n     */  \n    {\n      // one line comment\n      \"foo\": \"bar\", // another inline comment\n      /* one more here */\n      \"dogs\": /* and here */ \"awesome\",\n    }\n    /* and here */\n    `,\n    ],\n  ])(`parses and prints JSON-C (%s)`, (_, json) => {\n    const { ast, jsonObject } = parseJsonC(json);\n    expect(ast?.type).toBe('Program');\n    expect(jsonObject).toBeDefined();\n    expect(jsonObject?.type).toBe('ObjectExpression');\n    // @ts-expect-error we know it's defined due to the expect above\n    expect(printJsonC(ast)).toEqual(json);\n  });\n\n  it('returns undefined if the input is not valid JSON-C', () => {\n    const { ast, jsonObject } = parseJsonC(`{\n      \"invalid\": // \"json\"\n    }`);\n    expect(ast).toBeUndefined();\n    expect(jsonObject).toBeUndefined();\n  });\n});\n"]}