{"version":3,"file":"search-xcode-project-at-path.js","sourceRoot":"","sources":["../../../src/apple/search-xcode-project-at-path.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,2CAA6B;AAE7B,0CAAuC;AACvC,kFAA4E;AAE5E,SAAgB,wBAAwB,CAAC,UAAkB;IACzD,IAAA,aAAK,EAAC,uCAAuC,GAAG,UAAU,CAAC,CAAC;IAC5D,MAAM,KAAK,GAAG,IAAA,kDAAsB,EAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IAC/D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACpB,IAAA,aAAK,EAAC,+BAA+B,CAAC,CAAC;QACvC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;QAC5C,OAAO,KAAK,CAAC;KACd;IAED,IAAA,aAAK,EAAC,yCAAyC,GAAG,UAAU,CAAC,CAAC;IAC9D,MAAM,SAAS,GAAG,IAAA,kDAAsB,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACrE,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;QACzB,IAAA,aAAK,EAAC,oCAAoC,GAAG,UAAU,CAAC,CAAC;QACzD,OAAO,EAAE,CAAC;KACX;IAED,IAAA,aAAK,EAAC,iCAAiC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAC/B,UAAU,EACV,SAAS,CAAC,CAAC,CAAC,EACZ,0BAA0B,CAC3B,CAAC;IACF,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;QACnC,IAAA,aAAK,EAAC,yCAAyC,GAAG,eAAe,CAAC,CAAC;QACnE,OAAO,EAAE,CAAC;KACX;IAED,IAAA,aAAK,EAAC,wCAAwC,GAAG,eAAe,CAAC,CAAC;IAClE,MAAM,UAAU,GAAG,iCAAiC,CAAC;IACrD,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IACzD,IAAI,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEvC,OAAO,OAAO,EAAE;QACd,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC/C,IACE,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC;YACjC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC5B,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EACxB;YACA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnB;QACD,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACpC;IAED,IAAA,aAAK,EAAC,+BAA+B,CAAC,CAAC;IACvC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IAC5C,OAAO,KAAK,CAAC;AACf,CAAC;AAhDD,4DAgDC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { debug } from '../utils/debug';\nimport { findFilesWithExtension } from '../utils/find-files-with-extension';\n\nexport function searchXcodeProjectAtPath(searchPath: string): string[] {\n  debug('Searching for Xcode project at path: ' + searchPath);\n  const projs = findFilesWithExtension(searchPath, '.xcodeproj');\n  if (projs.length > 0) {\n    debug('Found Xcode project at paths:');\n    projs.forEach((proj) => debug('  ' + proj));\n    return projs;\n  }\n\n  debug('Searching for Xcode workspace at path: ' + searchPath);\n  const workspace = findFilesWithExtension(searchPath, '.xcworkspace');\n  if (workspace.length == 0) {\n    debug('No Xcode workspace found at path: ' + searchPath);\n    return [];\n  }\n\n  debug('Found Xcode workspace at path: ' + workspace[0]);\n  const xsworkspacedata = path.join(\n    searchPath,\n    workspace[0],\n    'contents.xcworkspacedata',\n  );\n  if (!fs.existsSync(xsworkspacedata)) {\n    debug('No Xcode workspace data found at path: ' + xsworkspacedata);\n    return [];\n  }\n\n  debug('Parsing Xcode workspace data at path: ' + xsworkspacedata);\n  const groupRegex = /location *= *\"group:([^\"]+)\"/gim;\n  const content = fs.readFileSync(xsworkspacedata, 'utf8');\n  let matches = groupRegex.exec(content);\n\n  while (matches) {\n    const group = matches[1];\n    const groupPath = path.join(searchPath, group);\n    if (\n      !group.endsWith('Pods.xcodeproj') &&\n      group.endsWith('.xcodeproj') &&\n      fs.existsSync(groupPath)\n    ) {\n      projs.push(group);\n    }\n    matches = groupRegex.exec(content);\n  }\n\n  debug('Found Xcode project at paths:');\n  projs.forEach((proj) => debug('  ' + proj));\n  return projs;\n}\n"]}