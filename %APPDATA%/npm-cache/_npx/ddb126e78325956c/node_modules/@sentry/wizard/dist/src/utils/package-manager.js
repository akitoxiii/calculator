"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._detectPackageManger = exports.packageManagers = exports.NPM = exports.PNPM = exports.YARN_V2 = exports.YARN_V1 = exports.DENO = exports.BUN = void 0;
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const Sentry = __importStar(require("@sentry/node"));
const telemetry_1 = require("../telemetry");
const clack_1 = require("./clack");
exports.BUN = {
    name: 'bun',
    label: 'Bun',
    installCommand: 'add',
    buildCommand: 'bun run build',
    runScriptCommand: 'bun run',
    flags: '',
    forceInstallFlag: '--force',
    detect: () => ['bun.lockb', 'bun.lock'].some((lockFile) => {
        try {
            return fs.existsSync(path.join(process.cwd(), lockFile));
        }
        catch (e) {
            return false;
        }
    }),
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const overrides = packageDotJson.overrides || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            overrides: {
                ...overrides,
                [pkgName]: pkgVersion,
            },
        });
    },
};
exports.DENO = {
    name: 'deno',
    label: 'Deno',
    installCommand: 'install',
    buildCommand: 'deno task build',
    runScriptCommand: 'deno task',
    flags: '',
    forceInstallFlag: '--force',
    registry: 'npm',
    detect: () => {
        try {
            return fs.existsSync(path.join(process.cwd(), 'deno.lock'));
        }
        catch (e) {
            return false;
        }
    },
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const overrides = packageDotJson.overrides || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            overrides: {
                ...overrides,
                [pkgName]: pkgVersion,
            },
        });
    },
};
exports.YARN_V1 = {
    name: 'yarn',
    label: 'Yarn V1',
    installCommand: 'add',
    buildCommand: 'yarn build',
    runScriptCommand: 'yarn',
    flags: '--ignore-workspace-root-check',
    forceInstallFlag: '--force',
    detect: () => {
        try {
            return fs
                .readFileSync(path.join(process.cwd(), 'yarn.lock'), 'utf-8')
                .slice(0, 500)
                .includes('yarn lockfile v1');
        }
        catch (e) {
            return false;
        }
    },
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const resolutions = packageDotJson.resolutions || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            resolutions: {
                ...resolutions,
                [pkgName]: pkgVersion,
            },
        });
    },
};
/** YARN V2/3/4 */
exports.YARN_V2 = {
    name: 'yarn',
    label: 'Yarn V2/3/4',
    installCommand: 'add',
    buildCommand: 'yarn build',
    runScriptCommand: 'yarn',
    flags: '',
    forceInstallFlag: '--force',
    detect: () => {
        try {
            return fs
                .readFileSync(path.join(process.cwd(), 'yarn.lock'), 'utf-8')
                .slice(0, 500)
                .includes('__metadata');
        }
        catch (e) {
            return false;
        }
    },
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const resolutions = packageDotJson.resolutions || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            resolutions: {
                ...resolutions,
                [pkgName]: pkgVersion,
            },
        });
    },
};
exports.PNPM = {
    name: 'pnpm',
    label: 'PNPM',
    installCommand: 'add',
    buildCommand: 'pnpm build',
    runScriptCommand: 'pnpm',
    flags: '--ignore-workspace-root-check',
    forceInstallFlag: '--force',
    detect: () => {
        try {
            return fs.existsSync(path.join(process.cwd(), 'pnpm-lock.yaml'));
        }
        catch (e) {
            return false;
        }
    },
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const pnpm = packageDotJson.pnpm || {};
        const overrides = pnpm.overrides || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            pnpm: {
                ...pnpm,
                overrides: {
                    ...overrides,
                    [pkgName]: pkgVersion,
                },
            },
        });
    },
};
exports.NPM = {
    name: 'npm',
    label: 'NPM',
    installCommand: 'install',
    buildCommand: 'npm run build',
    runScriptCommand: 'npm run',
    flags: '',
    forceInstallFlag: '--force',
    detect: () => {
        try {
            return fs.existsSync(path.join(process.cwd(), 'package-lock.json'));
        }
        catch (e) {
            return false;
        }
    },
    addOverride: async (pkgName, pkgVersion) => {
        const packageDotJson = await (0, clack_1.getPackageDotJson)();
        const overrides = packageDotJson.overrides || {};
        await (0, clack_1.updatePackageDotJson)({
            ...packageDotJson,
            overrides: {
                ...overrides,
                [pkgName]: pkgVersion,
            },
        });
    },
};
exports.packageManagers = [exports.NPM, exports.YARN_V1, exports.YARN_V2, exports.PNPM, exports.BUN, exports.DENO];
/**
 * Exported only for testing.
 * DO NOT call this function directly!
 * Use `getPackageManger` instead.
 */
function _detectPackageManger(managers) {
    return (0, telemetry_1.traceStep)('detect-package-manager', () => {
        const foundPackageMangers = (managers ?? exports.packageManagers).filter((packageManager) => packageManager.detect());
        // Only consider a package manager detected if we found exactly one.
        // If we find more than one, we should not make any assumptions.
        if (foundPackageMangers.length === 1) {
            Sentry.setTag('package-manager', foundPackageMangers[0].name);
            return foundPackageMangers[0];
        }
        Sentry.setTag('package-manager', 'not-detected');
        return null;
    });
}
exports._detectPackageManger = _detectPackageManger;
//# sourceMappingURL=package-manager.js.map