{"version":3,"file":"vite.test.js","sourceRoot":"","sources":["../../../../test/sourcemaps/tools/vite.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,6DAA2E;AAE3E,mCAA6D;AAE7D,SAAS,iBAAiB,CAAC,OAAe;IACxC,WAAW,GAAG,OAAO,CAAC;AACxB,CAAC;AAED,IAAI,WAAW,GAAG,EAAE,CAAC;AAErB,WAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC7B,OAAO;QACL,GAAG,EAAE;YACH,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;YACb,OAAO,EAAE,WAAE,CAAC,EAAE,EAAE;SACjB;KACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,WAAE,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACxD,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAC7B,CAAC;AAEF,MAAM,YAAY,GAAG,WAAE;KACpB,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;KAC/B,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAErD,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,WAAW,GAAG,EAAE,CAAC;QACjB,WAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,WAAE,CAAC,IAAI,CAAC;QACN;YACE,kBAAkB;YAClB;;;;;;CAML;YACK;;;;;;;;;;GAUH;SACE;QACD;YACE,4BAA4B;YAC5B;;;;;;;;;GASH;YACG;;;;;;;;;;GAUH;SACE;QACD;YACE,0BAA0B;YAC1B;;;;;;;;;KASD;YACC;;;;;;;;;EASJ;SACG;QACD;YACE,kCAAkC;YAClC;;;;;;;;;;;OAWC;YACD;;;;;;;;;;;;oBAYc;SACf;KACF,CAAC,CACA,yDAAyD,EACzD,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE;QACtC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAEhC,MAAM,SAAS,GAAG,MAAM,IAAA,4BAAqB,EAAC,EAAE,EAAE;YAChD,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,QAAQ;YACjB,WAAW,EAAE,YAAY;YACzB,UAAU,EAAE,KAAK;YACjB,GAAG,EAAE,oBAAoB;SAC1B,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;QAClD,IAAA,eAAM,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CACF,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'fs';\nimport { addVitePluginToConfig } from '../../../src/sourcemaps/tools/vite';\n\nimport { vi, it, describe, expect, afterEach } from 'vitest';\n\nfunction updateFileContent(content: string): void {\n  fileContent = content;\n}\n\nlet fileContent = '';\n\nvi.mock('@clack/prompts', () => {\n  return {\n    log: {\n      info: vi.fn(),\n      success: vi.fn(),\n    },\n  };\n});\n\nvi.spyOn(fs.promises, 'readFile').mockImplementation(() =>\n  Promise.resolve(fileContent),\n);\n\nconst writeFileSpy = vi\n  .spyOn(fs.promises, 'writeFile')\n  .mockImplementation(() => Promise.resolve(void 0));\n\ndescribe('addVitePluginToConfig', () => {\n  afterEach(() => {\n    fileContent = '';\n    vi.clearAllMocks();\n  });\n\n  it.each([\n    [\n      'no build options',\n      `\nexport default defineConfig({\n  plugins: [\n    vue(),\n  ],\n})\n`,\n      `import { sentryVitePlugin } from \"@sentry/vite-plugin\";\nexport default defineConfig({\n  plugins: [vue(), sentryVitePlugin({\n    org: \"my-org\",\n    project: \"my-project\"\n  })],\n\n  build: {\n    sourcemap: true\n  }\n})`,\n    ],\n    [\n      'no build.sourcemap options',\n      `\nexport default defineConfig({\n  plugins: [\n    vue(),\n  ],\n  build: {\n    test: 1,  \n  }\n})\n  `,\n      `import { sentryVitePlugin } from \"@sentry/vite-plugin\";\nexport default defineConfig({\n  plugins: [vue(), sentryVitePlugin({\n    org: \"my-org\",\n    project: \"my-project\"\n  })],\n  build: {\n    test: 1,\n    sourcemap: true\n  }\n})`,\n    ],\n    [\n      'keep sourcemap: \"hidden\"',\n      `\nexport default {\n  plugins: [\n    vue(),\n  ],\n  build: {\n    sourcemap: \"hidden\",\n  }\n}\n    `,\n      `import { sentryVitePlugin } from \"@sentry/vite-plugin\";\nexport default {\n  plugins: [vue(), sentryVitePlugin({\n    org: \"my-org\",\n    project: \"my-project\"\n  })],\n  build: {\n    sourcemap: \"hidden\",\n  }\n}`,\n    ],\n    [\n      'rewrite sourcemap: false to true',\n      `\nconst cfg = {\n  plugins: [\n    vue(),\n  ],\n  build: {\n    sourcemap: false,\n  }\n}\n\nexport default cfg;\n      `,\n      `import { sentryVitePlugin } from \"@sentry/vite-plugin\";\nconst cfg = {\n  plugins: [vue(), sentryVitePlugin({\n    org: \"my-org\",\n    project: \"my-project\"\n  })],\n\n  build: {\n    sourcemap: true,\n  }\n}\n\nexport default cfg;`,\n    ],\n  ])(\n    'adds the plugin and enables source maps generation (%s)',\n    async (_, originalCode, expectedCode) => {\n      updateFileContent(originalCode);\n\n      const addedCode = await addVitePluginToConfig('', {\n        authToken: '',\n        orgSlug: 'my-org',\n        projectSlug: 'my-project',\n        selfHosted: false,\n        url: 'https://sentry.io/',\n      });\n\n      expect(writeFileSpy).toHaveBeenCalledTimes(1);\n      const [[, fileContent]] = writeFileSpy.mock.calls;\n      expect(fileContent).toBe(expectedCode);\n      expect(addedCode).toBe(true);\n    },\n  );\n});\n"]}