{"version":3,"file":"Constants.js","sourceRoot":"","sources":["../../lib/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["/** Key value should be the same here */\nexport enum Integration {\n  reactNative = 'reactNative',\n  flutter = 'flutter',\n  ios = 'ios',\n  android = 'android',\n  cordova = 'cordova',\n  angular = 'angular',\n  electron = 'electron',\n  nextjs = 'nextjs',\n  nuxt = 'nuxt',\n  remix = 'remix',\n  sveltekit = 'sveltekit',\n  sourcemaps = 'sourcemaps',\n}\n\n/** Key value should be the same here */\nexport enum Platform {\n  ios = 'ios',\n  android = 'android',\n}\n\nexport function getPlatformChoices(): Array<{\n  checked: boolean;\n  name: string;\n  value: string;\n}> {\n  return Object.keys(Platform).map((platform) => ({\n    checked: true,\n    name: getPlatformDescription(platform),\n    value: platform,\n  }));\n}\n\nexport function getPlatformDescription(type: string): string {\n  switch (type) {\n    case Platform.ios:\n      return 'iOS';\n    default:\n      return 'Android';\n  }\n}\n\nexport function getIntegrationDescription(type: string): string {\n  switch (type) {\n    case Integration.android:\n      return 'Android';\n    case Integration.reactNative:\n      return 'React Native';\n    case Integration.flutter:\n      return 'Flutter';\n    case Integration.cordova:\n      return 'Cordova';\n    case Integration.electron:\n      return 'Electron';\n    case Integration.nextjs:\n      return 'Next.js';\n    case Integration.remix:\n      return 'Remix';\n    case Integration.sveltekit:\n      return 'SvelteKit';\n    case Integration.sourcemaps:\n      return 'Configure Source Maps Upload';\n    case Integration.ios:\n      return 'iOS';\n    default:\n      return 'React Native';\n  }\n}\n\nexport function mapIntegrationToPlatform(type: string): string | undefined {\n  switch (type) {\n    case Integration.android:\n      return 'android';\n    case Integration.reactNative:\n      return 'react-native';\n    case Integration.flutter:\n      return 'flutter';\n    case Integration.cordova:\n      return 'cordova';\n    case Integration.angular:\n      return 'javascript-angular';\n    case Integration.electron:\n      return 'javascript-electron';\n    case Integration.nextjs:\n      return 'javascript-nextjs';\n    case Integration.remix:\n      return 'javascript-remix';\n    case Integration.sveltekit:\n      return 'javascript-sveltekit';\n    case Integration.sourcemaps:\n      return undefined;\n    case Integration.ios:\n      return 'iOS';\n    default:\n      throw new Error(`Unknown integration ${type}`);\n  }\n}\n\ntype IntegrationChoice = {\n  name: string;\n  value: string;\n};\n\nexport function getIntegrationChoices(): IntegrationChoice[] {\n  return Object.keys(Integration).map((type: string) => ({\n    name: getIntegrationDescription(type),\n    value: type,\n  }));\n}\n\nexport interface Args {\n  url: string;\n  debug: boolean;\n  uninstall: boolean;\n  integration: Integration;\n  platform: Platform[];\n  skipConnect: boolean;\n  quiet: boolean;\n  signup: boolean;\n  promoCode?: string;\n  disableTelemetry?: boolean;\n  comingFrom?: string;\n  ignoreGitChanges?: boolean;\n  xcodeProjectDir?: string;\n}\n\nexport const DEFAULT_URL = 'https://sentry.io/';\n"]}