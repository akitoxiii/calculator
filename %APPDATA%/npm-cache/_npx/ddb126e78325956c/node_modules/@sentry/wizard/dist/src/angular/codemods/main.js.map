{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/angular/codemods/main.ts"],"names":[],"mappings":";;;AAEA,uCAMkB;AAElB,SAAgB,iBAAiB;AAC/B,8DAA8D;AAC9D,oBAA0C,EAC1C,GAAW,EACX,gBAGC;IAGD,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC;QAChC,IAAI,EAAE,iBAAiB;QACvB,QAAQ,EAAE,GAAG;QACb,KAAK,EAAE,QAAQ;KAChB,CAAC,CAAC;IAEH,cAAc,CAAC,oBAAoB,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;IAE5D,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAnBD,8CAmBC;AAED,SAAgB,cAAc;AAC5B,8DAA8D;AAC9D,oBAA0C,EAC1C,GAAW,EACX,gBAGC;IAED,MAAM,YAAY,GAAG,eAAe,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;IAC5D,sHAAsH;IACtH,MAAM,QAAQ,GAAG,mBAAQ,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IACpE,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,IAAe,CAAC;IAErE,MAAM,sBAAsB,GAAG,6BAA6B,CAC1D,uBAAuB,CACxB,CAAC;IAEF,uBAAuB,CAAC,IAAI,CAAC,MAAM,CACjC,sBAAsB,EACtB,CAAC;IACD,gFAAgF;IAChF,qHAAqH;IACrH,IAAA,uBAAY,EAAC,QAAQ,CAAC,CAAC,IAAI,CAC5B,CAAC;AACJ,CAAC;AAzBD,wCAyBC;AAID,SAAgB,eAAe,CAC7B,GAAW,EACX,gBAGC;IAED,MAAM,YAAY,GAAiB;QACjC,GAAG;KACJ,CAAC;IAEF,IAAI,gBAAgB,CAAC,MAAM,IAAI,gBAAgB,CAAC,WAAW,EAAE;QAC3D,YAAY,CAAC,YAAY,GAAG,EAAE,CAAC;QAE/B,IAAI,gBAAgB,CAAC,WAAW,EAAE;YAChC,YAAY,CAAC,YAAY,CAAC,IAAI,CAC5B,mBAAQ,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAC1D,CAAC;YACF,YAAY,CAAC,gBAAgB,GAAG,GAAG,CAAC;SACrC;QAED,IAAI,gBAAgB,CAAC,MAAM,EAAE;YAC3B,YAAY,CAAC,YAAY,CAAC,IAAI,CAC5B,mBAAQ,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAClD,CAAC;YAEF,YAAY,CAAC,wBAAwB,GAAG,GAAG,CAAC;YAC5C,YAAY,CAAC,wBAAwB,GAAG,GAAG,CAAC;SAC7C;KACF;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAhCD,0CAgCC;AAED;;GAEG;AACH,SAAgB,6BAA6B,CAC3C,yBAAkC;IAElC,KAAK,IAAI,CAAC,GAAG,yBAAyB,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACnE,IAAI,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB,EAAE;YAClE,OAAO,CAAC,GAAG,CAAC,CAAC;SACd;KACF;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAVD,sEAUC","sourcesContent":["import type { Program } from '@babel/types';\n\nimport {\n  builders,\n  generateCode,\n  Proxified,\n  type ProxifiedModule,\n  // @ts-expect-error - magicast is ESM and TS complains about that. It works though\n} from 'magicast';\n\nexport function updateAppEntryMod(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  originalAppModuleMod: ProxifiedModule<any>,\n  dsn: string,\n  selectedFeatures: {\n    performance: boolean;\n    replay: boolean;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): ProxifiedModule<any> {\n  originalAppModuleMod.imports.$add({\n    from: '@sentry/angular',\n    imported: '*',\n    local: 'Sentry',\n  });\n\n  insertInitCall(originalAppModuleMod, dsn, selectedFeatures);\n\n  return originalAppModuleMod;\n}\n\nexport function insertInitCall(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  originalAppModuleMod: ProxifiedModule<any>,\n  dsn: string,\n  selectedFeatures: {\n    performance: boolean;\n    replay: boolean;\n  },\n): void {\n  const initCallArgs = getInitCallArgs(dsn, selectedFeatures);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- builders return Proxified which defaults to any\n  const initCall = builders.functionCall('Sentry.init', initCallArgs);\n  const originalAppModuleModAst = originalAppModuleMod.$ast as Program;\n\n  const initCallInsertionIndex = getAfterImportsInsertionIndex(\n    originalAppModuleModAst,\n  );\n\n  originalAppModuleModAst.body.splice(\n    initCallInsertionIndex,\n    0,\n    // @ts-expect-error - string works here because the AST is proxified by magicast\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- builders return Proxified which defaults to any.\n    generateCode(initCall).code,\n  );\n}\n\ntype InitCallArgs = Record<string, string | number | Array<Proxified>>;\n\nexport function getInitCallArgs(\n  dsn: string,\n  selectedFeatures: {\n    performance: boolean;\n    replay: boolean;\n  },\n): InitCallArgs {\n  const initCallArgs: InitCallArgs = {\n    dsn,\n  };\n\n  if (selectedFeatures.replay || selectedFeatures.performance) {\n    initCallArgs.integrations = [];\n\n    if (selectedFeatures.performance) {\n      initCallArgs.integrations.push(\n        builders.functionCall('Sentry.browserTracingIntegration'),\n      );\n      initCallArgs.tracesSampleRate = 1.0;\n    }\n\n    if (selectedFeatures.replay) {\n      initCallArgs.integrations.push(\n        builders.functionCall('Sentry.replayIntegration'),\n      );\n\n      initCallArgs.replaysSessionSampleRate = 0.1;\n      initCallArgs.replaysOnErrorSampleRate = 1.0;\n    }\n  }\n\n  return initCallArgs;\n}\n\n/**\n * We want to insert the handleError function just after all imports\n */\nexport function getAfterImportsInsertionIndex(\n  originalEntryServerModAST: Program,\n): number {\n  for (let x = originalEntryServerModAST.body.length - 1; x >= 0; x--) {\n    if (originalEntryServerModAST.body[x].type === 'ImportDeclaration') {\n      return x + 1;\n    }\n  }\n\n  return 0;\n}\n"]}