{"version":3,"file":"tsc.test.js","sourceRoot":"","sources":["../../../../test/sourcemaps/tools/tsc.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,2DAAqE;AAErE,mCAA6D;AAE7D,SAAS,iBAAiB,CAAC,OAAe;IACxC,WAAW,GAAG,OAAO,CAAC;AACxB,CAAC;AAED,IAAI,WAAW,GAAG,EAAE,CAAC;AAErB,WAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC7B,OAAO;QACL,GAAG,EAAE;YACH,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;YACb,OAAO,EAAE,WAAE,CAAC,EAAE,EAAE;SACjB;KACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,WAAE,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACxD,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAC7B,CAAC;AAEF,MAAM,YAAY,GAAG,WAAE;KACpB,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;KAC/B,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAErD,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,WAAW,GAAG,EAAE,CAAC;QACjB,WAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,WAAE,CAAC,IAAI,CAAC;QACN;YACE,uBAAuB;YACvB;;;;;;;;;;;;;;;;;;CAkBL;YACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BL;SACI;QACD;YACE,0BAA0B;YAC1B;;;;;;;;;;;;;;;;;;;;CAoBL;YACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BL;SACI;QACD;YACE,qBAAqB;YACrB;;;;;;;CAOL;YACK;;;;;;;;;;;;;;;;;CAiBL;SACI;KACF,CAAC,CACA,yDAAyD,EACzD,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE;QACtC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAEhC,MAAM,SAAS,GAAG,MAAM,IAAA,sBAAgB,EAAC,EAAE,CAAC,CAAC;QAE7C,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;QAClD,IAAA,eAAM,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CACF,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'fs';\nimport { enableSourcemaps } from '../../../src/sourcemaps/tools/tsc';\n\nimport { vi, it, describe, expect, afterEach } from 'vitest';\n\nfunction updateFileContent(content: string): void {\n  fileContent = content;\n}\n\nlet fileContent = '';\n\nvi.mock('@clack/prompts', () => {\n  return {\n    log: {\n      info: vi.fn(),\n      success: vi.fn(),\n    },\n  };\n});\n\nvi.spyOn(fs.promises, 'readFile').mockImplementation(() =>\n  Promise.resolve(fileContent),\n);\n\nconst writeFileSpy = vi\n  .spyOn(fs.promises, 'writeFile')\n  .mockImplementation(() => Promise.resolve(void 0));\n\ndescribe('enableSourcemaps', () => {\n  afterEach(() => {\n    fileContent = '';\n    vi.clearAllMocks();\n  });\n\n  it.each([\n    [\n      'no sourcemaps options',\n      `\n/**\n * My TS config with comments\n */\n{\n  \"extends\": \"./tsconfig.build.json\",\n\n  \"compilerOptions\": {\n    // line comment which should stay\n    \"moduleResolution\": \"node16\",\n    \"outDir\": \"dist\" // another inline comment\n  },\n\n  \"include\": [\n    \"src/**/*\",\n    \"test/**/*\"\n  ]\n}\n`,\n      `\n/**\n * My TS config with comments\n */\n{\n  \"extends\": \"./tsconfig.build.json\",\n\n  \"compilerOptions\": {\n    // line comment which should stay\n    \"moduleResolution\": \"node16\",\n\n    // another inline comment\n    \"outDir\": \"dist\",\n\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n\n    // Set \\`sourceRoot\\` to  \"/\" to strip the build path prefix\n    // from generated source code references.\n    // This improves issue grouping in Sentry.\n    \"sourceRoot\": \"/\"\n  },\n\n  \"include\": [\n    \"src/**/*\",\n    \"test/**/*\"\n  ]\n}\n`,\n    ],\n    [\n      'a few sourcemaps options',\n      `\n/**\n * My TS config with comments\n */\n{\n  \"extends\": \"./tsconfig.build.json\",\n\n  \"compilerOptions\": {\n    // line comment which should stay\n    \"moduleResolution\": \"node16\",\n    \"outDir\": \"dist\", // another inline comment\n    \"sourceMap\": false,\n    \"sourceRoot\": \"/src\"\n  },\n\n  \"include\": [\n    \"src/**/*\",\n    \"test/**/*\"\n  ]\n}\n`,\n      `\n/**\n * My TS config with comments\n */\n{\n  \"extends\": \"./tsconfig.build.json\",\n\n  \"compilerOptions\": {\n    // line comment which should stay\n    \"moduleResolution\": \"node16\",\n\n    // another inline comment\n    \"outDir\": \"dist\",\n\n    \"sourceMap\": true,\n\n    // Set \\`sourceRoot\\` to  \"/\" to strip the build path prefix\n    // from generated source code references.\n    // This improves issue grouping in Sentry.\n    \"sourceRoot\": \"/\",\n\n    \"inlineSources\": true\n  },\n\n  \"include\": [\n    \"src/**/*\",\n    \"test/**/*\"\n  ]\n}\n`,\n    ],\n    [\n      'no compiler options',\n      `\n{\n    \"include\": [\n        \"src/**/*\",\n        \"test/**/*\"\n    ]\n}\n`,\n      `\n{\n    \"include\": [\n        \"src/**/*\",\n        \"test/**/*\"\n    ],\n\n    \"compilerOptions\": {\n        \"sourceMap\": true,\n        \"inlineSources\": true,\n\n        // Set \\`sourceRoot\\` to  \"/\" to strip the build path prefix\n        // from generated source code references.\n        // This improves issue grouping in Sentry.\n        \"sourceRoot\": \"/\"\n    }\n}\n`,\n    ],\n  ])(\n    'adds the plugin and enables source maps generation (%s)',\n    async (_, originalCode, expectedCode) => {\n      updateFileContent(originalCode);\n\n      const addedCode = await enableSourcemaps('');\n\n      expect(writeFileSpy).toHaveBeenCalledTimes(1);\n      const [[, fileContent]] = writeFileSpy.mock.calls;\n      expect(fileContent).toBe(expectedCode);\n      expect(addedCode).toBe(true);\n    },\n  );\n});\n"]}