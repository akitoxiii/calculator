{"version":3,"file":"esbuild.js","sourceRoot":"","sources":["../../../../src/sourcemaps/tools/esbuild.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+EAA+E;AAC/E,0DAA+C;AAC/C,kDAA0B;AAC1B,6CAK2B;AAC3B,2DAA+D;AAO/D,MAAM,cAAc,GAAG,CAAC,OAAgD,EAAE,EAAE,CAC1E,eAAK,CAAC,IAAI,CAAC;EACX,eAAK,CAAC,WAAW,CACjB,oEAAoE,CACrE;;;IAGG,eAAK,CAAC,WAAW,CACjB,6DAA6D,CAC9D;;;MAGG,eAAK,CAAC,WAAW,CAAC;;cAEV,OAAO,CAAC,OAAO;kBACX,OAAO,CAAC,WAAW,KAC/B,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAC1D;QACI,CAAC;;;CAGR,CAAC,CAAC;AAEI,MAAM,sBAAsB,GACjC,KAAK,EAAE,OAAO,EAAE,EAAE;IAChB,MAAM,IAAA,sBAAc,EAAC;QACnB,WAAW,EAAE,wBAAwB;QACrC,gBAAgB,EAAE,IAAA,kCAAmB,EACnC,wBAAwB,EACxB,MAAM,IAAA,yBAAiB,GAAE,CAC1B;KACF,CAAC,CAAC;IAEH,iBAAK,CAAC,GAAG,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;IAEjE,8FAA8F;IAC9F,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IAErC,MAAM,IAAA,wBAAgB,EACpB,IAAA,gBAAM,EAAC;QACL,OAAO,EAAE,iCAAiC;QAC1C,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QACnD,YAAY,EAAE,IAAI;KACnB,CAAC,CACH,CAAC;IAEF,MAAM,IAAA,sCAA8B,EAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC1D,CAAC,CAAC;AAzBS,QAAA,sBAAsB,0BAyB/B","sourcesContent":["// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport clack, { select } from '@clack/prompts';\nimport chalk from 'chalk';\nimport {\n  abortIfCancelled,\n  addDotEnvSentryBuildPluginFile,\n  getPackageDotJson,\n  installPackage,\n} from '../../utils/clack';\nimport { hasPackageInstalled } from '../../utils/package-json';\n\nimport {\n  SourceMapUploadToolConfigurationFunction,\n  SourceMapUploadToolConfigurationOptions,\n} from './types';\n\nconst getCodeSnippet = (options: SourceMapUploadToolConfigurationOptions) =>\n  chalk.gray(`\n${chalk.greenBright(\n  'const { sentryEsbuildPlugin } = require(\"@sentry/esbuild-plugin\");',\n)}\n\nrequire(\"esbuild\").build({\n  ${chalk.greenBright(\n    'sourcemap: true, // Source map generation must be turned on',\n  )}\n  plugins: [\n    // Put the Sentry esbuild plugin after all other plugins\n    ${chalk.greenBright(`sentryEsbuildPlugin({\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n      org: \"${options.orgSlug}\",\n      project: \"${options.projectSlug}\",${\n      options.selfHosted ? `\\n      url: \"${options.url}\",` : ''\n    }\n    }),`)}\n  ],\n});\n`);\n\nexport const configureEsbuildPlugin: SourceMapUploadToolConfigurationFunction =\n  async (options) => {\n    await installPackage({\n      packageName: '@sentry/esbuild-plugin',\n      alreadyInstalled: hasPackageInstalled(\n        '@sentry/esbuild-plugin',\n        await getPackageDotJson(),\n      ),\n    });\n\n    clack.log.step(`Add the following code to your esbuild config:`);\n\n    // Intentially logging directly to console here so that the code can be copied/pasted directly\n    // eslint-disable-next-line no-console\n    console.log(getCodeSnippet(options));\n\n    await abortIfCancelled(\n      select({\n        message: 'Did you copy the snippet above?',\n        options: [{ label: 'Yes, continue!', value: true }],\n        initialValue: true,\n      }),\n    );\n\n    await addDotEnvSentryBuildPluginFile(options.authToken);\n  };\n"]}