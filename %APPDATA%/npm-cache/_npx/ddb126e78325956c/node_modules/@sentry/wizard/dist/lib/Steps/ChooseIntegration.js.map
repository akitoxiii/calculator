{"version":3,"file":"ChooseIntegration.js","sourceRoot":"","sources":["../../../lib/Steps/ChooseIntegration.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Answers } from 'inquirer';\nimport { prompt } from 'inquirer';\n\nimport { readFileSync } from 'node:fs';\nimport { hasPackageInstalled } from '../../src/utils/package-json';\nimport {\n  Args,\n  DEFAULT_URL,\n  getIntegrationChoices,\n  Integration,\n} from '../Constants';\nimport { dim, red } from '../Helper/Logging';\nimport { BaseStep } from './BaseStep';\nimport { Cordova } from './Integrations/Cordova';\nimport { Electron } from './Integrations/Electron';\n\nfunction getProjectPackage(): Record<string, unknown> {\n  let projectPackage: Record<string, unknown> = {};\n\n  const projectPackagePathCandidates = [\n    // If we run directly in setup-wizard\n    '../../package.json',\n\n    // If we run from the CLI\n    `${process.cwd()}/package.json`,\n  ];\n\n  for (const pathCandidate of projectPackagePathCandidates) {\n    let data: string;\n    try {\n      data = readFileSync(pathCandidate, 'utf-8');\n    } catch (error) {\n      // If the file does not exist, continue to the next candidate\n      continue;\n    }\n\n    try {\n      projectPackage = JSON.parse(data) as Record<string, unknown>;\n      break;\n    } catch (error) {\n      // If the file exists but is not valid JSON, log an error and continue.\n      // Note: we don't want to crash the wizard if the package.json is invalid,\n      // because it is only use by the integration detection logic.\n      // Furthmore other package managers, i.e. bun, allow JSON-with-comments which might\n      // throw errors with JSON.parse, and will require a different JSON parser in the future.\n      red(\n        `Failed to parse JSON from ${pathCandidate}, is your file a valid package.json?`,\n      );\n    }\n  }\n\n  return projectPackage;\n}\n\ntype IntegrationPromptAnswer = {\n  integration: Integration;\n};\n\nexport class ChooseIntegration extends BaseStep {\n  public async emit(_answers: Answers): Promise<Answers> {\n    const integrationPrompt = await this._getIntegrationPromptSelection();\n\n    let integration = null;\n    switch (integrationPrompt.integration) {\n      case Integration.cordova:\n        integration = new Cordova(sanitizeUrl(this._argv));\n        break;\n      case Integration.electron:\n        integration = new Electron(sanitizeUrl(this._argv));\n        break;\n    }\n\n    return { integration };\n  }\n\n  public tryDetectingIntegration(): Integration | undefined {\n    const projectPackage = getProjectPackage();\n\n    if (hasPackageInstalled('react-native', projectPackage)) {\n      return Integration.reactNative;\n    }\n    if (hasPackageInstalled('cordova', projectPackage)) {\n      return Integration.cordova;\n    }\n    if (hasPackageInstalled('electron', projectPackage)) {\n      return Integration.electron;\n    }\n    if (hasPackageInstalled('next', projectPackage)) {\n      return Integration.nextjs;\n    }\n    if (hasPackageInstalled('remix-run', projectPackage)) {\n      return Integration.remix;\n    }\n    if (hasPackageInstalled('@sveltejs/kit', projectPackage)) {\n      return Integration.sveltekit;\n    }\n\n    return;\n  }\n\n  private async _getIntegrationPromptSelection(): Promise<IntegrationPromptAnswer> {\n    // If we receive project type as an arg we skip asking\n    if (this._argv.integration) {\n      return { integration: this._argv.integration };\n    } else {\n      if (this._argv.quiet) {\n        throw new Error('You need to choose a platform');\n      }\n\n      const detectedDefaultSelection = this.tryDetectingIntegration();\n\n      return prompt([\n        {\n          choices: getIntegrationChoices(),\n          default: detectedDefaultSelection,\n          message: 'What platform do you want to set up?',\n          name: 'integration',\n          type: 'list',\n          pageSize: 10,\n        },\n      ]);\n    }\n  }\n}\n\n/**\n * For the `clack`-based wizard flows, which we only shim here, we don't set\n * a default url value. For backwards-compatibility with the other flows,\n * we fill it here and sanitize a user-enterd url.\n */\nfunction sanitizeUrl(argv: Args): Args {\n  if (!argv.url) {\n    argv.url = DEFAULT_URL;\n    dim(`no URL provided, fallback to ${argv.url}`);\n    return argv;\n  }\n\n  let baseUrl = argv.url;\n  baseUrl += baseUrl.endsWith('/') ? '' : '/';\n  baseUrl = baseUrl.replace(/:\\/(?!\\/)/g, '://');\n  argv.url = baseUrl;\n\n  return argv;\n}\n"]}