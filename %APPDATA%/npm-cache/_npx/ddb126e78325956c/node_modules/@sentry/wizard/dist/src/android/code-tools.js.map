{"version":3,"file":"code-tools.js","sourceRoot":"","sources":["../../../src/android/code-tools.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as Sentry from '@sentry/node';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport {\n  sentryImport,\n  sentryImportKt,\n  testErrorSnippet,\n  testErrorSnippetKt,\n} from './templates';\nimport { findFile } from '../utils/ast-utils';\n\n/**\n * Looks in src/main/java or src/main/kotlin for the specified {@link packageName} and\n * {@link activityName} by concatenating them. For example:\n *\n * src/\n *   main/\n *     java/ or kotlin/\n *       my.package.name/\n *         ui/\n *           MainActivity.kt\n *\n * src/main/java can contain both .java and .kt sources, whilst src/main/kotlin only .kt\n *\n * @param appDir\n * @param packageName\n * @param activityName\n * @returns path to the Main Activity\n */\nexport function findActivitySourceFile(\n  appDir: string,\n  packageName: string,\n  activityName: string,\n): string | undefined {\n  const javaSrcDir = path.join(appDir, 'src', 'main', 'java');\n  let possibleActivityPath;\n  // if activity name starts with a dot, this means we need to concat packagename with it, otherwise\n  // the package name is already specified in the activity name itself\n  const packageNameParts = activityName.startsWith('.')\n    ? packageName.split('.')\n    : [];\n  const activityNameParts = activityName.split('.');\n\n  if (fs.existsSync(javaSrcDir)) {\n    possibleActivityPath = findFile(\n      path.join(javaSrcDir, ...packageNameParts, ...activityNameParts),\n      ['.kt', '.java'],\n    );\n  }\n\n  if (!possibleActivityPath || !fs.existsSync(possibleActivityPath)) {\n    const kotlinSrcDir = path.join(appDir, 'src', 'main', 'kotlin');\n    if (fs.existsSync(kotlinSrcDir)) {\n      possibleActivityPath = findFile(\n        path.join(kotlinSrcDir, ...packageNameParts, ...activityNameParts),\n        ['.kt'],\n      );\n    }\n  }\n  return possibleActivityPath;\n}\n\n/**\n * Patches Main Activity with the test error code snippet by the specified path {@link activityFile}.\n * Finds activity's `onCreate` method, adds the snippet and necessary imports.\n *\n * ```kotlin\n * import something\n * import something.something\n * import io.sentry.Sentry <-- this is added by us\n *\n * override fun onCreate(savedInstanceState: Bundle?) {\n *   super.onCreate(savedInstanceState)\n *   // the snippet goes here <--\n *   doSomething()\n * }\n * ```\n *\n * @param activityFile\n * @returns true if successfully patched, false otherwise\n */\nexport function patchMainActivity(activityFile: string | undefined): boolean {\n  if (!activityFile || !fs.existsSync(activityFile)) {\n    clack.log.warn('No main activity source file found in filesystem.');\n    Sentry.captureException('No main activity source file');\n    return false;\n  }\n\n  const activityContent = fs.readFileSync(activityFile, 'utf8');\n\n  if (/import\\s+io\\.sentry\\.Sentry;?/i.test(activityContent)) {\n    // sentry is already configured\n    clack.log.success(\n      chalk.greenBright(\n        `${chalk.bold(\n          'Main Activity',\n        )} is already patched with test error snippet.`,\n      ),\n    );\n    return true;\n  }\n\n  const importIndex = getLastImportLineLocation(activityContent);\n\n  let newActivityContent;\n  if (activityFile.endsWith('.kt')) {\n    newActivityContent =\n      activityContent.slice(0, importIndex) +\n      sentryImportKt +\n      activityContent.slice(importIndex);\n  } else {\n    newActivityContent =\n      activityContent.slice(0, importIndex) +\n      sentryImport +\n      activityContent.slice(importIndex);\n  }\n\n  const onCreateMatch = /super\\.onCreate\\(.*?\\);?/i.exec(newActivityContent);\n  if (!onCreateMatch) {\n    clack.log.warn('No onCreate method found in main activity.');\n    Sentry.captureException('No onCreate method');\n    return false;\n  }\n\n  const onCreateIndex = onCreateMatch.index + onCreateMatch[0].length;\n  if (activityFile.endsWith('.kt')) {\n    newActivityContent =\n      newActivityContent.slice(0, onCreateIndex) +\n      testErrorSnippetKt +\n      newActivityContent.slice(onCreateIndex);\n  } else {\n    newActivityContent =\n      newActivityContent.slice(0, onCreateIndex) +\n      testErrorSnippet +\n      newActivityContent.slice(onCreateIndex);\n  }\n  fs.writeFileSync(activityFile, newActivityContent, 'utf8');\n\n  clack.log.success(\n    chalk.greenBright(\n      `Patched ${chalk.bold(\n        'Main Activity',\n      )} with the Sentry test error snippet.`,\n    ),\n  );\n\n  return true;\n}\n\n/**\n * Returns the string index of the last import statement in the given code file.\n * Works for both Java and Kotlin import statements.\n *\n * @param sourceCode\n * @returns the insert index, or 0 if none found.\n */\nexport function getLastImportLineLocation(sourceCode: string): number {\n  const importRegex = /import(?:\\sstatic)?\\s+[\\w.*]+(?: as [\\w.]+)?;?/gim;\n\n  let importsMatch = importRegex.exec(sourceCode);\n  let importIndex = 0;\n  while (importsMatch) {\n    importIndex = importsMatch.index + importsMatch[0].length + 1;\n    importsMatch = importRegex.exec(sourceCode);\n  }\n  return importIndex;\n}\n"]}