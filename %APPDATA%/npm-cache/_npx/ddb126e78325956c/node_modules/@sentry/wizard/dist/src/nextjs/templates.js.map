{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../../src/nextjs/templates.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { makeCodeSnippet } from '../utils/clack';\n\ntype WithSentryConfigOptions = {\n  orgSlug: string;\n  projectSlug: string;\n  selfHosted: boolean;\n  sentryUrl: string;\n  tunnelRoute: boolean;\n};\n\nexport function getWithSentryConfigOptionsTemplate({\n  orgSlug,\n  projectSlug,\n  selfHosted,\n  tunnelRoute,\n  sentryUrl,\n}: WithSentryConfigOptions): string {\n  return `{\n    // For all available options, see:\n    // https://www.npmjs.com/package/@sentry/webpack-plugin#options\n\n    org: \"${orgSlug}\",\n    project: \"${projectSlug}\",${\n    selfHosted ? `\\n    sentryUrl: \"${sentryUrl}\",` : ''\n  }\n\n    // Only print logs for uploading source maps in CI\n    silent: !process.env.CI,\n\n    // For all available options, see:\n    // https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/\n\n    // Upload a larger set of source maps for prettier stack traces (increases build time)\n    widenClientFileUpload: true,\n\n    // ${\n      tunnelRoute ? 'Route' : 'Uncomment to route'\n    } browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.\n    // This can increase your server load as well as your hosting bill.\n    // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-\n    // side errors will fail.\n    ${tunnelRoute ? '' : '// '}tunnelRoute: \"/monitoring\",\n\n    // Automatically tree-shake Sentry logger statements to reduce bundle size\n    disableLogger: true,\n\n    // Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)\n    // See the following for more information:\n    // https://docs.sentry.io/product/crons/\n    // https://vercel.com/docs/cron-jobs\n    automaticVercelMonitors: true,\n  }`;\n}\n\nexport function getNextjsConfigCjsTemplate(\n  withSentryConfigOptionsTemplate: string,\n): string {\n  return `const { withSentryConfig } = require(\"@sentry/nextjs\");\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withSentryConfig(\n  nextConfig,\n  ${withSentryConfigOptionsTemplate}\n);\n`;\n}\n\nexport function getNextjsConfigMjsTemplate(\n  withSentryConfigOptionsTemplate: string,\n): string {\n  return `import { withSentryConfig } from \"@sentry/nextjs\";\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nexport default withSentryConfig(\n  nextConfig,\n  ${withSentryConfigOptionsTemplate}\n);\n`;\n}\n\nexport function getNextjsConfigCjsAppendix(\n  withSentryConfigOptionsTemplate: string,\n): string {\n  return `\n\n// Injected content via Sentry wizard below\n\nconst { withSentryConfig } = require(\"@sentry/nextjs\");\n\nmodule.exports = withSentryConfig(\n  module.exports,\n  ${withSentryConfigOptionsTemplate}\n);\n`;\n}\n\nexport function getNextjsConfigEsmCopyPasteSnippet(\n  withSentryConfigOptionsTemplate: string,\n): string {\n  return `\n\n// next.config.mjs\nimport { withSentryConfig } from \"@sentry/nextjs\";\n\nexport default withSentryConfig(\n  yourNextConfig,\n  ${withSentryConfigOptionsTemplate}\n);\n`;\n}\n\nfunction getClientIntegrationsSnippet(features: { replay: boolean }) {\n  if (features.replay) {\n    return `\n\n  // Add optional integrations for additional features\n  integrations: [\n    Sentry.replayIntegration(),\n  ],`;\n  }\n\n  return '';\n}\n\nexport function getSentryServersideConfigContents(\n  dsn: string,\n  config: 'server' | 'edge',\n  selectedFeaturesMap: {\n    replay: boolean;\n    performance: boolean;\n  },\n): string {\n  let primer;\n  if (config === 'server') {\n    primer = `// This file configures the initialization of Sentry on the server.\n// The config you add here will be used whenever the server handles a request.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/`;\n  } else if (config === 'edge') {\n    primer = `// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n// The config you add here will be used whenever one of the edge features is loaded.\n// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/`;\n  }\n\n  let performanceOptions = '';\n  if (selectedFeaturesMap.performance) {\n    performanceOptions += `\n\n  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n  tracesSampleRate: 1,`;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  return `${primer}\n\nimport * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: \"${dsn}\",${performanceOptions}\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: false,\n});\n`;\n}\n\nexport function getInstrumentationClientFileContents(\n  dsn: string,\n  selectedFeaturesMap: {\n    replay: boolean;\n    performance: boolean;\n  },\n): string {\n  const integrationsOptions = getClientIntegrationsSnippet({\n    replay: selectedFeaturesMap.replay,\n  });\n\n  let replayOptions = '';\n\n  if (selectedFeaturesMap.replay) {\n    replayOptions += `\n\n  // Define how likely Replay events are sampled.\n  // This sets the sample rate to be 10%. You may want this to be 100% while\n  // in development and sample at a lower rate in production\n  replaysSessionSampleRate: 0.1,\n\n  // Define how likely Replay events are sampled when an error occurs.\n  replaysOnErrorSampleRate: 1.0,`;\n  }\n\n  let performanceOptions = '';\n  if (selectedFeaturesMap.performance) {\n    performanceOptions += `\n\n  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n  tracesSampleRate: 1,`;\n  }\n\n  return `// This file configures the initialization of Sentry on the client.\n// The added config here will be used whenever a users loads a page in their browser.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\nimport * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: \"${dsn}\",${integrationsOptions}${performanceOptions}${replayOptions}\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: false,\n});\n\nexport const onRouterTransitionStart = Sentry.captureRouterTransitionStart;`;\n}\n\nexport function getSentryExamplePageContents(options: {\n  selfHosted: boolean;\n  sentryUrl: string;\n  orgSlug: string;\n  projectId: string;\n  useClient: boolean;\n}): string {\n  const issuesPageLink = options.selfHosted\n    ? `${options.sentryUrl}organizations/${options.orgSlug}/issues/?project=${options.projectId}`\n    : `https://${options.orgSlug}.sentry.io/issues/?project=${options.projectId}`;\n\n  return `${\n    options.useClient ? '\"use client\";\\n\\n' : ''\n  }import Head from \"next/head\";\nimport * as Sentry from \"@sentry/nextjs\";\nimport { useState, useEffect } from \"react\";\n\nclass SentryExampleFrontendError extends Error {\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = \"SentryExampleFrontendError\";\n  }\n}\n\nexport default function Page() {\n  const [hasSentError, setHasSentError] = useState(false);\n  const [isConnected, setIsConnected] = useState(true);\n  \n  useEffect(() => {\n    async function checkConnectivity() {\n      const result = await Sentry.diagnoseSdkConnectivity();\n      setIsConnected(result !== 'sentry-unreachable');\n    }\n    checkConnectivity();\n  }, []);\n\n  return (\n    <div>\n      <Head>\n        <title>sentry-example-page</title>\n        <meta name=\"description\" content=\"Test Sentry for your Next.js app!\" />\n      </Head>\n\n      <main>\n        <div className=\"flex-spacer\" />\n        <svg height=\"40\" width=\"40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M21.85 2.995a3.698 3.698 0 0 1 1.353 1.354l16.303 28.278a3.703 3.703 0 0 1-1.354 5.053 3.694 3.694 0 0 1-1.848.496h-3.828a31.149 31.149 0 0 0 0-3.09h3.815a.61.61 0 0 0 .537-.917L20.523 5.893a.61.61 0 0 0-1.057 0l-3.739 6.494a28.948 28.948 0 0 1 9.63 10.453 28.988 28.988 0 0 1 3.499 13.78v1.542h-9.852v-1.544a19.106 19.106 0 0 0-2.182-8.85 19.08 19.08 0 0 0-6.032-6.829l-1.85 3.208a15.377 15.377 0 0 1 6.382 12.484v1.542H3.696A3.694 3.694 0 0 1 0 34.473c0-.648.17-1.286.494-1.849l2.33-4.074a8.562 8.562 0 0 1 2.689 1.536L3.158 34.17a.611.611 0 0 0 .538.917h8.448a12.481 12.481 0 0 0-6.037-9.09l-1.344-.772 4.908-8.545 1.344.77a22.16 22.16 0 0 1 7.705 7.444 22.193 22.193 0 0 1 3.316 10.193h3.699a25.892 25.892 0 0 0-3.811-12.033 25.856 25.856 0 0 0-9.046-8.796l-1.344-.772 5.269-9.136a3.698 3.698 0 0 1 3.2-1.849c.648 0 1.285.17 1.847.495Z\" fill=\"currentcolor\"/>\n        </svg>\n        <h1>\n          sentry-example-page\n        </h1>\n\n        <p className=\"description\">\n          Click the button below, and view the sample error on the Sentry <a target=\"_blank\" href=\"${issuesPageLink}\">Issues Page</a>.\n          For more details about setting up Sentry, <a target=\"_blank\" href=\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\">read our docs</a>.\n        </p>\n\n        <button\n          type=\"button\"\n          onClick={async () => {\n            await Sentry.startSpan({\n              name: 'Example Frontend Span',\n              op: 'test'\n            }, async () => {\n              const res = await fetch(\"/api/sentry-example-api\");\n              if (!res.ok) {\n                setHasSentError(true);\n                throw new SentryExampleFrontendError(\"This error is raised on the frontend of the example page.\");\n              }\n            });\n          }}\n        >\n          <span>\n            Throw Sample Error\n          </span>\n        </button>\n\n        {hasSentError ? (\n          <p className=\"success\">\n            Sample error was sent to Sentry.\n          </p>\n        ) : !isConnected ? (\n          <div className=\"connectivity-error\">\n            <p>The Sentry SDK is not able to reach Sentry right now - this may be due to an adblocker. For more information, see <a target=\"_blank\" href=\"https://docs.sentry.io/platforms/javascript/guides/nextjs/troubleshooting/#the-sdk-is-not-sending-any-data\">the troubleshooting guide</a>.</p>\n          </div>\n        ) : (\n          <div className=\"success_placeholder\" />\n        )}\n\n        <div className=\"flex-spacer\" />\n        \n        <p className=\"description\">\n          Adblockers will prevent errors from being sent to Sentry.\n        </p>\n      </main>\n\n      <style>{\\`\n        main {\n          display: flex;\n          min-height: 100vh;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          gap: 16px;\n          padding: 16px;\n          font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif;\n        }\n\n        h1 {\n          padding: 0px 4px;\n          border-radius: 4px;\n          background-color: rgba(24, 20, 35, 0.03);\n          font-family: monospace;\n          font-size: 20px;\n          line-height: 1.2;\n        }\n\n        p {\n          margin: 0;\n          font-size: 20px;\n        }\n\n        a {\n          color: #6341F0;\n          text-decoration: underline;\n          cursor: pointer;\n\n          @media (prefers-color-scheme: dark) {\n            color: #B3A1FF;\n          }\n        }\n\n        button {\n          border-radius: 8px;\n          color: white;\n          cursor: pointer;\n          background-color: #553DB8;\n          border: none;\n          padding: 0;\n          margin-top: 4px;\n\n          & > span {\n            display: inline-block;\n            padding: 12px 16px;\n            border-radius: inherit;\n            font-size: 20px;\n            font-weight: bold;\n            line-height: 1;\n            background-color: #7553FF;\n            border: 1px solid #553DB8;\n            transform: translateY(-4px);\n          }\n\n          &:hover > span {\n            transform: translateY(-8px);\n          }\n\n          &:active > span {\n            transform: translateY(0);\n          }\n        }\n\n        .description {\n          text-align: center;\n          color: #6E6C75;\n          max-width: 500px;\n          line-height: 1.5;\n          font-size: 20px;\n\n          @media (prefers-color-scheme: dark) {\n            color: #A49FB5;\n          }\n        }\n\n        .flex-spacer {\n          flex: 1;\n        }\n\n        .success {\n          padding: 12px 16px;\n          border-radius: 8px;\n          font-size: 20px;\n          line-height: 1;\n          background-color: #00F261;\n          border: 1px solid #00BF4D;\n          color: #181423;\n        }\n\n        .success_placeholder {\n          height: 46px;\n        }\n\n        .connectivity-error {\n          padding: 12px 16px;\n          background-color: #E50045;\n          border-radius: 8px;\n          width: 500px;\n          color: #FFFFFF;\n          border: 1px solid #A80033;\n          text-align: center;\n          margin: 0;\n        }\n        \n        .connectivity-error a {\n          color: #FFFFFF;\n          text-decoration: underline;\n        }\n      \\`}</style>\n    </div>\n  );\n}\n`;\n}\n\nexport function getSentryExamplePagesDirApiRoute() {\n  return `// Custom error class for Sentry testing\nclass SentryExampleAPIError extends Error {\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = \"SentryExampleAPIError\";\n  }\n}\n// A faulty API route to test Sentry's error monitoring\nexport default function handler(_req, res) {\nthrow new SentryExampleAPIError(\"This error is raised on the backend called by the example page.\");\nres.status(200).json({ name: \"John Doe\" });\n}\n`;\n}\n\nexport function getSentryExampleAppDirApiRoute() {\n  return `import { NextResponse } from \"next/server\";\n\nexport const dynamic = \"force-dynamic\";\nclass SentryExampleAPIError extends Error {\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = \"SentryExampleAPIError\";\n  }\n}\n// A faulty API route to test Sentry's error monitoring\nexport function GET() {\n  throw new SentryExampleAPIError(\"This error is raised on the backend called by the example page.\");\n  return NextResponse.json({ data: \"Testing Sentry Error...\" });\n}\n`;\n}\n\nexport function getSentryDefaultUnderscoreErrorPage() {\n  return `import * as Sentry from \"@sentry/nextjs\";\nimport Error from \"next/error\";\n\nconst CustomErrorComponent = (props) => {\n  return <Error statusCode={props.statusCode} />;\n};\n\nCustomErrorComponent.getInitialProps = async (contextData) => {\n  // In case this is running in a serverless function, await this in order to give Sentry\n  // time to send the error before the lambda exits\n  await Sentry.captureUnderscoreErrorException(contextData);\n\n  // This will contain the status code of the response\n  return Error.getInitialProps(contextData);\n};\n\nexport default CustomErrorComponent;\n`;\n}\n\nexport function getSimpleUnderscoreErrorCopyPasteSnippet() {\n  return `\n${chalk.green(`import * as Sentry from '@sentry/nextjs';`)}\n${chalk.green(`import Error from \"next/error\";`)}\n\n${chalk.dim(\n  '// Replace \"YourCustomErrorComponent\" with your custom error component!',\n)}\nYourCustomErrorComponent.getInitialProps = async (${chalk.green(\n    'contextData',\n  )}) => {\n  ${chalk.green('await Sentry.captureUnderscoreErrorException(contextData);')}\n\n  ${chalk.dim('// ...other getInitialProps code')}\n\n  return Error.getInitialProps(contextData);\n};\n`;\n}\n\nexport function getFullUnderscoreErrorCopyPasteSnippet(isTs: boolean) {\n  return `\nimport * as Sentry from '@sentry/nextjs';${\n    isTs ? '\\nimport type { NextPageContext } from \"next\";' : ''\n  }\nimport Error from \"next/error\";\n\n${chalk.dim(\n  '// Replace \"YourCustomErrorComponent\" with your custom error component!',\n)}\nYourCustomErrorComponent.getInitialProps = async (contextData${\n    isTs ? ': NextPageContext' : ''\n  }) => {\n  await Sentry.captureUnderscoreErrorException(contextData);\n\n  return Error.getInitialProps(contextData);\n};\n`;\n}\n\nexport function getInstrumentationHookContent(\n  instrumentationHookLocation: 'src' | 'root',\n) {\n  return `import * as Sentry from '@sentry/nextjs';\n\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('${\n      instrumentationHookLocation === 'root' ? '.' : '..'\n    }/sentry.server.config');\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('${\n      instrumentationHookLocation === 'root' ? '.' : '..'\n    }/sentry.edge.config');\n  }\n}\n\nexport const onRequestError = Sentry.captureRequestError;\n`;\n}\n\nexport function getInstrumentationHookCopyPasteSnippet(\n  instrumentationHookLocation: 'src' | 'root',\n) {\n  return makeCodeSnippet(true, (unchanged, plus) => {\n    return unchanged(`${plus(\"import * as Sentry from '@sentry/nextjs';\")}\n\nexport ${plus('async')} function register() {\n  ${plus(`if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('${\n      instrumentationHookLocation === 'root' ? '.' : '..'\n    }/sentry.server.config');\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('${\n      instrumentationHookLocation === 'root' ? '.' : '..'\n    }/sentry.edge.config');\n  }`)}\n}\n\n${plus('export const onRequestError = Sentry.captureRequestError;')}\n`);\n  });\n}\n\nexport function getInstrumentationClientHookCopyPasteSnippet(\n  dsn: string,\n  selectedFeaturesMap: {\n    replay: boolean;\n    performance: boolean;\n  },\n) {\n  return makeCodeSnippet(true, (unchanged, plus) => {\n    return plus(getInstrumentationClientFileContents(dsn, selectedFeaturesMap));\n  });\n}\n\nexport function getSentryDefaultGlobalErrorPage(isTs: boolean) {\n  return isTs\n    ? `\"use client\";\n\nimport * as Sentry from \"@sentry/nextjs\";\nimport NextError from \"next/error\";\nimport { useEffect } from \"react\";\n\nexport default function GlobalError({ error }: { error: Error & { digest?: string } }) {\n  useEffect(() => {\n    Sentry.captureException(error);\n  }, [error]);\n\n  return (\n    <html>\n      <body>\n        {/* \\`NextError\\` is the default Next.js error page component. Its type\n        definition requires a \\`statusCode\\` prop. However, since the App Router\n        does not expose status codes for errors, we simply pass 0 to render a\n        generic error message. */}\n        <NextError statusCode={0} />\n      </body>\n    </html>\n  );\n}`\n    : `\"use client\";\n\nimport * as Sentry from \"@sentry/nextjs\";\nimport NextError from \"next/error\";\nimport { useEffect } from \"react\";\n\nexport default function GlobalError({ error }) {\n  useEffect(() => {\n    Sentry.captureException(error);\n  }, [error]);\n\n  return (\n    <html>\n      <body>\n        {/* \\`NextError\\` is the default Next.js error page component. Its type\n        definition requires a \\`statusCode\\` prop. However, since the App Router\n        does not expose status codes for errors, we simply pass 0 to render a\n        generic error message. */}\n        <NextError statusCode={0} />\n      </body>\n    </html>\n  );\n}\n`;\n}\n\nexport function getGlobalErrorCopyPasteSnippet(isTs: boolean) {\n  if (isTs) {\n    return `\"use client\";\n\n${chalk.green('import * as Sentry from \"@sentry/nextjs\";')}\n${chalk.green('import Error from \"next/error\";')}\n${chalk.green('import { useEffect } from \"react\";')}\n\nexport default function GlobalError(${chalk.green(\n      '{ error }: { error: Error }',\n    )}) {\n  ${chalk.green(`useEffect(() => {\n    Sentry.captureException(error);\n  }, [error]);`)}\n\n  return (\n    <html>\n      <body>\n        {/* Your Error component here... */}\n      </body>\n    </html>\n  );\n}\n`;\n  }\n  return `\"use client\";\n\n${chalk.green('import * as Sentry from \"@sentry/nextjs\";')}\n${chalk.green('import Error from \"next/error\";')}\n${chalk.green('import { useEffect } from \"react\";')}\n\nexport default function GlobalError(${chalk.green('{ error }')}) {\n  ${chalk.green(`useEffect(() => {\n    Sentry.captureException(error);\n  }, [error]);`)}\n\n  return (\n    <html>\n      <body>\n        {/* Your Error component here... */}\n      </body>\n    </html>\n  );\n}\n`;\n}\n\nexport const getRootLayout = (\n  isTs: boolean,\n) => `// This file was generated by the Sentry wizard because we couldn't find a root layout file.\n// You can delete this file at any time.\n\nexport const metadata = {\n  title: 'Sentry NextJS Example',\n  description: 'Generated by Sentry',\n}\n\nexport default function RootLayout({\n  children,\n}${\n  isTs\n    ? `: {\n  children: React.ReactNode\n}`\n    : ''\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n`;\n"]}