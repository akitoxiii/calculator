{"version":3,"file":"tsc.js","sourceRoot":"","sources":["../../../../src/sourcemaps/tools/tsc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport * as recast from 'recast';\n\nimport * as Sentry from '@sentry/node';\n\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\n\nimport {\n  askForToolConfigPath,\n  createNewConfigFile,\n  makeCodeSnippet,\n  showCopyPasteInstructions,\n} from '../../utils/clack';\nimport {\n  findFile,\n  getOrSetObjectProperty,\n  parseJsonC,\n  printJsonC,\n  setOrUpdateObjectProperty,\n} from '../../utils/ast-utils';\nimport { debug } from '../../utils/debug';\n\nconst b = recast.types.builders;\n\nconst getCodeSnippet = (colors: boolean) =>\n  makeCodeSnippet(colors, (unchanged, plus, _) =>\n    unchanged(\n      `{\n  \"compilerOptions\": {\n    ${plus('\"sourceMap\": true,')}\n    ${plus('\"inlineSources\": true,')}\n\n    // Set \\`sourceRoot\\` to  \"/\" to strip the build path prefix from\n    // generated source code references. This will improve issue grouping in Sentry.\n    ${plus('\"sourceRoot\": \"/\"')}\n  }\n}`,\n    ),\n  );\n\nexport async function configureTscSourcemapGenerationFlow(): Promise<void> {\n  const tsConfigPath =\n    findFile(path.join(process.cwd(), 'tsconfig'), ['.json']) ??\n    (await askForToolConfigPath('TypeScript', 'tsconfig.json'));\n\n  let successfullyAdded = false;\n  if (tsConfigPath) {\n    successfullyAdded = await enableSourcemaps(tsConfigPath);\n  } else {\n    successfullyAdded = await createNewConfigFile(\n      path.join(process.cwd(), 'tsconfig.json'),\n      getCodeSnippet(false),\n    );\n    Sentry.setTag('created-new-config', successfullyAdded ? 'success' : 'fail');\n  }\n\n  if (successfullyAdded) {\n    Sentry.setTag('ast-mod', 'success');\n    clack.log.info(\n      `We recommend checking the ${\n        tsConfigPath ? 'modified' : 'added'\n      } file after the wizard finished to ensure it works with your build setup.`,\n    );\n  } else {\n    Sentry.setTag('ast-mod', 'fail');\n    await showCopyPasteInstructions({\n      filename: 'tsconfig.json',\n      codeSnippet: getCodeSnippet(true),\n      hint: 'This ensures that source maps are generated correctly',\n    });\n  }\n}\n\n/**\n * Modifies tsconfig.json (@param tsConfigPath) to enable source maps generation.\n *\n * Exported only for testing\n */\nexport async function enableSourcemaps(tsConfigPath: string): Promise<boolean> {\n  try {\n    const tsConfig = await fs.promises.readFile(tsConfigPath, 'utf-8');\n\n    const { ast, jsonObject } = parseJsonC(tsConfig.toString());\n\n    if (!jsonObject || !ast) {\n      // this will only happen if the input file isn't valid JSON-C\n      Sentry.setTag('ast-mod-fail-reason', 'original-file-invalid');\n      return false;\n    }\n\n    const compilerOptionsProp = getOrSetObjectProperty(\n      jsonObject,\n      'compilerOptions',\n      b.objectExpression([]),\n    );\n\n    const compilerOptionsObj = compilerOptionsProp.value;\n\n    if (!compilerOptionsObj || compilerOptionsObj.type !== 'ObjectExpression') {\n      // a valid compilerOptions prop should always be an object expression\n      Sentry.setTag('ast-mod-fail-reason', 'original-file-invalid');\n      return false;\n    }\n\n    setOrUpdateObjectProperty(\n      compilerOptionsObj,\n      'sourceMap',\n      b.booleanLiteral(true),\n    );\n\n    setOrUpdateObjectProperty(\n      compilerOptionsObj,\n      'inlineSources',\n      b.booleanLiteral(true),\n    );\n\n    setOrUpdateObjectProperty(\n      compilerOptionsObj,\n      'sourceRoot',\n      b.stringLiteral('/'),\n      'Set `sourceRoot` to  \"/\" to strip the build path prefix\\nfrom generated source code references.\\nThis improves issue grouping in Sentry.',\n    );\n\n    const code = printJsonC(ast);\n\n    await fs.promises.writeFile(tsConfigPath, code);\n\n    clack.log.success(\n      `Enabled source maps generation in ${chalk.cyan(\n        path.basename(tsConfigPath || 'tsconfig.json'),\n      )}.`,\n    );\n\n    return true;\n  } catch (e) {\n    debug(e);\n    Sentry.setTag('ast-mod-fail-reason', 'insertion-fail');\n    return false;\n  }\n}\n"]}