{"version":3,"file":"Cordova.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/Cordova.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Answers } from 'inquirer';\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport type { PBXShellScriptBuildPhase, Project } from 'xcode';\nimport xcode from 'xcode';\n\nimport type { Args } from '../../Constants';\nimport { exists, matchesContent, patchMatchingFile } from '../../Helper/File';\nimport { green } from '../../Helper/Logging';\nimport { SentryCli, SentryCliProps } from '../../Helper/SentryCli';\nimport { BaseIntegration } from './BaseIntegration';\n\nexport class Cordova extends BaseIntegration {\n  protected _sentryCli: SentryCli;\n\n  protected _folderPrefix = 'platforms';\n  protected _pluginFolder: string[] = ['.'];\n\n  public constructor(protected _argv: Args) {\n    super(_argv);\n    this._sentryCli = new SentryCli(this._argv);\n  }\n\n  public async emit(answers: Answers): Promise<Answers> {\n    if (this._argv.uninstall) {\n      return this.uninstall(answers);\n    }\n\n    const sentryCliProperties =\n      this._sentryCli.convertAnswersToProperties(answers);\n\n    await patchMatchingFile(\n      `${this._folderPrefix}/ios/*.xcodeproj/project.pbxproj`,\n      (contents, filename) => this._patchXcodeProj(contents, filename),\n    );\n\n    await this._addSentryProperties(sentryCliProperties);\n    green('Successfully set up for cordova');\n\n    return {};\n  }\n\n  public async uninstall(_answers: Answers): Promise<Answers> {\n    await patchMatchingFile('**/*.xcodeproj/project.pbxproj', (_, filename) =>\n      this._unpatchXcodeProj(filename),\n    );\n\n    return {};\n  }\n\n  public async shouldConfigure(_answers: Answers): Promise<Answers> {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n\n    let result = false;\n    if (!exists(path.join('sentry.properties'))) {\n      result = true;\n      this.debug('sentry.properties not exists');\n    }\n\n    if (\n      !matchesContent('**/*.xcodeproj/project.pbxproj', /SENTRY_PROPERTIES/gi)\n    ) {\n      result = true;\n      this.debug('**/*.xcodeproj/project.pbxproj not matched');\n    }\n\n    if (this._argv.uninstall) {\n      // if we uninstall we need to invert the result so we remove already patched\n      result = !result;\n    }\n\n    this._shouldConfigure = Promise.resolve({ cordova: result });\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    return this.shouldConfigure;\n  }\n\n  private _unpatchXcodeProj(filename: string): Promise<string> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        this._unpatchXcodeBuildScripts(proj);\n        resolve(proj.writeSync());\n      });\n    });\n  }\n\n  private _unpatchXcodeBuildScripts(proj: Project): void {\n    const scripts = proj.hash.project.objects.PBXShellScriptBuildPhase || {};\n\n    const firstTarget = proj.getFirstTarget()?.uuid || '';\n\n    const nativeTargets = proj.hash.project.objects.PBXNativeTarget;\n\n    // scripts to kill entirely.\n    for (const key of Object.keys(scripts)) {\n      const script = scripts[key];\n\n      // ignore comments and keys that got deleted\n      if (typeof script === 'string' || script === undefined) {\n        continue;\n      }\n\n      if (\n        script.shellScript?.match(/SENTRY_PROPERTIES/) ||\n        script.shellScript?.match(/SENTRY_FRAMEWORK_PATCH/)\n      ) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete scripts[key];\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete scripts[`${key}_comment`];\n        const target = nativeTargets && nativeTargets[firstTarget];\n        const phases = typeof target === 'object' && target.buildPhases;\n        if (phases) {\n          for (let i = 0; i < phases.length; i++) {\n            if (phases[i].value === key) {\n              phases.splice(i, 1);\n              break;\n            }\n          }\n        }\n        continue;\n      }\n    }\n  }\n\n  private _patchXcodeProj(\n    contents: string,\n    filename: string,\n  ): Promise<string | void> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const buildScripts: Array<PBXShellScriptBuildPhase> = [];\n        for (const val of Object.values(\n          proj.hash.project.objects.PBXShellScriptBuildPhase || {},\n        )) {\n          if (\n            typeof val === 'object' &&\n            val.isa === 'PBXShellScriptBuildPhase'\n          ) {\n            buildScripts.push(val);\n          }\n        }\n\n        this._addNewXcodeBuildPhaseForSymbols(buildScripts, proj);\n        this._addNewXcodeBuildPhaseForStripping(buildScripts, proj);\n\n        // we always modify the xcode file in memory but we only want to save it\n        // in case the user wants configuration for ios.  This is why we check\n        // here first if changes are made before we might prompt the platform\n        // continue prompt.\n        const newContents = proj.writeSync();\n        if (newContents === contents) {\n          resolve();\n        } else {\n          resolve(newContents);\n        }\n      });\n    });\n  }\n\n  private _addNewXcodeBuildPhaseForSymbols(\n    buildScripts: Array<PBXShellScriptBuildPhase | string>,\n    proj: Project,\n  ): void {\n    for (const script of buildScripts) {\n      if (\n        typeof script === 'object' &&\n        script.shellScript?.match(/SENTRY_PROPERTIES/)\n      ) {\n        return;\n      }\n    }\n    const cwd = path.join(process.cwd(), 'sentry.properties');\n    proj.addBuildPhase(\n      [],\n      'PBXShellScriptBuildPhase',\n      'Upload Debug Symbols to Sentry',\n      null,\n      {\n        shellPath: '/bin/sh',\n        shellScript:\n          // eslint-disable-next-line prefer-template\n          'echo \"warning: uploading debug symbols - set SENTRY_SKIP_DSYM_UPLOAD=true to skip this\"\\\\n' +\n          'if [ -n \"$SENTRY_SKIP_DSYM_UPLOAD\" ]; then\\\\n' +\n          '  echo \"warning: skipping debug symbol upload\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'export SENTRY_PROPERTIES=' +\n          cwd +\n          '\\\\n' +\n          'function getProperty {\\\\n' +\n          '    PROP_KEY=$1\\\\n' +\n          '    PROP_VALUE=`cat $SENTRY_PROPERTIES | grep \"$PROP_KEY\" | cut -d\\'=\\' -f2`\\\\n' +\n          '    if [ -z \"$PROP_VALUE\" ]; then\\\\n' +\n          '        echo \"plugins/sentry-cordova/node_modules/@sentry/cli/bin/sentry-cli\"\\\\n' +\n          '    else\\\\n' +\n          '        echo $PROP_VALUE\\\\n' +\n          '    fi\\\\n' +\n          '}\\\\n' +\n          'if [ ! -f $SENTRY_PROPERTIES ]; then\\\\n' +\n          '  echo \"warning: SENTRY: sentry.properties file not found! Skipping symbol upload.\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'echo \"# Reading property from $SENTRY_PROPERTIES\"\\\\n' +\n          'SENTRY_CLI=$(getProperty \"cli.executable\")\\\\n' +\n          'SENTRY_COMMAND=\"../../$SENTRY_CLI upload-dsym\"\\\\n' +\n          '$SENTRY_COMMAND',\n      },\n    );\n  }\n\n  private _addNewXcodeBuildPhaseForStripping(\n    buildScripts: Array<PBXShellScriptBuildPhase | string>,\n    proj: Project,\n  ): void {\n    for (const script of buildScripts) {\n      if (\n        typeof script === 'object' &&\n        script.shellScript?.match(/SENTRY_FRAMEWORK_PATCH/)\n      ) {\n        return;\n      }\n    }\n    // http://ikennd.ac/blog/2015/02/stripping-unwanted-architectures-from-dynamic-libraries-in-xcode/\n    proj.addBuildPhase(\n      [],\n      'PBXShellScriptBuildPhase',\n      'Sentry strip unused archs from Framework',\n      null,\n      {\n        shellPath: '/bin/sh',\n        shellScript:\n          '# SENTRY_FRAMEWORK_PATCH \\\\n' +\n          'echo \"warning: patching framework - set SENTRY_SKIP_FRAMEWORK_PATCH=true to skip this\"\\\\n' +\n          'if [ -n \"$SENTRY_SKIP_FRAMEWORK_PATCH\" ]; then\\\\n' +\n          '  echo \"warning: skipping framework patch\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'APP_PATH=\"${TARGET_BUILD_DIR}/${WRAPPER_NAME}\"\\\\n' +\n          'find \"$APP_PATH\" -name \\'Sentry*.framework\\' -type d | while read -r FRAMEWORK\\\\n' +\n          'do\\\\n' +\n          'FRAMEWORK_EXECUTABLE_NAME=$(defaults read \"$FRAMEWORK/Info.plist\" CFBundleExecutable)\\\\n' +\n          'FRAMEWORK_EXECUTABLE_PATH=\"$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME\"\\\\n' +\n          'echo \"Executable is $FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'EXTRACTED_ARCHS=()\\\\n' +\n          'for ARCH in $ARCHS\\\\n' +\n          'do\\\\n' +\n          'echo \"Checking if $FRAMEWORK_EXECUTABLE_PATH needs to be stripped.\"\\\\n' +\n          '# Do not skip if \"Architectures in the fat file\".\\\\n' +\n          '# Skip if Non-fat file or if file not found. \\\\n' +\n          'if lipo -info \"$FRAMEWORK_EXECUTABLE_PATH\" | grep -v \" fat \"; then\\\\n' +\n          '    echo \"Strip not required, skipping the strip script.\"\\\\n' +\n          '    exit 0\\\\n' +\n          'fi\\\\n' +\n          'echo \"Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME\"\\\\n' +\n          'lipo -extract \"$ARCH\" \"$FRAMEWORK_EXECUTABLE_PATH\" -o \"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\"\\\\n' +\n          'EXTRACTED_ARCHS+=(\"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\")\\\\n' +\n          'done\\\\n' +\n          'echo \"Merging extracted architectures: ${ARCHS}\"\\\\n' +\n          'lipo -o \"$FRAMEWORK_EXECUTABLE_PATH-merged\" -create \"${EXTRACTED_ARCHS[@]}\"\\\\n' +\n          'rm \"${EXTRACTED_ARCHS[@]}\"\\\\n' +\n          'echo \"Replacing original executable with thinned version\"\\\\n' +\n          'rm \"$FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'mv \"$FRAMEWORK_EXECUTABLE_PATH-merged\" \"$FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'done',\n      },\n    );\n  }\n\n  private _addSentryProperties(properties: SentryCliProps): Promise<void> {\n    let rv = Promise.resolve();\n    const fn = path.join('sentry.properties');\n    if (exists(fn)) {\n      return rv;\n    }\n    rv = rv.then(() =>\n      fs.writeFileSync(fn, this._sentryCli.dumpProperties(properties)),\n    );\n\n    return rv;\n  }\n}\n"]}