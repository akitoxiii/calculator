{"version":3,"file":"templates.test.js","sourceRoot":"","sources":["../../../test/apple/templates.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport {\n  getFastlaneSnippet,\n  getObjcSnippet,\n  getRunScriptTemplate,\n  getSwiftSnippet,\n  scriptInputPath,\n} from '../../src/apple/templates';\n\ndescribe('templates', () => {\n  describe('getRunScriptTemplate', () => {\n    const variations: {\n      uploadSource: boolean;\n      includeHomebrewPath: boolean;\n      expectedScript: string;\n    }[] = [\n      {\n        uploadSource: true,\n        includeHomebrewPath: true,\n        expectedScript:\n          `# This script is responsible for uploading debug symbols and source context for Sentry.\nif [[ \"$(uname -m)\" == arm64 ]]; then\nexport PATH=\"/opt/homebrew/bin:$PATH\"\nfi\nif which sentry-cli >/dev/null; then\nexport SENTRY_ORG=test-org\nexport SENTRY_PROJECT=test-project\nERROR=$(sentry-cli debug-files upload --include-sources \"$DWARF_DSYM_FOLDER_PATH\" 2>&1 >/dev/null)\nif [ ! $? -eq 0 ]; then\necho \"warning: sentry-cli - $ERROR\"\nfi\nelse\necho \"warning: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases\"\nfi\n`.replace(/\\n/g, '\\\\n'),\n      },\n      {\n        uploadSource: true,\n        includeHomebrewPath: false,\n        expectedScript:\n          `# This script is responsible for uploading debug symbols and source context for Sentry.\nif which sentry-cli >/dev/null; then\nexport SENTRY_ORG=test-org\nexport SENTRY_PROJECT=test-project\nERROR=$(sentry-cli debug-files upload --include-sources \"$DWARF_DSYM_FOLDER_PATH\" 2>&1 >/dev/null)\nif [ ! $? -eq 0 ]; then\necho \"warning: sentry-cli - $ERROR\"\nfi\nelse\necho \"warning: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases\"\nfi\n`.replace(/\\n/g, '\\\\n'),\n      },\n      {\n        uploadSource: false,\n        includeHomebrewPath: true,\n        expectedScript:\n          `# This script is responsible for uploading debug symbols and source context for Sentry.\nif [[ \"$(uname -m)\" == arm64 ]]; then\nexport PATH=\"/opt/homebrew/bin:$PATH\"\nfi\nif which sentry-cli >/dev/null; then\nexport SENTRY_ORG=test-org\nexport SENTRY_PROJECT=test-project\nERROR=$(sentry-cli debug-files upload \"$DWARF_DSYM_FOLDER_PATH\" 2>&1 >/dev/null)\nif [ ! $? -eq 0 ]; then\necho \"warning: sentry-cli - $ERROR\"\nfi\nelse\necho \"warning: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases\"\nfi\n`.replace(/\\n/g, '\\\\n'),\n      },\n      {\n        uploadSource: false,\n        includeHomebrewPath: false,\n        expectedScript:\n          `# This script is responsible for uploading debug symbols and source context for Sentry.\nif which sentry-cli >/dev/null; then\nexport SENTRY_ORG=test-org\nexport SENTRY_PROJECT=test-project\nERROR=$(sentry-cli debug-files upload \"$DWARF_DSYM_FOLDER_PATH\" 2>&1 >/dev/null)\nif [ ! $? -eq 0 ]; then\necho \"warning: sentry-cli - $ERROR\"\nfi\nelse\necho \"warning: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases\"\nfi\n`.replace(/\\n/g, '\\\\n'),\n      },\n    ];\n\n    for (const variation of variations) {\n      describe(`uploadSource: ${variation.uploadSource.toString()} and includeHomebrewPath: ${variation.includeHomebrewPath.toString()}`, () => {\n        it('should return the correct script', () => {\n          // -- ct --\n          const script = getRunScriptTemplate(\n            'test-org',\n            'test-project',\n            variation.uploadSource,\n            variation.includeHomebrewPath,\n          );\n\n          // -- Assert --\n          expect(script).toBe(variation.expectedScript);\n        });\n      });\n    }\n  });\n\n  describe('scriptInputPath', () => {\n    it('should return the correct path', () => {\n      expect(scriptInputPath).toBe(\n        '\"${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${TARGET_NAME}\"',\n      );\n    });\n  });\n\n  describe('getSwiftSnippet', () => {\n    it('should return the correct snippet', () => {\n      // -- Arrange --\n      const snippet = getSwiftSnippet('test-dsn');\n\n      // -- Assert --\n      expect(snippet).toBe(\n        `        SentrySDK.start { options in\n            options.dsn = \"test-dsn\"\n            options.debug = true // Enabled debug when first installing is always helpful\n            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n            // We recommend adjusting this value in production.\n            options.tracesSampleRate = 1.0\n\n            // Configure profiling. Visit https://docs.sentry.io/platforms/apple/profiling/ to learn more.\n            options.configureProfiling = {\n                $0.sessionSampleRate = 1.0 // We recommend adjusting this value in production.\n                $0.lifecycle = .trace\n            }\n\n            // Uncomment the following lines to add more data to your events\n            // options.attachScreenshot = true // This adds a screenshot to the error events\n            // options.attachViewHierarchy = true // This adds the view hierarchy to the error events\n        }\n        // Remove the next line after confirming that your Sentry integration is working.\n        SentrySDK.capture(message: \"This app uses Sentry! :)\")\n`,\n      );\n    });\n  });\n\n  describe('getObjcSnippet', () => {\n    it('should return the correct snippet', () => {\n      // -- Arrange --\n      const snippet = getObjcSnippet('test-dsn');\n\n      // -- Assert --\n      expect(snippet).toBe(\n        `    [SentrySDK startWithConfigureOptions:^(SentryOptions * options) {\n        options.dsn = @\"test-dsn\";\n        options.debug = YES; // Enabled debug when first installing is always helpful\n        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n        // We recommend adjusting this value in production.\n        options.tracesSampleRate = @1.0;\n\n        // Configure profiling. Visit https://docs.sentry.io/platforms/apple/profiling/ to learn more.\n        options.configureProfiling = ^(SentryProfileOptions *profiling) {\n            profiling.sessionSampleRate = 1.0; // We recommend adjusting this value in production.\n            profiling.lifecycle = SentryProfilingLifecycleTrace;\n        };\n\n        //Uncomment the following lines to add more data to your events\n        //options.attachScreenshot = YES; //This will add a screenshot to the error events\n        //options.attachViewHierarchy = YES; //This will add the view hierarchy to the error events\n    }];\n    //Remove the next line after confirming that your Sentry integration is working.\n    [SentrySDK captureMessage:@\"This app uses Sentry!\"];\n`,\n      );\n    });\n  });\n\n  describe('getFastlaneSnippet', () => {\n    it('should return the correct snippet', () => {\n      // -- Arrange --\n      const snippet = getFastlaneSnippet('test-org', 'test-project');\n\n      // -- Assert --\n      expect(snippet).toBe(\n        `    sentry_cli(\n      org_slug: 'test-org',\n      project_slug: 'test-project',\n      include_sources: true\n    )`,\n      );\n    });\n  });\n});\n"]}