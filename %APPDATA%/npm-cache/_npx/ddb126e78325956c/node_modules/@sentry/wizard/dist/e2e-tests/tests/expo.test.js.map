{"version":3,"file":"expo.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/expo.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAkC;AAClC,mDAAkD;AAClD,oCAMkB;AAClB,oCAA+C;AAC/C,oCAA6C;AAC7C,mCAA6D;AAE7D,IAAA,iBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;IACpB,MAAM,WAAW,GAAG,uBAAW,CAAC,WAAW,CAAC;IAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,iDAAiD,CAClD,CAAC;IAEF,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;QACnB,MAAM,cAAc,GAAG,IAAA,2BAAmB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACpE,MAAM,sBAAsB,GAAG,MAAM,cAAc,CAAC,aAAa,CAC/D,qCAAqC,CACtC,CAAC;QACF,MAAM,qBAAqB,GAC3B,sBAAsB;YACtB,CAAC,MAAM,cAAc,CAAC,yBAAyB;YAC7C,0CAA0C;YAC1C,CAAC,YAAI,CAAC,IAAI,EAAE,YAAI,CAAC,IAAI,EAAE,YAAI,CAAC,KAAK,CAAC,EAClC,gIAAgI,CACjI,CAAC,CAAC;QACH,MAAM,iBAAiB,GACvB,qBAAqB;YACnB,CAAC,MAAM,cAAc,CAAC,yBAAyB;YAC7C,wBAAwB;YACxB,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,0CAA0C,CAC3C,CAAC,CAAC;QACL,iBAAiB;YACf,CAAC,MAAM,cAAc,CAAC,yBAAyB;YAC7C,mCAAmC;YACnC,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,uBAAuB,CACxB,CAAC,CAAC;QACL,cAAc,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;QACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;QAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,IAAA,yBAAiB,EAAC,GAAG,UAAU,eAAe,EAAE,sBAAsB,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,kCAAkC,EAAE,GAAG,EAAE;QAC5C,IAAA,yBAAiB,EACf,GAAG,UAAU,kBAAkB,EAC/B;;;;;;;;;;;;IAYF,CACC,CAAC;QACF,IAAA,yBAAiB,EACf,GAAG,UAAU,kBAAkB,EAC/B,oDAAoD,CACrD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,IAAA,yBAAiB,EACf,GAAG,UAAU,WAAW,EACxB;;;wBAGkB,iBAAS,CAAC,YAAY;6BACjB,iBAAS,CAAC,QAAQ;UACrC,CACL,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACpC,IAAA,uBAAe,EAAC,GAAG,UAAU,kBAAkB,CAAC,CAAC;QACjD,IAAA,yBAAiB,EACf,GAAG,UAAU,kBAAkB,EAC/B;;;;yBAImB,CACpB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,iCAAiC,EAAE,GAAG,EAAE;QAC3C,IAAA,yBAAiB,EAAC,GAAG,UAAU,aAAa,EAAE,YAAY,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport {\n  KEYS,\n  TEST_ARGS,\n  checkFileExists,\n  cleanupGit,\n  revertLocalChanges,\n} from '../utils';\nimport { startWizardInstance } from '../utils';\nimport { checkFileContents } from '../utils';\nimport { afterAll, beforeAll, describe, test } from 'vitest';\n\ndescribe('Expo', () => {\n  const integration = Integration.reactNative;\n  const projectDir = path.resolve(\n    __dirname,\n    '../test-applications/react-native-expo-test-app',\n  );\n\n  beforeAll(async () => {\n    const wizardInstance = startWizardInstance(integration, projectDir);\n    const packageManagerPrompted = await wizardInstance.waitForOutput(\n      'Please select your package manager.',\n    );\n    const sessionReplayPrompted =\n    packageManagerPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      // Selecting `yarn` as the package manager\n      [KEYS.DOWN, KEYS.DOWN, KEYS.ENTER],\n      'Do you want to enable Session Replay to help debug issues? (See https://docs.sentry.io/platforms/react-native/session-replay/)',\n    ));\n    const testEventPrompted =\n    sessionReplayPrompted &&\n      (await wizardInstance.sendStdinAndWaitForOutput(\n        // Enable session replay\n        [KEYS.ENTER],\n        'Have you successfully sent a test event?',\n      ));\n    testEventPrompted &&\n      (await wizardInstance.sendStdinAndWaitForOutput(\n        // Respond that test event was sent\n        [KEYS.ENTER],\n        'Everything is set up!',\n      ));\n    wizardInstance.kill();\n  });\n\n  afterAll(() => {\n    revertLocalChanges(projectDir);\n    cleanupGit(projectDir);\n  });\n\n  test('package.json is updated correctly', () => {\n    checkFileContents(`${projectDir}/package.json`, `@sentry/react-native`);\n  });\n\n  test('_layout.tsx is updated correctly', () => {\n    checkFileContents(\n      `${projectDir}/app/_layout.tsx`,\n      `import * as Sentry from '@sentry/react-native';\n\nSentry.init({\n  dsn: 'https://public@dsn.ingest.sentry.io/1337',\n\n  // Configure Session Replay\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1,\n  integrations: [Sentry.mobileReplayIntegration()],\n\n  // uncomment the line below to enable Spotlight (https://spotlightjs.com)\n  // spotlight: __DEV__,\n});`,\n    );\n    checkFileContents(\n      `${projectDir}/app/_layout.tsx`,\n      `export default Sentry.wrap(function RootLayout() {`,\n    );\n  });\n\n  test('app.json is updated correctly', () => {\n    checkFileContents(\n      `${projectDir}/app.json`,\n      `\"@sentry/react-native/expo\",\n        {\n          \"url\": \"https://sentry.io/\",\n          \"project\": \"${TEST_ARGS.PROJECT_SLUG}\",\n          \"organization\": \"${TEST_ARGS.ORG_SLUG}\"\n        }`,\n    );\n  });\n\n  test('metro.config.js is added', () => {\n    checkFileExists(`${projectDir}/metro.config.js`);\n    checkFileContents(\n      `${projectDir}/metro.config.js`,\n      `const { getSentryExpoConfig } = require(\"@sentry/react-native/metro\");\n\nconst config = getSentryExpoConfig(__dirname);\n\nmodule.exports = config;`,\n    );\n  });\n\n  test('.gitignore is updated correctly', () => {\n    checkFileContents(`${projectDir}/.gitignore`, `.env.local`);\n  });\n});\n"]}