{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/remix/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,2CAA6B;AAE7B,+EAA+E;AAC/E,6DAAmC;AACnC,kDAA0B;AAC1B,wDAA4E;AAE/D,QAAA,qCAAqC,GAAG;IACnD,mBAAmB;IACnB,0BAA0B;CAC3B,CAAC;AAEF,SAAgB,gBAAgB,CAC9B,QAAgB,EAChB,WAAmB,EACnB,eAAe,GAAG,eAAe;IAEjC,MAAM,eAAe,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IAE9D,IAAI,eAAe,EAAE;QACnB,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,QAAQ,eAAK,CAAC,IAAI,CAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACxB,qBAAqB,eAAe;0CACD,eAAK,CAAC,IAAI,CAC5C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACxB,GAAG,CACL,CAAC;KACH;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAnBD,4CAmBC;AAED,SAAgB,8BAA8B,CAC5C,cAAsB,EACtB,iBAAyB;IAEzB,MAAM,mCAAmC,GACvC,6CAAqC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAClD,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,CACjC,CAAC;IAEJ,IAAI,mCAAmC,EAAE;QACvC,iBAAK,CAAC,GAAG,CAAC,IAAI,CACZ,QAAQ,eAAK,CAAC,IAAI,CAChB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAC9B;mDAC4C,eAAK,CAAC,IAAI,CACrD,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAC9B,GAAG,CACL,CAAC;KACH;IAED,OAAO,mCAAmC,CAAC;AAC7C,CAAC;AArBD,wEAqBC;AAED;;GAEG;AACH,SAAgB,8BAA8B,CAC5C,mBAA4B;IAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC5D,IACE,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB;YACxD,iDAAiD;YACjD,sEAAsE;YACtE,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,eAAe,EAC5D;YACA,OAAO,CAAC,GAAG,CAAC,CAAC;SACd;KACF;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAfD,wEAeC;AAED;;GAEG;AACH,SAAgB,6BAA6B,CAC3C,yBAAkC;IAElC,KAAK,IAAI,CAAC,GAAG,yBAAyB,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACnE,IAAI,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,mBAAmB,EAAE;YAClE,OAAO,CAAC,GAAG,CAAC,CAAC;SACd;KACF;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAVD,sEAUC;AAED,SAAgB,aAAa,CAAC,WAA2B;IACvD,OAAO,IAAA,kCAAmB,EAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;AAC/D,CAAC;AAFD,sCAEC","sourcesContent":["import type { Program } from '@babel/types';\n\nimport * as path from 'path';\n\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport { PackageDotJson, hasPackageInstalled } from '../utils/package-json';\n\nexport const POSSIBLE_SERVER_INSTRUMENTATION_PATHS = [\n  './instrumentation',\n  './instrumentation.server',\n];\n\nexport function hasSentryContent(\n  fileName: string,\n  fileContent: string,\n  expectedContent = '@sentry/remix',\n): boolean {\n  const includesContent = fileContent.includes(expectedContent);\n\n  if (includesContent) {\n    clack.log.warn(\n      `File ${chalk.cyan(\n        path.basename(fileName),\n      )} already contains ${expectedContent}.\nSkipping adding Sentry functionality to ${chalk.cyan(\n        path.basename(fileName),\n      )}.`,\n    );\n  }\n\n  return includesContent;\n}\n\nexport function serverHasInstrumentationImport(\n  serverFileName: string,\n  serverFileContent: string,\n): boolean {\n  const includesServerInstrumentationImport =\n    POSSIBLE_SERVER_INSTRUMENTATION_PATHS.some((path) =>\n      serverFileContent.includes(path),\n    );\n\n  if (includesServerInstrumentationImport) {\n    clack.log.warn(\n      `File ${chalk.cyan(\n        path.basename(serverFileName),\n      )} already contains instrumentation import.\nSkipping adding instrumentation functionality to ${chalk.cyan(\n        path.basename(serverFileName),\n      )}.`,\n    );\n  }\n\n  return includesServerInstrumentationImport;\n}\n\n/**\n * We want to insert the init call on top of the file, before any other imports.\n */\nexport function getBeforeImportsInsertionIndex(\n  originalHooksModAST: Program,\n): number {\n  for (let x = 0; x < originalHooksModAST.body.length - 1; x++) {\n    if (\n      originalHooksModAST.body[x].type === 'ImportDeclaration' &&\n      // @ts-expect-error - source is available in body\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      originalHooksModAST.body[x].source.value === '@sentry/remix'\n    ) {\n      return x + 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * We want to insert the handleError function just after all imports\n */\nexport function getAfterImportsInsertionIndex(\n  originalEntryServerModAST: Program,\n): number {\n  for (let x = originalEntryServerModAST.body.length - 1; x >= 0; x--) {\n    if (originalEntryServerModAST.body[x].type === 'ImportDeclaration') {\n      return x + 1;\n    }\n  }\n\n  return 0;\n}\n\nexport function isHydrogenApp(packageJson: PackageDotJson): boolean {\n  return hasPackageInstalled('@shopify/hydrogen', packageJson);\n}\n"]}