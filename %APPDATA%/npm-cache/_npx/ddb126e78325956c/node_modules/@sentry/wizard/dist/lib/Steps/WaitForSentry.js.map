{"version":3,"file":"WaitForSentry.js","sourceRoot":"","sources":["../../../lib/Steps/WaitForSentry.ts"],"names":[],"mappings":";;;AAEA,mDAAgD;AAChD,6CAAyD;AACzD,yCAAsC;AAEtC,MAAa,aAAc,SAAQ,mBAAQ;IAClC,KAAK,CAAC,IAAI,CAAC,OAAoC;QACpD,IAAI,CAAC,CAAC,MAAM,IAAA,8BAAqB,EAAC,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;YAC/D,OAAO,EAAE,CAAC;SACX;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC1B,OAAO,EAAE,CAAC;SACX;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEpB,qBAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACxC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAE/B,MAAM,UAAU,GAAG,KAAK,IAAmB,EAAE;gBAC3C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,OAAO,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACnE,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;oBAChB,MAAM,IAAI,KAAK,CACb,mBAAmB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,CAC5D,CAAC;iBACH;gBACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACnC,8DAA8D;gBAC9D,MAAM,KAAK,CACT,GAAG,OAAO,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAClE;oBACE,MAAM,EAAE,QAAQ;iBACjB,CACF,CAAC;gBACF,qBAAS,CAAC,IAAI,EAAE,CAAC;gBACjB,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAC/B,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC;YAEF,MAAM,IAAI,GAAG,GAAS,EAAE;gBACtB,IAAI,CAAC,KAAK,CACR,YAAY,OAAO,gBACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,EACtC,EAAE,CACH,CAAC;gBACF,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;oBACvB,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACd,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA1DD,sCA0DC","sourcesContent":["import type { Answers } from 'inquirer';\n\nimport { BottomBar } from '../Helper/BottomBar';\nimport { getCurrentIntegration } from '../Helper/Wizard';\nimport { BaseStep } from './BaseStep';\n\nexport class WaitForSentry extends BaseStep {\n  public async emit(answers: Answers & { hash?: string }): Promise<Answers> {\n    if (!(await getCurrentIntegration(answers).shouldEmit(answers))) {\n      return {};\n    }\n    if (this._argv.skipConnect) {\n      return {};\n    }\n\n    if (!answers.hash) {\n      throw new Error('No wizard hash found.');\n    }\n\n    return new Promise((resolve, _reject) => {\n      this.debug(answers);\n\n      BottomBar.show('Waiting for Sentry...');\n      const baseUrl = this._argv.url;\n\n      const pingSentry = async (): Promise<void> => {\n        const response = await fetch(\n          `${baseUrl}api/0/wizard/${answers.hash ? answers.hash + '/' : ''}`,\n        );\n        this.debug('Polling received data');\n        if (!response.ok) {\n          throw new Error(\n            `Received status ${response.status} ${response.statusText}`,\n          );\n        }\n        const data = await response.json();\n        // Delete the wizard hash since we were able to fetch the data\n        await fetch(\n          `${baseUrl}api/0/wizard/${answers.hash ? answers.hash + '/' : ''}`,\n          {\n            method: 'DELETE',\n          },\n        );\n        BottomBar.hide();\n        this.debug('Polling Success!');\n        resolve({ wizard: data });\n      };\n\n      const poll = (): void => {\n        this.debug(\n          `Polling: ${baseUrl}api/0/wizard/${\n            answers.hash ? answers.hash + '/' : ''\n          }`,\n        );\n        pingSentry().catch((e) => {\n          this.debug('Polling received:');\n          this.debug(e);\n          setTimeout(poll, 1000);\n        });\n      };\n\n      poll();\n    });\n  }\n}\n"]}