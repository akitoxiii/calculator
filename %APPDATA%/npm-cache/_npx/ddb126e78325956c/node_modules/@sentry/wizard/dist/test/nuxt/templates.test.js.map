{"version":3,"file":"templates.test.js","sourceRoot":"","sources":["../../../test/nuxt/templates.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport {\n  getDefaultNuxtConfig,\n  getNuxtModuleFallbackTemplate,\n  getSentryConfigContents,\n} from '../../src/nuxt/templates';\n\ndescribe('Nuxt code templates', () => {\n  describe('getDefaultNuxtConfig', () => {\n    it('returns a default nuxt config', () => {\n      expect(getDefaultNuxtConfig()).toMatchInlineSnapshot(`\n      \"// https://nuxt.com/docs/api/configuration/nuxt-config\n      export default defineNuxtConfig({\n        compatibilityDate: '2024-04-03',\n        devtools: { enabled: true }\n      })\n      \"\n`);\n    });\n  });\n\n  describe('getSentryConfigContents', () => {\n    describe('client config', () => {\n      it('generates Sentry config with all features enabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'client',\n          {\n            performance: true,\n            replay: true,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n\n          Sentry.init({\n            // If set up, you can use your runtime config here\n            // dsn: useRuntimeConfig().public.sentry.dsn,\n            dsn: \"https://sentry.io/123\",\n\n            // We recommend adjusting this value in production, or using tracesSampler\n            // for finer control\n            tracesSampleRate: 1.0,\n\n            // This sets the sample rate to be 10%. You may want this to be 100% while\n            // in development and sample at a lower rate in production\n            replaysSessionSampleRate: 0.1,\n            \n            // If the entire session is not sampled, use the below sample rate to sample\n            // sessions when an error occurs.\n            replaysOnErrorSampleRate: 1.0,\n            \n            // If you don't want to use Session Replay, just remove the line below:\n            integrations: [Sentry.replayIntegration()],\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n      `);\n      });\n\n      it('generates Sentry config with performance monitoring disabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'client',\n          {\n            performance: false,\n            replay: true,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n\n          Sentry.init({\n            // If set up, you can use your runtime config here\n            // dsn: useRuntimeConfig().public.sentry.dsn,\n            dsn: \"https://sentry.io/123\",\n\n            // This sets the sample rate to be 10%. You may want this to be 100% while\n            // in development and sample at a lower rate in production\n            replaysSessionSampleRate: 0.1,\n            \n            // If the entire session is not sampled, use the below sample rate to sample\n            // sessions when an error occurs.\n            replaysOnErrorSampleRate: 1.0,\n            \n            // If you don't want to use Session Replay, just remove the line below:\n            integrations: [Sentry.replayIntegration()],\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n      `);\n      });\n\n      it('generates Sentry config with session replay disabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'client',\n          {\n            performance: true,\n            replay: false,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n\n          Sentry.init({\n            // If set up, you can use your runtime config here\n            // dsn: useRuntimeConfig().public.sentry.dsn,\n            dsn: \"https://sentry.io/123\",\n\n            // We recommend adjusting this value in production, or using tracesSampler\n            // for finer control\n            tracesSampleRate: 1.0,\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n\n      it('generates Sentry config with performance monitoring and session replay disabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'client',\n          {\n            performance: false,\n            replay: false,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n\n          Sentry.init({\n            // If set up, you can use your runtime config here\n            // dsn: useRuntimeConfig().public.sentry.dsn,\n            dsn: \"https://sentry.io/123\",\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n    });\n\n    describe('server config', () => {\n      it('generates Sentry config with all features enabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'server',\n          {\n            performance: true,\n            replay: true,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n           \n          Sentry.init({\n            dsn: \"https://sentry.io/123\",\n\n            // We recommend adjusting this value in production, or using tracesSampler\n            // for finer control\n            tracesSampleRate: 1.0,\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n      `);\n      });\n\n      it('generates Sentry config with performance monitoring disabled', () => {\n        const template = getSentryConfigContents(\n          'https://sentry.io/123',\n          'server',\n          {\n            performance: false,\n            replay: true,\n          },\n        );\n\n        expect(template).toMatchInlineSnapshot(`\n          \"import * as Sentry from \"@sentry/nuxt\";\n           \n          Sentry.init({\n            dsn: \"https://sentry.io/123\",\n            \n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n      `);\n      });\n    });\n  });\n\n  describe('getNuxtModuleFallbackTemplate', () => {\n    it('generates configuration options for the nuxt config', () => {\n      const template = getNuxtModuleFallbackTemplate(\n        {\n          org: 'my-org',\n          project: 'my-project',\n          url: 'https://sentry.io',\n          selfHosted: false,\n        },\n        false,\n      );\n\n      expect(template).toMatchInlineSnapshot(`\n        \"  modules: [\"@sentry/nuxt/module\"],\n          sentry: {\n            sourceMapsUploadOptions: {\n              org: \"my-org\",\n              project: \"my-project\",\n            },\n          },\n          sourcemap: { client: \"hidden\" },\"\n      `);\n    });\n\n    it('generates configuration options for the nuxt config with top level import', () => {\n      const template = getNuxtModuleFallbackTemplate(\n        {\n          org: 'my-org',\n          project: 'my-project',\n          url: 'https://sentry.io',\n          selfHosted: false,\n        },\n        true,\n      );\n\n      expect(template).toMatchInlineSnapshot(`\n        \"  modules: [\"@sentry/nuxt/module\"],\n          sentry: {\n            sourceMapsUploadOptions: {\n              org: \"my-org\",\n              project: \"my-project\",\n            },\n            autoInjectServerSentry: \"top-level-import\",\n          },\n          sourcemap: { client: \"hidden\" },\"\n      `);\n    });\n  });\n});\n"]}