{"version":3,"file":"templates.test.js","sourceRoot":"","sources":["../../../test/sveltekit/templates.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,6DAGuC;AAEvC,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,WAAE,EAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,MAAM,GAAG,IAAA,kCAAsB,EAAC,uBAAuB,EAAE;YAC7D,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwBpC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,MAAM,GAAG,IAAA,kCAAsB,EAAC,uBAAuB,EAAE;YAC7D,WAAW,EAAE,KAAK;YAClB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;KAsBpC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,MAAM,GAAG,IAAA,kCAAsB,EAAC,uBAAuB,EAAE;YAC7D,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;KAepC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,WAAE,EAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,MAAM,GAAG,IAAA,kCAAsB,EAAC,uBAAuB,EAAE;YAC7D,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;KAoBpC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,MAAM,GAAG,IAAA,kCAAsB,EAAC,uBAAuB,EAAE;YAC7D,WAAW,EAAE,KAAK;YAClB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;KAkBpC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport {\n  getClientHooksTemplate,\n  getServerHooksTemplate,\n} from '../../src/sveltekit/templates';\n\ndescribe('getClientHooksTemplate', () => {\n  it('should generate client hooks template with all features enabled', () => {\n    const result = getClientHooksTemplate('https://sentry.io/123', {\n      performance: true,\n      replay: true,\n    });\n\n    expect(result).toMatchInlineSnapshot(`\n      \"import { handleErrorWithSentry, replayIntegration } from \"@sentry/sveltekit\";\n      import * as Sentry from '@sentry/sveltekit';\n\n      Sentry.init({\n        dsn: 'https://sentry.io/123',\n\n        tracesSampleRate: 1.0,\n\n        // This sets the sample rate to be 10%. You may want this to be 100% while\n        // in development and sample at a lower rate in production\n        replaysSessionSampleRate: 0.1,\n\n        // If the entire session is not sampled, use the below sample rate to sample\n        // sessions when an error occurs.\n        replaysOnErrorSampleRate: 1.0,\n\n        // If you don't want to use Session Replay, just remove the line below:\n        integrations: [replayIntegration()],\n      });\n\n      // If you have a custom error handler, pass it to \\`handleErrorWithSentry\\`\n      export const handleError = handleErrorWithSentry();\n      \"\n    `);\n  });\n\n  it('should generate client hooks template when performance disabled', () => {\n    const result = getClientHooksTemplate('https://sentry.io/123', {\n      performance: false,\n      replay: true,\n    });\n\n    expect(result).toMatchInlineSnapshot(`\n      \"import { handleErrorWithSentry, replayIntegration } from \"@sentry/sveltekit\";\n      import * as Sentry from '@sentry/sveltekit';\n\n      Sentry.init({\n        dsn: 'https://sentry.io/123',\n\n        // This sets the sample rate to be 10%. You may want this to be 100% while\n        // in development and sample at a lower rate in production\n        replaysSessionSampleRate: 0.1,\n\n        // If the entire session is not sampled, use the below sample rate to sample\n        // sessions when an error occurs.\n        replaysOnErrorSampleRate: 1.0,\n\n        // If you don't want to use Session Replay, just remove the line below:\n        integrations: [replayIntegration()],\n      });\n\n      // If you have a custom error handler, pass it to \\`handleErrorWithSentry\\`\n      export const handleError = handleErrorWithSentry();\n      \"\n    `);\n  });\n\n  it('should generate client hooks template when replay disabled', () => {\n    const result = getClientHooksTemplate('https://sentry.io/123', {\n      performance: true,\n      replay: false,\n    });\n\n    expect(result).toMatchInlineSnapshot(`\n      \"import { handleErrorWithSentry, replayIntegration } from \"@sentry/sveltekit\";\n      import * as Sentry from '@sentry/sveltekit';\n\n      Sentry.init({\n        dsn: 'https://sentry.io/123',\n\n        tracesSampleRate: 1.0,\n\n\n      });\n\n      // If you have a custom error handler, pass it to \\`handleErrorWithSentry\\`\n      export const handleError = handleErrorWithSentry();\n      \"\n    `);\n  });\n});\n\ndescribe('getServerHooksTemplate', () => {\n  it('should generate server hooks template with all features enabled', () => {\n    const result = getServerHooksTemplate('https://sentry.io/123', {\n      performance: true,\n      replay: true,\n    });\n\n    expect(result).toMatchInlineSnapshot(`\n      \"import { sequence } from \"@sveltejs/kit/hooks\";\n      import { handleErrorWithSentry, sentryHandle } from \"@sentry/sveltekit\";\n      import * as Sentry from '@sentry/sveltekit';\n\n      Sentry.init({\n        dsn: 'https://sentry.io/123',\n\n        tracesSampleRate: 1.0,\n\n        // uncomment the line below to enable Spotlight (https://spotlightjs.com)\n        // spotlight: import.meta.env.DEV,\n      });\n\n      // If you have custom handlers, make sure to place them after \\`sentryHandle()\\` in the \\`sequence\\` function.\n      export const handle = sequence(sentryHandle());\n\n      // If you have a custom error handler, pass it to \\`handleErrorWithSentry\\`\n      export const handleError = handleErrorWithSentry();\n      \"\n    `);\n  });\n\n  it('should generate server hooks template when performance disabled', () => {\n    const result = getServerHooksTemplate('https://sentry.io/123', {\n      performance: false,\n      replay: true,\n    });\n\n    expect(result).toMatchInlineSnapshot(`\n      \"import { sequence } from \"@sveltejs/kit/hooks\";\n      import { handleErrorWithSentry, sentryHandle } from \"@sentry/sveltekit\";\n      import * as Sentry from '@sentry/sveltekit';\n\n      Sentry.init({\n        dsn: 'https://sentry.io/123',\n\n        // uncomment the line below to enable Spotlight (https://spotlightjs.com)\n        // spotlight: import.meta.env.DEV,\n      });\n\n      // If you have custom handlers, make sure to place them after \\`sentryHandle()\\` in the \\`sequence\\` function.\n      export const handle = sequence(sentryHandle());\n\n      // If you have a custom error handler, pass it to \\`handleErrorWithSentry\\`\n      export const handleError = handleErrorWithSentry();\n      \"\n    `);\n  });\n});\n"]}