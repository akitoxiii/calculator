{"version":3,"file":"remix.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/remix.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAkC;AAClC,mDAAkD;AAClD,oCAekB;AAClB,mCAA6D;AAE7D,MAAM,eAAe,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCvB,CAAC;AAEF,KAAK,UAAU,uBAAuB,CACpC,UAAkB,EAClB,WAAwB,EACxB,kBAGY;IAEZ,MAAM,cAAc,GAAG,IAAA,2BAAmB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACpE,IAAI,sBAAsB,GAAG,KAAK,CAAC;IAEnC,IAAI,kBAAkB,EAAE;QACtB,kBAAkB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAE5C,MAAM,cAAc,CAAC,aAAa,CAAC,iCAAiC,CAAC,CAAC;QAEtE,sBAAsB,GAAG,MAAM,cAAc,CAAC,yBAAyB,CACrE,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,qCAAqC,CACtC,CAAC;KACH;SAAM;QACL,sBAAsB,GAAG,MAAM,cAAc,CAAC,aAAa,CACzD,qCAAqC,CACtC,CAAC;KACH;IAED,MAAM,qBAAqB,GACzB,sBAAsB;QACtB,CAAC,MAAM,cAAc,CAAC,yBAAyB;QAC7C,0CAA0C;QAC1C,CAAC,YAAI,CAAC,IAAI,EAAE,YAAI,CAAC,KAAK,CAAC;QACvB,+FAA+F;QAC/F,+CAA+C,EAC/C;YACE,OAAO,EAAE,MAAO;SACjB,CACF,CAAC,CAAC;IAEL,MAAM,oBAAoB,GACxB,qBAAqB;QACrB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC;QACZ,2HAA2H;QAC3H,mEAAmE,CACpE,CAAC,CAAC;IAEL,oBAAoB;QAClB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,uCAAuC,EACvC;YACE,QAAQ,EAAE,IAAI;SACf,CACF,CAAC,CAAC;IAEL,MAAM,cAAc,CAAC,yBAAyB,CAC5C,CAAC,YAAI,CAAC,KAAK,EAAE,YAAI,CAAC,KAAK,CAAC,EACxB,gEAAgE,CACjE,CAAC;IAEF,cAAc,CAAC,IAAI,EAAE,CAAC;AACxB,CAAC;AAED,SAAS,iBAAiB,CACxB,UAAkB,EAClB,WAAwB,EACxB,OAGC;IAED,IAAA,aAAI,EAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,IAAA,wBAAgB,EAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,iEAAiE,EAAE,GAAG,EAAE;QAC3E,IAAA,2BAAmB,EAAC,UAAU,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,qBAAqB,EAAE,GAAG,EAAE;QAC/B,IAAA,uBAAe,EAAC,GAAG,UAAU,qCAAqC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAA,uBAAe,EAAC,GAAG,UAAU,6BAA6B,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,kDAAkD,EAAE,GAAG,EAAE;QAC5D,IAAA,yBAAiB,EAAC,GAAG,UAAU,uBAAuB,EAAE;YACtD,qFAAqF;YACrF;YACM,iBAAS,CAAC,WAAW;;;;;;;;;;;;;;GAc9B;SACE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,wCAAwC,EAAE,GAAG,EAAE;QAClD,IAAA,yBAAiB,EAAC,GAAG,UAAU,uBAAuB,EAAE;YACtD,0CAA0C;YAC1C;;IAEF;SACC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,IAAA,yBAAiB,EAAC,GAAG,UAAU,6BAA6B,EAAE;YAC5D,0CAA0C;YAC1C;YACM,iBAAS,CAAC,WAAW;;GAE9B;SACE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,IAAA,yBAAiB,EAAC,GAAG,UAAU,eAAe,EAAE;YAC9C,iEAAiE;YACjE;;;;GAIH;SACE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,IAAA,qBAAa,EAAC,UAAU,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAA,4BAAoB,EACxB,UAAU,EACV,OAAO,EAAE,qBAAqB,IAAI,WAAW,CAC9C,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAA,6BAAqB,EACzB,UAAU,EACV,OAAO,EAAE,sBAAsB,IAAI,eAAe,CACnD,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,IAAA,iBAAQ,EAAC,OAAO,EAAE,GAAG,EAAE;IACrB,IAAA,iBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,MAAM,WAAW,GAAG,uBAAW,CAAC,KAAK,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,qCAAqC,CACtC,CAAC;QAEF,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,uBAAuB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,MAAM,WAAW,GAAG,uBAAW,CAAC,KAAK,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,qCAAqC,CACtC,CAAC;QAEF,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,uBAAuB,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE;gBACpE,IAAA,kBAAU,EAAC,GAAG,UAAU,aAAa,EAAE,eAAe,CAAC,CAAC;gBAExD,IAAA,kBAAU,EAAC,GAAG,UAAU,eAAe,EAAE;oBACvC,gDAAgD,EAC9C,8BAA8B;oBAChC,yBAAyB,EAAE,4BAA4B;iBACxD,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE;YACzC,qBAAqB,EAAE,0BAA0B;YACjD,sBAAsB,EAAE,0BAA0B;SACnD,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,IAAA,yBAAiB,EAAC,GAAG,UAAU,aAAa,EAAE;gBAC5C,wCAAwC;aACzC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport {\n  KEYS,\n  TEST_ARGS,\n  checkEnvBuildPlugin,\n  checkFileContents,\n  checkFileExists,\n  checkIfBuilds,\n  checkIfRunsOnDevMode,\n  checkIfRunsOnProdMode,\n  checkPackageJson,\n  cleanupGit,\n  createFile,\n  modifyFile,\n  revertLocalChanges,\n  startWizardInstance,\n} from '../utils';\nimport { afterAll, beforeAll, describe, test } from 'vitest';\n\nconst SERVER_TEMPLATE = `import { createRequestHandler } from '@remix-run/express';\nimport { installGlobals } from '@remix-run/node';\nimport compression from 'compression';\nimport express from 'express';\nimport morgan from 'morgan';\n\ninstallGlobals();\n\nconst viteDevServer =\n  process.env.NODE_ENV === 'production'\n    ? undefined\n    : await import('vite').then(vite =>\n        vite.createServer({\n          server: { middlewareMode: true },\n        }),\n      );\n\nconst app = express();\n\napp.use(compression());\napp.disable('x-powered-by');\n\nif (viteDevServer) {\n  app.use(viteDevServer.middlewares);\n} else {\n  app.use('/assets', express.static('build/client/assets', { immutable: true, maxAge: '1y' }));\n}\n\napp.use(express.static('build/client', { maxAge: '1h' }));\napp.use(morgan('tiny'));\n\napp.all(\n  '*',\n  createRequestHandler({\n    build: viteDevServer\n      ? () => viteDevServer.ssrLoadModule('virtual:remix/server-build')\n      : await import('./build/server/index.js'),\n  }),\n);\n\napp.listen(0, () => console.log('Express server listening'));\n`;\n\nasync function runWizardOnRemixProject(\n  projectDir: string,\n  integration: Integration,\n  fileModificationFn?: (\n    projectDir: string,\n    integration: Integration,\n  ) => unknown,\n) {\n  const wizardInstance = startWizardInstance(integration, projectDir);\n  let packageManagerPrompted = false;\n\n  if (fileModificationFn) {\n    fileModificationFn(projectDir, integration);\n\n    await wizardInstance.waitForOutput('Do you want to continue anyway?');\n\n    packageManagerPrompted = await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Please select your package manager.',\n    );\n  } else {\n    packageManagerPrompted = await wizardInstance.waitForOutput(\n      'Please select your package manager.',\n    );\n  }\n\n  const tracingOptionPrompted =\n    packageManagerPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      // Selecting `yarn` as the package manager\n      [KEYS.DOWN, KEYS.ENTER],\n      // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n      'to track the performance of your application?',\n      {\n        timeout: 240_000,\n      },\n    ));\n\n  const replayOptionPrompted =\n    tracingOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      // \"Do you want to enable Sentry Session Replay\", sometimes doesn't work as `Sentry Session Replay` can be printed in bold.\n      'to get a video-like reproduction of errors during a user session?',\n    ));\n\n  replayOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Do you want to create an example page',\n      {\n        optional: true,\n      },\n    ));\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER, KEYS.ENTER],\n    'Sentry has been successfully configured for your Remix project',\n  );\n\n  wizardInstance.kill();\n}\n\nfunction checkRemixProject(\n  projectDir: string,\n  integration: Integration,\n  options?: {\n    devModeExpectedOutput?: string;\n    prodModeExpectedOutput?: string;\n  },\n) {\n  test('package.json is updated correctly', () => {\n    checkPackageJson(projectDir, integration);\n  });\n\n  test('.env-sentry-build-plugin is created and contains the auth token', () => {\n    checkEnvBuildPlugin(projectDir);\n  });\n\n  test('example page exists', () => {\n    checkFileExists(`${projectDir}/app/routes/sentry-example-page.tsx`);\n  });\n\n  test('instrumentation.server file exists', () => {\n    checkFileExists(`${projectDir}/instrumentation.server.mjs`);\n  });\n\n  test('entry.client file contains Sentry initialization', () => {\n    checkFileContents(`${projectDir}/app/entry.client.tsx`, [\n      'import { init, replayIntegration, browserTracingIntegration } from \"@sentry/remix\";',\n      `init({\n    dsn: \"${TEST_ARGS.PROJECT_DSN}\",\n    tracesSampleRate: 1,\n\n    integrations: [browserTracingIntegration({\n      useEffect,\n      useLocation,\n      useMatches\n    }), replayIntegration({\n        maskAllText: true,\n        blockAllMedia: true\n    })],\n\n    replaysSessionSampleRate: 0.1,\n    replaysOnErrorSampleRate: 1\n})`,\n    ]);\n  });\n\n  test('entry.server file contains Sentry code', () => {\n    checkFileContents(`${projectDir}/app/entry.server.tsx`, [\n      'import * as Sentry from \"@sentry/remix\";',\n      `export const handleError = Sentry.wrapHandleErrorWithSentry((error, { request }) => {\n  // Custom handleError implementation\n});`,\n    ]);\n  });\n\n  test('instrumentation.server file contains Sentry initialization', () => {\n    checkFileContents(`${projectDir}/instrumentation.server.mjs`, [\n      'import * as Sentry from \"@sentry/remix\";',\n      `Sentry.init({\n    dsn: \"${TEST_ARGS.PROJECT_DSN}\",\n    tracesSampleRate: 1\n})`,\n    ]);\n  });\n\n  test('root file contains Sentry ErrorBoundary', () => {\n    checkFileContents(`${projectDir}/app/root.tsx`, [\n      'import { captureRemixErrorBoundaryError } from \"@sentry/remix\";',\n      `export const ErrorBoundary = () => {\n  const error = useRouteError();\n  captureRemixErrorBoundaryError(error);\n  return <div>Something went wrong</div>;\n};`,\n    ]);\n  });\n\n  test('builds successfully', async () => {\n    await checkIfBuilds(projectDir);\n  });\n\n  test('runs on dev mode correctly', async () => {\n    await checkIfRunsOnDevMode(\n      projectDir,\n      options?.devModeExpectedOutput || 'to expose',\n    );\n  });\n\n  test('runs on prod mode correctly', async () => {\n    await checkIfRunsOnProdMode(\n      projectDir,\n      options?.prodModeExpectedOutput || '[remix-serve]',\n    );\n  });\n}\n\ndescribe('Remix', () => {\n  describe('with empty project', () => {\n    const integration = Integration.remix;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/remix-test-app',\n    );\n\n    beforeAll(async () => {\n      await runWizardOnRemixProject(projectDir, integration);\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkRemixProject(projectDir, integration);\n  });\n\n  describe('with existing custom Express server', () => {\n    const integration = Integration.remix;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/remix-test-app',\n    );\n\n    beforeAll(async () => {\n      await runWizardOnRemixProject(projectDir, integration, (projectDir) => {\n        createFile(`${projectDir}/server.mjs`, SERVER_TEMPLATE);\n\n        modifyFile(`${projectDir}/package.json`, {\n          '\"start\": \"remix-serve ./build/server/index.js\"':\n            '\"start\": \"node ./server.mjs\"',\n          '\"dev\": \"remix vite:dev\"': '\"dev\": \"node ./server.mjs\"',\n        });\n      });\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkRemixProject(projectDir, integration, {\n      devModeExpectedOutput: 'Express server listening',\n      prodModeExpectedOutput: 'Express server listening',\n    });\n\n    test('server.mjs contains instrumentation file import', () => {\n      checkFileContents(`${projectDir}/server.mjs`, [\n        \"import './instrumentation.server.mjs';\",\n      ]);\n    });\n  });\n});\n"]}