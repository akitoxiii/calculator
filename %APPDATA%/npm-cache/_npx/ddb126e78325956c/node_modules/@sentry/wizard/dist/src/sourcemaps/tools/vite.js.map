{"version":3,"file":"vite.js","sourceRoot":"","sources":["../../../../src/sourcemaps/tools/vite.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { generateCode, parseModule } from 'magicast';\n// @ts-expect-error - magicast is ESM and TS complains about that. It works though\nimport { addVitePlugin } from 'magicast/helpers';\n\nimport type { namedTypes as t } from 'ast-types';\n\nimport * as recast from 'recast';\n\nimport * as Sentry from '@sentry/node';\n\nimport chalk from 'chalk';\nimport {\n  abortIfCancelled,\n  addDotEnvSentryBuildPluginFile,\n  askForToolConfigPath,\n  createNewConfigFile,\n  getPackageDotJson,\n  installPackage,\n  makeCodeSnippet,\n  showCopyPasteInstructions,\n} from '../../utils/clack';\nimport { hasPackageInstalled } from '../../utils/package-json';\n\nimport {\n  SourceMapUploadToolConfigurationFunction,\n  SourceMapUploadToolConfigurationOptions,\n} from './types';\nimport { findFile, hasSentryContent } from '../../utils/ast-utils';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { debug } from '../../utils/debug';\n\nconst getViteConfigSnippet = (\n  options: SourceMapUploadToolConfigurationOptions,\n  colors: boolean,\n) =>\n  makeCodeSnippet(colors, (unchanged, plus, _) =>\n    unchanged(`import { defineConfig } from \"vite\";\n${plus('import { sentryVitePlugin } from \"@sentry/vite-plugin\";')}\n\nexport default defineConfig({\n  build: {\n    ${plus('sourcemap: true, // Source map generation must be turned on')}\n  },\n  plugins: [\n    // Put the Sentry vite plugin after all other plugins\n    ${plus(`sentryVitePlugin({\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n      org: \"${options.orgSlug}\",\n      project: \"${options.projectSlug}\",${\n      options.selfHosted ? `\\n      url: \"${options.url}\",` : ''\n    }\n    }),`)}\n  ],\n});`),\n  );\n\nexport const configureVitePlugin: SourceMapUploadToolConfigurationFunction =\n  async (options) => {\n    await installPackage({\n      packageName: '@sentry/vite-plugin',\n      alreadyInstalled: hasPackageInstalled(\n        '@sentry/vite-plugin',\n        await getPackageDotJson(),\n      ),\n    });\n\n    const viteConfigPath =\n      findFile(path.resolve(process.cwd(), 'vite.config')) ??\n      (await askForToolConfigPath('Vite', 'vite.config.js'));\n\n    let successfullyAdded = false;\n    if (viteConfigPath) {\n      successfullyAdded = await addVitePluginToConfig(viteConfigPath, options);\n    } else {\n      successfullyAdded = await createNewConfigFile(\n        path.join(process.cwd(), 'vite.config.js'),\n        getViteConfigSnippet(options, false),\n        'More information about vite configs: https://vitejs.dev/config/',\n      );\n      Sentry.setTag(\n        'created-new-config',\n        successfullyAdded ? 'success' : 'fail',\n      );\n    }\n\n    if (successfullyAdded) {\n      clack.log.info(\n        `We recommend checking the ${\n          viteConfigPath ? 'modified' : 'added'\n        } file after the wizard finished to ensure it works with your build setup.`,\n      );\n\n      Sentry.setTag('ast-mod', 'success');\n    } else {\n      Sentry.setTag('ast-mod', 'fail');\n      await showCopyPasteInstructions({\n        filename: path.basename(viteConfigPath || 'vite.config.js'),\n        codeSnippet: getViteConfigSnippet(options, true),\n      });\n    }\n\n    await addDotEnvSentryBuildPluginFile(options.authToken);\n  };\n\nexport async function addVitePluginToConfig(\n  viteConfigPath: string,\n  options: SourceMapUploadToolConfigurationOptions,\n): Promise<boolean> {\n  try {\n    const prettyViteConfigFilename = chalk.cyan(path.basename(viteConfigPath));\n\n    const viteConfigContent = (\n      await fs.promises.readFile(viteConfigPath)\n    ).toString();\n\n    const mod = parseModule(viteConfigContent);\n\n    if (hasSentryContent(mod.$ast as t.Program)) {\n      const shouldContinue = await abortIfCancelled(\n        clack.select({\n          message: `${prettyViteConfigFilename} already contains Sentry-related code. Should the wizard modify it anyway?`,\n          options: [\n            {\n              label: 'Yes, add the Sentry Vite plugin',\n              value: true,\n            },\n            {\n              label: 'No, show me instructions to manually add the plugin',\n              value: false,\n            },\n          ],\n          initialValue: true,\n        }),\n      );\n\n      if (!shouldContinue) {\n        Sentry.setTag('ast-mod-fail-reason', 'has-sentry-content');\n        return false;\n      }\n    }\n\n    const enabledSourcemaps = enableSourcemapGeneration(mod.$ast as t.Program);\n    if (!enabledSourcemaps) {\n      Sentry.setTag('ast-mod-fail-reason', 'insertion-fail');\n      return false;\n    }\n\n    const { orgSlug: org, projectSlug: project, selfHosted, url } = options;\n\n    addVitePlugin(mod, {\n      imported: 'sentryVitePlugin',\n      from: '@sentry/vite-plugin',\n      constructor: 'sentryVitePlugin',\n      options: {\n        org,\n        project,\n        ...(selfHosted && { url }),\n      },\n    });\n\n    const code = generateCode(mod.$ast).code;\n\n    await fs.promises.writeFile(viteConfigPath, code);\n\n    clack.log.success(\n      `Added the Sentry Vite plugin to ${prettyViteConfigFilename} and enabled source maps`,\n    );\n\n    return true;\n  } catch (e) {\n    debug(e);\n    Sentry.setTag('ast-mod-fail-reason', 'insertion-fail');\n    return false;\n  }\n}\n\nfunction enableSourcemapGeneration(program: t.Program): boolean {\n  const configObj = getViteConfigObject(program);\n\n  if (!configObj) {\n    return false;\n  }\n\n  const b = recast.types.builders;\n\n  const buildProp = configObj.properties.find(\n    (p: t.ObjectProperty) =>\n      p.key.type === 'Identifier' && p.key.name === 'build',\n  );\n\n  // case 1: build property doesn't exist yet, so we can just add it\n  if (!buildProp) {\n    configObj.properties.push(\n      b.objectProperty(\n        b.identifier('build'),\n        b.objectExpression([\n          b.objectProperty(b.identifier('sourcemap'), b.booleanLiteral(true)),\n        ]),\n      ),\n    );\n    return true;\n  }\n\n  const isValidBuildProp =\n    buildProp.type === 'ObjectProperty' &&\n    buildProp.value.type === 'ObjectExpression';\n\n  if (!isValidBuildProp) {\n    return false;\n  }\n\n  const sourceMapsProp =\n    buildProp.value.type === 'ObjectExpression' &&\n    buildProp.value.properties.find(\n      (p: t.ObjectProperty) =>\n        p.key.type === 'Identifier' && p.key.name === 'sourcemap',\n    );\n\n  // case 2: build.sourcemap property doesn't exist yet, so we just add it\n  if (!sourceMapsProp && buildProp.value.type === 'ObjectExpression') {\n    buildProp.value.properties.push(\n      b.objectProperty(b.identifier('sourcemap'), b.booleanLiteral(true)),\n    );\n    return true;\n  }\n\n  if (!sourceMapsProp || sourceMapsProp.type !== 'ObjectProperty') {\n    return false;\n  }\n\n  // case 3: build.sourcemap property exists, and it's set to 'hidden'\n  if (\n    sourceMapsProp.value.type === 'StringLiteral' &&\n    sourceMapsProp.value.value === 'hidden'\n  ) {\n    // nothing to do for us\n    return true;\n  }\n\n  // case 4: build.sourcemap property exists, but it's not enabled, so we set it to true\n  //         or it is already true in which case this is a noop\n  sourceMapsProp.value = b.booleanLiteral(true);\n  return true;\n}\n\nfunction getViteConfigObject(\n  program: t.Program,\n): t.ObjectExpression | undefined {\n  const defaultExport = program.body.find(\n    (s) => s.type === 'ExportDefaultDeclaration',\n  ) as t.ExportDefaultDeclaration;\n\n  if (!defaultExport) {\n    return undefined;\n  }\n\n  if (defaultExport.declaration.type === 'ObjectExpression') {\n    return defaultExport.declaration;\n  }\n\n  if (\n    defaultExport.declaration.type === 'CallExpression' &&\n    defaultExport.declaration.arguments[0].type === 'ObjectExpression'\n  ) {\n    return defaultExport.declaration.arguments[0];\n  }\n\n  if (defaultExport.declaration.type === 'Identifier') {\n    const configId = defaultExport.declaration.name;\n    return findConfigNode(configId, program);\n  }\n\n  return undefined;\n}\n\nfunction findConfigNode(\n  configId: string,\n  program: t.Program,\n): t.ObjectExpression | undefined {\n  for (const node of program.body) {\n    if (node.type === 'VariableDeclaration') {\n      for (const declaration of node.declarations) {\n        if (\n          declaration.type === 'VariableDeclarator' &&\n          declaration.id.type === 'Identifier' &&\n          declaration.id.name === configId &&\n          declaration.init?.type === 'ObjectExpression'\n        ) {\n          return declaration.init;\n        }\n      }\n    }\n  }\n  return undefined;\n}\n"]}