{"version":3,"file":"OpenSentry.js","sourceRoot":"","sources":["../../../lib/Steps/OpenSentry.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL } from 'node:url';\nimport type { Answers } from 'inquirer';\n\nimport { mapIntegrationToPlatform } from '../Constants';\nimport { BottomBar } from '../Helper/BottomBar';\nimport { dim, green, l, nl, red } from '../Helper/Logging';\nimport { getCurrentIntegration } from '../Helper/Wizard';\nimport { BaseStep } from './BaseStep';\n\nimport opn from 'opn';\n\nexport class OpenSentry extends BaseStep {\n  public async emit(answers: Answers): Promise<Answers> {\n    if (!(await getCurrentIntegration(answers).shouldEmit(answers))) {\n      dim('Skipping connection to Sentry due files already patched');\n      return {};\n    }\n    if (this._argv.skipConnect) {\n      dim('Skipping connection to Sentry');\n      return {};\n    }\n\n    const baseUrl = this._argv.url;\n\n    BottomBar.show('Loading wizard...');\n    this.debug(`Loading wizard for ${baseUrl}`);\n\n    try {\n      const response = await fetch(`${baseUrl}api/0/wizard/`);\n      if (!response.ok) {\n        throw new Error(\n          `Failed to connect to Sentry: ${response.status} ${response.statusText}`,\n        );\n      }\n      const data = (await response.json()) as { hash: string };\n\n      BottomBar.hide();\n\n      const urlObj = new URL(`${baseUrl}account/settings/wizard/${data.hash}/`);\n      if (this._argv.signup) {\n        urlObj.searchParams.set('signup', '1');\n        // integration maps to platform in the wizard\n        if (this._argv.integration) {\n          const platform = mapIntegrationToPlatform(this._argv.integration);\n          if (platform) {\n            urlObj.searchParams.set('project_platform', platform);\n          }\n        }\n        if (this._argv.promoCode) {\n          urlObj.searchParams.set('code', this._argv.promoCode);\n        }\n      }\n\n      if (this._argv.comingFrom) {\n        // Used to display login/signup instructions when the user is coming from a partner site (e.g. Vercel)\n        urlObj.searchParams.set('partner', this._argv.comingFrom);\n      }\n\n      const urlToOpen = urlObj.toString();\n\n      // opn throws in environments that don't have a browser (e.g. remote shells) so we just noop here\n      const noop = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\n      opn(urlToOpen, { wait: false }).then((cp) => cp.on('error', noop), noop);\n\n      nl();\n      l('Please open');\n      green(urlToOpen);\n      l(\"in your browser (if it's not open already)\");\n      nl();\n\n      return { hash: data.hash };\n    } catch (e) {\n      this._argv.skipConnect = true;\n      BottomBar.hide();\n      nl();\n      red(\n        `Wizard couldn't connect to ${baseUrl}\\nmake sure the url is correct`,\n      );\n      l(\n        'But no worries, we fall back to asking you stuff instead, so here we go:',\n      );\n      return {};\n    }\n  }\n}\n"]}