{"version":3,"file":"sentry-cli.js","sourceRoot":"","sources":["../../../../src/sourcemaps/tools/sentry-cli.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport * as Sentry from '@sentry/node';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport {\n  abortIfCancelled,\n  addSentryCliConfig,\n  getPackageDotJson,\n  getPackageManager,\n  installPackage,\n} from '../../utils/clack';\n\nimport { SourceMapUploadToolConfigurationOptions } from './types';\nimport { hasPackageInstalled } from '../../utils/package-json';\nimport { traceStep } from '../../telemetry';\nimport { NPM } from '../../utils/package-manager';\n\nconst SENTRY_NPM_SCRIPT_NAME = 'sentry:sourcemaps';\n\nlet addedToBuildCommand = false;\n\ntype configureSentryCLIOptions = SourceMapUploadToolConfigurationOptions & {\n  defaultArtifactPath?: string;\n};\n\nexport async function configureSentryCLI(\n  options: configureSentryCLIOptions,\n  configureSourcemapGenerationFlow: () => Promise<void> = defaultConfigureSourcemapGenerationFlow,\n  skipValidation = false,\n): Promise<void> {\n  const packageDotJson = await getPackageDotJson();\n\n  await installPackage({\n    packageName: '@sentry/cli',\n    alreadyInstalled: hasPackageInstalled('@sentry/cli', packageDotJson),\n  });\n\n  let validPath = false;\n  let relativeArtifactPath;\n  do {\n    const rawArtifactPath = await abortIfCancelled(\n      clack.text({\n        message: 'Where are your build artifacts located?',\n        placeholder: options.defaultArtifactPath ?? `.${path.sep}out`,\n        initialValue: options.defaultArtifactPath ?? `.${path.sep}out`,\n        validate(value) {\n          if (!value) {\n            return 'Please enter a path.';\n          }\n        },\n      }),\n    );\n\n    if (path.isAbsolute(rawArtifactPath)) {\n      relativeArtifactPath = path.relative(process.cwd(), rawArtifactPath);\n    } else {\n      relativeArtifactPath = rawArtifactPath;\n    }\n\n    try {\n      await fs.promises.access(path.join(process.cwd(), relativeArtifactPath));\n      validPath = true;\n    } catch {\n      validPath = await abortIfCancelled(\n        clack.select({\n          message: `We couldn't find artifacts at ${relativeArtifactPath}. Are you sure that this is the location that contains your build artifacts?`,\n          options: [\n            {\n              label: 'No, let me verify.',\n              value: false,\n            },\n            { label: 'Yes, I am sure!', value: true },\n          ],\n          initialValue: false,\n        }),\n      );\n    }\n  } while (!validPath);\n\n  const relativePosixArtifactPath = relativeArtifactPath\n    .split(path.sep)\n    .join(path.posix.sep);\n\n  if (!skipValidation) {\n    await configureSourcemapGenerationFlow();\n  }\n\n  await createAndAddNpmScript(options, relativePosixArtifactPath);\n\n  if (await askShouldAddToBuildCommand()) {\n    await traceStep('sentry-cli-add-to-build-cmd', () =>\n      addSentryCommandToBuildCommand(),\n    );\n  } else {\n    clack.log.info(\n      `No problem, just make sure to run this script ${chalk.bold(\n        'after',\n      )} building your application but ${chalk.bold('before')} deploying!`,\n    );\n  }\n\n  await addSentryCliConfig({ authToken: options.authToken });\n}\n\nexport async function setupNpmScriptInCI(): Promise<void> {\n  if (addedToBuildCommand) {\n    // No need to tell users to add it manually to their CI\n    // if the script is already added to the build command\n    return;\n  }\n\n  const addedToCI = await abortIfCancelled(\n    clack.select({\n      message: `Add a step to your CI pipeline that runs the ${chalk.cyan(\n        SENTRY_NPM_SCRIPT_NAME,\n      )} script ${chalk.bold('right after')} building your application.`,\n      options: [\n        { label: 'I did, continue!', value: true },\n        {\n          label: \"I'll do it later...\",\n          value: false,\n          hint: chalk.yellow(\n            `You need to run ${chalk.cyan(\n              SENTRY_NPM_SCRIPT_NAME,\n            )} after each build for source maps to work properly.`,\n          ),\n        },\n      ],\n      initialValue: true,\n    }),\n  );\n\n  Sentry.setTag('added-ci-script', addedToCI);\n\n  if (!addedToCI) {\n    clack.log.info(\"Don't forget! :)\");\n  }\n}\n\nasync function createAndAddNpmScript(\n  options: SourceMapUploadToolConfigurationOptions,\n  relativePosixArtifactPath: string,\n): Promise<void> {\n  const sentryCliNpmScript = `sentry-cli sourcemaps inject --org ${\n    options.orgSlug\n  } --project ${\n    options.projectSlug\n  } ${relativePosixArtifactPath} && sentry-cli${\n    options.selfHosted ? ` --url ${options.url}` : ''\n  } sourcemaps upload --org ${options.orgSlug} --project ${\n    options.projectSlug\n  } ${relativePosixArtifactPath}`;\n\n  const packageDotJson = await getPackageDotJson();\n\n  packageDotJson.scripts = packageDotJson.scripts || {};\n  packageDotJson.scripts[SENTRY_NPM_SCRIPT_NAME] = sentryCliNpmScript;\n\n  await fs.promises.writeFile(\n    path.join(process.cwd(), 'package.json'),\n    JSON.stringify(packageDotJson, null, 2),\n  );\n\n  clack.log.info(\n    `Added a ${chalk.cyan(SENTRY_NPM_SCRIPT_NAME)} script to your ${chalk.cyan(\n      'package.json',\n    )}.`,\n  );\n}\n\nasync function askShouldAddToBuildCommand(): Promise<boolean> {\n  const shouldAddToBuildCommand = await abortIfCancelled(\n    clack.select({\n      message: `Do you want to automatically run the ${chalk.cyan(\n        SENTRY_NPM_SCRIPT_NAME,\n      )} script after each production build?`,\n      options: [\n        {\n          label: 'Yes',\n          value: true,\n          hint: 'This will modify your prod build command',\n        },\n        { label: 'No', value: false },\n      ],\n      initialValue: true,\n    }),\n  );\n\n  Sentry.setTag('modify-build-command', shouldAddToBuildCommand);\n\n  return shouldAddToBuildCommand;\n}\n\n/**\n * Add the sentry:sourcemaps command to the prod build command in the package.json\n * - Detect the user's build command\n * - Append the sentry:sourcemaps command to it\n *\n * @param packageDotJson The package.json which will be modified.\n */\nexport async function addSentryCommandToBuildCommand(): Promise<void> {\n  const packageDotJson = await getPackageDotJson();\n  // This usually shouldn't happen because earlier we added the\n  // SENTRY_NPM_SCRIPT_NAME script but just to be sure\n  packageDotJson.scripts = packageDotJson.scripts || {};\n\n  const allNpmScripts = Object.keys(packageDotJson.scripts).filter(\n    (s) => s !== SENTRY_NPM_SCRIPT_NAME,\n  );\n\n  const packageManager = await getPackageManager(NPM);\n\n  // Heuristic to pre-select the build command:\n  // Often, 'build' is the prod build command, so we favour it.\n  // If it's not there, commands that include 'build' might be the prod build command.\n  let buildCommand =\n    typeof packageDotJson.scripts.build === 'string'\n      ? 'build'\n      : allNpmScripts.find((s) => s.toLocaleLowerCase().includes('build'));\n\n  const isProdBuildCommand =\n    !!buildCommand &&\n    (await abortIfCancelled(\n      clack.confirm({\n        message: `Is ${chalk.cyan(\n          `${packageManager.runScriptCommand} ${buildCommand}`,\n        )} your production build command?`,\n      }),\n    ));\n\n  if (allNpmScripts.length && (!buildCommand || !isProdBuildCommand)) {\n    buildCommand = await abortIfCancelled(\n      clack.select({\n        message: `Which ${packageManager.name} command in your ${chalk.cyan(\n          'package.json',\n        )} builds your application for production?`,\n        options: allNpmScripts\n          .map((script) => ({\n            label: script,\n            value: script,\n          }))\n          .concat({ label: 'None of the above', value: 'none' }),\n      }),\n    );\n  }\n\n  if (!buildCommand || buildCommand === 'none') {\n    clack.log.warn(\n      `We can only add the ${chalk.cyan(\n        SENTRY_NPM_SCRIPT_NAME,\n      )} script to another \\`script\\` in your ${chalk.cyan('package.json')}.\nPlease add it manually to your prod build command.`,\n    );\n    return;\n  }\n\n  const oldCommand = packageDotJson.scripts[buildCommand];\n  if (!oldCommand) {\n    // very unlikely to happen but nevertheless\n    clack.log.warn(\n      `\\`${buildCommand}\\` doesn't seem to be part of your package.json scripts`,\n    );\n    return;\n  }\n\n  const newCommand = `${oldCommand} && ${packageManager.runScriptCommand} ${SENTRY_NPM_SCRIPT_NAME}`;\n\n  if (oldCommand.endsWith(SENTRY_NPM_SCRIPT_NAME)) {\n    clack.log.info(\n      `It seems like ${chalk.cyan(\n        SENTRY_NPM_SCRIPT_NAME,\n      )} is already part of your ${chalk.cyan(\n        buildCommand,\n      )} command. Will not add it again.\nCurrent command: ${chalk.dim(oldCommand)}\nWould have injected: ${chalk.dim(newCommand)}`,\n    );\n\n    return;\n  }\n\n  packageDotJson.scripts[buildCommand] = newCommand;\n\n  await fs.promises.writeFile(\n    path.join(process.cwd(), 'package.json'),\n    JSON.stringify(packageDotJson, null, 2),\n  );\n\n  addedToBuildCommand = true;\n\n  clack.log.info(\n    `Added ${chalk.cyan(SENTRY_NPM_SCRIPT_NAME)} script to your ${chalk.cyan(\n      buildCommand,\n    )} command.`,\n  );\n}\n\nasync function defaultConfigureSourcemapGenerationFlow(): Promise<void> {\n  await abortIfCancelled(\n    clack.select({\n      message: `Verify that your build tool is generating source maps. ${chalk.dim(\n        '(Your build output folder should contain .js.map files after a build)',\n      )}`,\n      options: [{ label: 'I checked. Continue!', value: true }],\n      initialValue: true,\n    }),\n  );\n}\n"]}