{"version":3,"file":"Wizard.js","sourceRoot":"","sources":["../../../lib/Helper/Wizard.ts"],"names":[],"mappings":";;;AAKA,2CAAwC;AACxC,uCAAgD;AAEhD,SAAS,uBAAuB,CAAC,IAAoC;IACnE,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAA,aAAG,EAAC,kCAAkC,CAAC,CAAC;KACzC;IACD,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAwB,CAAC;QAC/D,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;KAC7B;IACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAsB,CAAC;IACzD,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAC1B,oBAAoB,CACO,CAAC;QAC9B,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC;KACnC;IACD,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAA4B,CAAC;QAC5E,OAAO,IAAI,CAAC,mBAAmB,CAAC,CAAC;KAClC;AACH,CAAC;AAED,SAAgB,qBAAqB,CAAC,OAAgB;IACpD,OAAO,OAAO,CAAC,WAA8B,CAAC;AAChD,CAAC;AAFD,sDAEC;AAEM,KAAK,UAAU,WAAW,CAC/B,IAAU,EACV,GAAG,KAAsC;IAEzC,IAAI;QACF,uBAAuB,CAAC,IAAsC,CAAC,CAAC;QAChE,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAA,eAAK,EAAC,IAAI,CAAC,CAAC;SACb;QACD,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAA,aAAG,EAAC,4CAA4C,CAAC,CAAC;SACnD;QACD,OAAO,MAAM,KAAK;aACf,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;aAC7B,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5C,OAAO,EAAE,GAAG,UAAU,EAAE,GAAG,OAAO,EAAE,CAAC;QACvC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;KAC3B;IAAC,OAAO,CAAU,EAAE;QACnB,qBAAS,CAAC,IAAI,EAAE,CAAC;QACjB,IAAA,YAAE,GAAE,CAAC;QACL,IAAA,aAAG,EAAC,4BAA4B,CAAC,CAAC;QAClC,IAAA,aAAG,EAAC,IAAI,CAAC,KAAK,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAA,YAAE,GAAE,CAAC;QACL,IAAA,aAAG,EAAC,2CAA2C,CAAC,CAAC;QACjD,IAAA,aAAG,EAAC,mCAAmC,CAAC,CAAC;QACzC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;AACH,CAAC;AA7BD,kCA6BC","sourcesContent":["import type { Answers } from 'inquirer';\n\nimport type { Args } from '../Constants';\nimport type { IStep } from '../Steps/BaseStep';\nimport type { BaseIntegration } from '../Steps/Integrations/BaseIntegration';\nimport { BottomBar } from './BottomBar';\nimport { debug, dim, nl, red } from './Logging';\n\nfunction sanitizeAndValidateArgs(argv: Args & Record<string, unknown>): void {\n  if (argv.quiet === undefined) {\n    argv.quiet = true;\n    dim('will activate quiet mode for you');\n  }\n  if (argv['skip-connect']) {\n    argv.skipConnect = argv['skip-connect'] as Args['skipConnect'];\n    delete argv['skip-connect'];\n  }\n  argv.promoCode = argv['promo-code'] as Args['promoCode'];\n  if (argv['ignore-git-changes']) {\n    argv.ignoreGitChanges = argv[\n      'ignore-git-changes'\n    ] as Args['ignoreGitChanges'];\n    delete argv['ignore-git-changes'];\n  }\n  if (argv['xcode-project-dir']) {\n    argv.xcodeProjectDir = argv['xcode-project-dir'] as Args['xcodeProjectDir'];\n    delete argv['xcode-project-dir'];\n  }\n}\n\nexport function getCurrentIntegration(answers: Answers): BaseIntegration {\n  return answers.integration as BaseIntegration;\n}\n\nexport async function startWizard<M extends IStep>(\n  argv: Args,\n  ...steps: Array<{ new (debug: Args): M }>\n): Promise<Answers> {\n  try {\n    sanitizeAndValidateArgs(argv as Args & Record<string, unknown>);\n    if (argv.debug) {\n      debug(argv);\n    }\n    if (argv.quiet) {\n      dim(\"Quiet mode On, DAMA, don't ask me anything\");\n    }\n    return await steps\n      .map((step) => new step(argv))\n      .reduce(async (answer, step) => {\n        const prevAnswer = await answer;\n        const answers = await step.emit(prevAnswer);\n        return { ...prevAnswer, ...answers };\n      }, Promise.resolve({}));\n  } catch (e: unknown) {\n    BottomBar.hide();\n    nl();\n    red('Sentry Wizard failed with:');\n    red(argv.debug && e instanceof Error ? e.message : String(e));\n    nl();\n    red('Protip: Add --debug to see whats going on');\n    red('OR use --help to see your options');\n    process.exit(1);\n  }\n}\n"]}