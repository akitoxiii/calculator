{"version":3,"file":"code-tools.js","sourceRoot":"","sources":["../../../src/flutter/code-tools.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as Sentry from '@sentry/node';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport {\n  sentryImport,\n  pubspecOptions,\n  sentryProperties,\n  initSnippet,\n} from './templates';\nimport { featureSelectionPrompt } from '../utils/clack';\n\n/**\n * Recursively finds a file per name in subfolders.\n * @param dir - The directory to start searching.\n * @param name - The name of the file including path extension.\n * @returns The path to the main.dart file or null if not found.\n */\nexport function findFile(dir: string, name: string): string | null {\n  const files: string[] = fs.readdirSync(dir);\n\n  for (const file of files) {\n    const fullPath: string = path.join(dir, file);\n    const stats: fs.Stats = fs.statSync(fullPath);\n\n    if (stats.isDirectory()) {\n      const result: string | null = findFile(fullPath, name);\n      if (result) {\n        return result;\n      }\n    } else if (file === name) {\n      return fullPath;\n    }\n  }\n\n  return null;\n}\n\nexport function patchPubspec(\n  pubspecFile: string | null,\n  sentryDartFlutterVersion: string,\n  sentryDartPluginVersion: string,\n  project: string,\n  org: string,\n): boolean {\n  try {\n    if (!pubspecFile) {\n      throw new Error('pubspec.yaml is not provided or invalid.');\n    }\n\n    let pubspecContent = fs.readFileSync(pubspecFile, 'utf8');\n\n    if (!pubspecContent.includes('sentry_flutter:')) {\n      const dependenciesIndex = getDependenciesLocation(pubspecContent);\n\n      pubspecContent =\n        pubspecContent.slice(0, dependenciesIndex) +\n        `  sentry_flutter: ${sentryDartFlutterVersion}\\n` +\n        pubspecContent.slice(dependenciesIndex);\n\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold('sentry_flutter')} added to pubspec.yaml`,\n        ),\n      );\n    } else {\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold('sentry_flutter')} is already included in pubspec.yaml`,\n        ),\n      );\n    }\n\n    if (!pubspecContent.includes('sentry_dart_plugin:')) {\n      const devDependenciesIndex = getDevDependenciesLocation(pubspecContent);\n      pubspecContent =\n        pubspecContent.slice(0, devDependenciesIndex) +\n        `  sentry_dart_plugin: ${sentryDartPluginVersion}\\n` +\n        pubspecContent.slice(devDependenciesIndex);\n\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold('sentry_dart_plugin')} added to pubspec.yaml`,\n        ),\n      );\n    } else {\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold(\n            'sentry_dart_plugin',\n          )} is already included in pubspec.yaml`,\n        ),\n      );\n    }\n\n    if (!pubspecContent.includes('sentry:')) {\n      pubspecContent += '\\n';\n      pubspecContent += pubspecOptions(project, org);\n\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold('sentry plugin configuration')} added to pubspec.yaml`,\n        ),\n      );\n    } else {\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold(\n            'sentry plugin configuration',\n          )} is already included in pubspec.yaml`,\n        ),\n      );\n    }\n\n    fs.writeFileSync(pubspecFile, pubspecContent, 'utf8');\n\n    return true;\n  } catch (error) {\n    clack.log.warn(`Failed to read/write ${chalk.cyan('pubspec.yaml')} file.`);\n    Sentry.captureException(error);\n    return false;\n  }\n}\n\nexport function addProperties(pubspecFile: string | null, authToken: string) {\n  try {\n    if (!pubspecFile) {\n      throw new Error('pubspec.yaml is not provided or invalid.');\n    }\n\n    const pubspecDir = path.dirname(pubspecFile);\n    const sentryPropertiesFileName = 'sentry.properties';\n    const sentryPropertiesFile = path.join(\n      pubspecDir,\n      sentryPropertiesFileName,\n    );\n    const sentryPropertiesContent = sentryProperties(authToken);\n\n    fs.writeFileSync(sentryPropertiesFile, sentryPropertiesContent, 'utf8');\n\n    const gitignoreFile = path.join(pubspecDir, '.gitignore');\n    if (fs.existsSync(gitignoreFile)) {\n      fs.appendFileSync(gitignoreFile, `\\n${sentryPropertiesFileName}\\n`);\n    } else {\n      fs.writeFileSync(gitignoreFile, `${sentryPropertiesFileName}\\n`, 'utf8');\n    }\n    return true;\n  } catch (error) {\n    clack.log.warn(`Failed to read/write ${chalk.cyan('pubspec.yaml')} file.`);\n    Sentry.captureException(error);\n    return false;\n  }\n}\n\nexport async function patchMain(\n  mainFile: string | null,\n  dsn: string,\n  canEnableProfiling: boolean,\n): Promise<boolean> {\n  try {\n    if (!mainFile) {\n      throw new Error('pubspec.yaml is not provided or invalid.');\n    }\n\n    let mainContent = fs.readFileSync(mainFile, 'utf8');\n    if (\n      /import\\s+['\"]package[:]sentry_flutter\\/sentry_flutter\\.dart['\"];?/i.test(\n        mainContent,\n      )\n    ) {\n      // sentry is already configured\n      clack.log.success(\n        chalk.greenBright(\n          `${chalk.bold('main.dart')} already has Sentry configured.`,\n        ),\n      );\n      return true;\n    }\n\n    const features = [\n      {\n        id: 'tracing',\n        prompt: `Do you want to enable ${chalk.bold(\n          'Tracing',\n        )} to track the performance of your application?`,\n        enabledHint: 'recommended',\n      },\n    ];\n    if (canEnableProfiling) {\n      features.push({\n        id: 'profiling',\n        prompt: `Do you want to enable ${chalk.bold(\n          'Profiling',\n        )} to analyze CPU usage and optimize performance-critical code on iOS & macOS?`,\n        enabledHint: 'recommended, tracing must be enabled',\n      });\n    }\n\n    const selectedFeatures = await featureSelectionPrompt(features);\n    const normalizedSelectedFeatures = {\n      tracing: selectedFeatures.tracing ?? false,\n      profiling: selectedFeatures.profiling ?? false,\n    };\n    mainContent = patchMainContent(\n      dsn,\n      mainContent,\n      normalizedSelectedFeatures,\n    );\n\n    fs.writeFileSync(mainFile, mainContent, 'utf8');\n\n    clack.log.success(\n      chalk.greenBright(\n        `Patched ${chalk.bold(\n          'main.dart',\n        )} with the Sentry setup and test error snippet.`,\n      ),\n    );\n\n    return true;\n  } catch (error) {\n    clack.log.warn(`Failed to read/write ${chalk.cyan('main.dart')} file.`);\n    Sentry.captureException(error);\n    return false;\n  }\n}\n\nexport function patchMainContent(\n  dsn: string,\n  mainContent: string,\n  selectedFeatures: {\n    tracing: boolean;\n    profiling: boolean;\n  },\n): string {\n  const importIndex = getLastImportLineLocation(mainContent);\n  mainContent =\n    mainContent.slice(0, importIndex) +\n    sentryImport +\n    mainContent.slice(importIndex);\n\n  // Find and replace `runApp(...)`\n  mainContent = mainContent.replace(\n    /runApp\\(([\\s\\S]*?)\\);/g, // Match the `runApp(...)` invocation\n    (_, runAppArgs) => initSnippet(dsn, selectedFeatures, runAppArgs as string),\n  );\n\n  // Make the `main` function async if it's not already\n  mainContent = mainContent.replace(\n    /void\\s+main\\(\\)\\s*\\{/g,\n    'Future<void> main() async {',\n  );\n\n  return mainContent;\n}\n\nexport function getLastImportLineLocation(sourceCode: string): number {\n  const importRegex = /import\\s+['\"].*['\"].*;/gim;\n  return getLastReqExpLocation(sourceCode, importRegex);\n}\n\nexport function getDependenciesLocation(sourceCode: string): number {\n  const dependencyRegex = /^dependencies:\\s*$/gim;\n  return getLastReqExpLocation(sourceCode, dependencyRegex);\n}\n\nexport function getDevDependenciesLocation(sourceCode: string): number {\n  const dependencyRegex = /^dev_dependencies:\\s*$/gim;\n  return getLastReqExpLocation(sourceCode, dependencyRegex);\n}\n\n// Helper\n\nfunction getLastReqExpLocation(sourceCode: string, regExp: RegExp): number {\n  let match = regExp.exec(sourceCode);\n  let importIndex = 0;\n  while (match) {\n    importIndex = match.index + match[0].length + 1;\n    match = regExp.exec(sourceCode);\n  }\n  return importIndex;\n}\n"]}