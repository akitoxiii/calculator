{"version":3,"file":"gradle.js","sourceRoot":"","sources":["../../../src/android/gradle.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport * as fs from 'fs';\nimport { abortIfCancelled, askForItemSelection } from '../utils/clack';\nimport {\n  plugin,\n  pluginKts,\n  pluginsBlock,\n  pluginsBlockKts,\n  sourceContext,\n  sourceContextKts,\n} from './templates';\nimport * as bash from '../utils/bash';\nimport * as Sentry from '@sentry/node';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport { fetchSdkVersion } from '../utils/release-registry';\n\n/**\n * A Gradle project may contain multiple modules, some of them may be applications, some of them may be libraries.\n * We are only interested in applications. For example:\n *\n * myproject/\n *   app/\n *   lib1/\n *   lib2/\n *   wearApp/\n *\n * In this case^ we are interested in app/ and wearApp/\n *\n * @param buildGradleFiles a list of build.gradle(.kts) paths that contain the com.android.application plugin\n * @returns the selected project for setting up\n */\nexport async function selectAppFile(\n  buildGradleFiles: string[],\n): Promise<string> {\n  const appFiles = [];\n  for (let index = 0; index < buildGradleFiles.length; index++) {\n    const file = buildGradleFiles[index];\n    const text = fs.readFileSync(file, 'utf8');\n    if (/\\(?[\"']com\\.android\\.application[\"']\\)?(?!.*\\S)/.test(text)) {\n      appFiles.push(file);\n    }\n  }\n\n  if (appFiles.length === 0) {\n    Sentry.setTag('custom-build-logic', true);\n    const appFile = await abortIfCancelled(\n      clack.text({\n        message: `Unable to find your app's directory. \n        Please enter the relative path to your app's build.gradle file from the root project`,\n        placeholder: 'app/build.gradle.kts',\n        validate(value) {\n          if (!value.includes('.gradle') || !fs.existsSync(value))\n            return `Not a valid gradle file.`;\n        },\n      }),\n    );\n    return appFile;\n  }\n\n  let appFile;\n  if (appFiles.length === 1) {\n    Sentry.setTag('multiple-projects', false);\n    appFile = appFiles[0];\n  } else {\n    Sentry.setTag('multiple-projects', true);\n    appFile = (\n      await askForItemSelection(\n        appFiles,\n        'Which project do you want to add Sentry to?',\n      )\n    ).value;\n  }\n  Sentry.setTag('custom-build-logic', false);\n  return appFile;\n}\n\n/**\n * Patches a build.gradle(.kts) file that contains `com.android.application` plugin.\n * There are multiple cases we have to handle here:\n *   - An existing `plugins {}` block:\n *     - We just have to add our plugin inside the block\n *   - No existing `plugins {}` block\n *     - We have to add the entire block in the beginning of the file, BUT *after imports*\n *\n * For example (2nd case):\n *\n * ```\n * import net.ltgt.gradle.errorprone.errorprone\n *\n * // our plugins block goes here <--\n * plugins {\n *   id(\"io.sentry.android.gradle\") version \"3.12.0\"\n * }\n *\n * apply(plugin = \"com.android.application\")\n *\n * android {\n *   ...\n * }\n * ```\n *\n * In the end we run `./gradlew` to verify the config is build-able and not broken.\n *\n * @param appFile the selected Gradle application project\n * @returns true if successfully added Sentry Gradle config, false otherwise\n */\nexport async function addGradlePlugin(\n  appFile: string,\n  orgSlug: string,\n  projectSlug: string,\n): Promise<boolean> {\n  const gradleScript = fs.readFileSync(appFile, 'utf8');\n\n  if (/\\(?[\"']io\\.sentry\\.android\\.gradle[\"']\\)?/.test(gradleScript)) {\n    // sentry gradle plugin is already installed\n    clack.log.success(\n      chalk.greenBright(\n        `${chalk.bold(\n          'Sentry Gradle plugin',\n        )} is already added to the project.`,\n      ),\n    );\n    maybeAddSourceContextConfig(appFile, gradleScript, orgSlug, projectSlug);\n    return true;\n  }\n\n  const pluginVersion = await fetchSdkVersion(\n    'sentry.java.android.gradle-plugin',\n  );\n  const pluginsBlockMatch = /plugins\\s*{[^{}]*}/.exec(gradleScript);\n  let newGradleScript;\n  if (!pluginsBlockMatch) {\n    // no \"plugins {}\" block, we can just add our own after imports\n    const regex = /import\\s+[\\w.]+/gm;\n    let importsMatch = regex.exec(gradleScript);\n    let insertIndex = 0;\n    while (importsMatch) {\n      insertIndex = importsMatch.index + importsMatch[0].length + 1;\n      importsMatch = regex.exec(gradleScript);\n    }\n\n    if (appFile.endsWith('.kts')) {\n      newGradleScript =\n        gradleScript.slice(0, insertIndex) +\n        pluginsBlockKts(pluginVersion) +\n        gradleScript.slice(insertIndex);\n    } else {\n      newGradleScript =\n        gradleScript.slice(0, insertIndex) +\n        pluginsBlock(pluginVersion) +\n        gradleScript.slice(insertIndex);\n    }\n  } else {\n    const insertIndex =\n      pluginsBlockMatch.index + pluginsBlockMatch[0].length - 1;\n    if (appFile.endsWith('.kts')) {\n      newGradleScript =\n        gradleScript.slice(0, insertIndex) +\n        pluginKts(pluginVersion) +\n        gradleScript.slice(insertIndex);\n    } else {\n      newGradleScript =\n        gradleScript.slice(0, insertIndex) +\n        plugin(pluginVersion) +\n        gradleScript.slice(insertIndex);\n    }\n  }\n  fs.writeFileSync(appFile, newGradleScript, 'utf8');\n\n  maybeAddSourceContextConfig(appFile, newGradleScript, orgSlug, projectSlug);\n\n  const buildSpinner = clack.spinner();\n\n  buildSpinner.start(\n    'Running ./gradlew to verify changes (this may take a few minutes)...',\n  );\n\n  try {\n    await bash.execute('./gradlew');\n    buildSpinner.stop(\n      chalk.greenBright(\n        `${chalk.bold('Sentry Gradle plugin')} added to the project.`,\n      ),\n    );\n  } catch (e) {\n    buildSpinner.stop();\n    Sentry.captureException('Gradle Sync failed');\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Looks for the applications packageName (namespace) in the specified build.gradle(.kts) file.\n *\n * ```\n * android {\n *   namespace 'my.package.name' <-- this is what we extract\n *\n *   compileSdkVersion = 31\n *   ...\n * }\n * ```\n * @param appFile\n * @returns the packageName(namespace) of the app if available\n */\nexport function getNamespace(appFile: string): string | undefined {\n  const gradleScript = fs.readFileSync(appFile, 'utf8');\n\n  const namespaceMatch = /namespace\\s*=?\\s*['\"]([^'\"]+)['\"]/i.exec(\n    gradleScript,\n  );\n  if (!namespaceMatch || namespaceMatch.length <= 1) {\n    clack.log.warn('Unable to determine application package name.');\n    Sentry.captureException('No package name');\n    return undefined;\n  }\n\n  const namespace = namespaceMatch[1];\n  return namespace;\n}\n\n/**\n * Adds source context configuration to the gradleScript if `sentry {}` block is not yet configured,\n *\n * @param appFile\n * @param gradleScript\n */\nfunction maybeAddSourceContextConfig(\n  appFile: string,\n  gradleScript: string,\n  orgSlug: string,\n  projectSlug: string,\n) {\n  if (!/sentry\\s*\\{[^}]*\\}/i.test(gradleScript)) {\n    // if no sentry {} block is configured, we add our own with source context enabled\n    if (appFile.endsWith('.kts')) {\n      fs.appendFileSync(\n        appFile,\n        sourceContextKts(orgSlug, projectSlug),\n        'utf8',\n      );\n    } else {\n      fs.appendFileSync(appFile, sourceContext(orgSlug, projectSlug), 'utf8');\n    }\n  }\n}\n"]}