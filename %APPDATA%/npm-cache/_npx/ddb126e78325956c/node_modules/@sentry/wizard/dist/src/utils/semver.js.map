{"version":3,"file":"semver.js","sourceRoot":"","sources":["../../../src/utils/semver.ts"],"names":[],"mappings":";;;AAAA,mCAA8D;AAE9D,SAAgB,oBAAoB,CAAC,EACnC,OAAO,EACP,kBAAkB,EAClB,WAAW,GAKZ;IACC,IAAI,OAAO,KAAK,QAAQ,EAAE;QACxB,OAAO,WAAW,CAAC;KACpB;IAED,IAAI,kBAAkB,EAAE,OAAO,CAAC;IAEhC,IAAI,IAAA,cAAK,EAAC,OAAO,CAAC,EAAE;QAClB,kBAAkB,GAAG,IAAA,cAAK,EAAC,OAAO,CAAC,CAAC;QACpC,OAAO,GAAG,KAAK,CAAC;KACjB;SAAM,IAAI,IAAA,mBAAU,EAAC,OAAO,CAAC,EAAE;QAC9B,kBAAkB,GAAG,IAAA,mBAAU,EAAC,OAAO,CAAC,CAAC;QACzC,OAAO,GAAG,IAAI,CAAC;KAChB;IAED,OAAO;IACL,yGAAyG;IACzG,CAAC,CAAC,kBAAkB;QACpB,CAAC,OAAO;YACN,CAAC,CAAC,IAAA,eAAM,EAAC,kBAAkB,EAAE,kBAAkB,CAAC;YAChD,CAAC,CAAC,IAAA,kBAAS,EAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CACvD,CAAC;AACJ,CAAC;AA9BD,oDA8BC","sourcesContent":["import { satisfies, subset, valid, validRange } from 'semver';\n\nexport function fulfillsVersionRange({\n  version,\n  acceptableVersions,\n  canBeLatest,\n}: {\n  version: string;\n  acceptableVersions: string;\n  canBeLatest: boolean;\n}): boolean {\n  if (version === 'latest') {\n    return canBeLatest;\n  }\n\n  let cleanedUserVersion, isRange;\n\n  if (valid(version)) {\n    cleanedUserVersion = valid(version);\n    isRange = false;\n  } else if (validRange(version)) {\n    cleanedUserVersion = validRange(version);\n    isRange = true;\n  }\n\n  return (\n    // If the given version is a bogus format, this will still be undefined and we'll automatically reject it\n    !!cleanedUserVersion &&\n    (isRange\n      ? subset(cleanedUserVersion, acceptableVersions)\n      : satisfies(cleanedUserVersion, acceptableVersions))\n  );\n}\n"]}