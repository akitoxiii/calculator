{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../../src/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Hub,\n  Integrations,\n  NodeClient,\n  type Span,\n  defaultStackParser,\n  flush,\n  makeMain,\n  makeNodeTransport,\n  runWithAsyncContext,\n  setTag,\n  startSpan,\n} from '@sentry/node';\nimport type { WizardOptions } from './utils/types';\nimport { WIZARD_VERSION } from './version';\n\nexport async function withTelemetry<F>(\n  options: {\n    enabled: boolean;\n    integration: string;\n    wizardOptions: WizardOptions;\n  },\n  callback: () => F | Promise<F>,\n): Promise<F> {\n  const { sentryHub, sentryClient } = createSentryInstance(\n    options.enabled,\n    options.integration,\n  );\n\n  makeMain(sentryHub);\n\n  const sentrySession = sentryHub.startSession();\n  sentryHub.captureSession();\n\n  // Set tag for passed CLI args\n  sentryHub.setTag('args.project', !!options.wizardOptions.projectSlug);\n  sentryHub.setTag('args.org', !!options.wizardOptions.orgSlug);\n  sentryHub.setTag('args.saas', !!options.wizardOptions.saas);\n\n  try {\n    return await startSpan(\n      {\n        name: 'sentry-wizard-execution',\n        status: 'ok',\n        op: 'wizard.flow',\n      },\n      async () => {\n        updateProgress('start');\n        const res = await runWithAsyncContext(callback);\n        updateProgress('finished');\n\n        return res;\n      },\n    );\n  } catch (e) {\n    sentryHub.captureException('Error during wizard execution.');\n    sentrySession.status = 'crashed';\n    throw e;\n  } finally {\n    sentryHub.endSession();\n    await sentryClient.flush(3000).then(null, () => {\n      // If telemetry flushing fails we generally don't care\n    });\n    await flush(3000).then(null, () => {\n      // If telemetry flushing fails we generally don't care\n    });\n  }\n}\n\nfunction createSentryInstance(enabled: boolean, integration: string) {\n  const client = new NodeClient({\n    dsn: 'https://8871d3ff64814ed8960c96d1fcc98a27@o1.ingest.sentry.io/4505425820712960',\n    enabled: enabled,\n\n    environment: `production-${integration}`,\n\n    tracesSampleRate: 1,\n    sampleRate: 1,\n\n    release: WIZARD_VERSION,\n    integrations: [new Integrations.Http()],\n    tracePropagationTargets: [/^https:\\/\\/sentry.io\\//],\n\n    stackParser: defaultStackParser,\n\n    beforeSendTransaction: (event) => {\n      delete event.server_name; // Server name might contain PII\n      return event;\n    },\n\n    beforeSend: (event) => {\n      event.exception?.values?.forEach((exception) => {\n        delete exception.stacktrace;\n      });\n\n      delete event.server_name; // Server name might contain PII\n      return event;\n    },\n\n    transport: makeNodeTransport,\n\n    debug: true,\n  });\n\n  const hub = new Hub(client);\n\n  hub.setTag('integration', integration);\n  hub.setTag('node', process.version);\n  hub.setTag('platform', process.platform);\n\n  try {\n    // The `require` call here is fine because the binary node versions\n    // support `require` and we try/catch the call anyway for any other\n    // version of node.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const sea = require('node:sea') as { isSea: () => boolean };\n    hub.setTag('is_binary', sea.isSea());\n  } catch {\n    hub.setTag('is_binary', false);\n  }\n\n  return { sentryHub: hub, sentryClient: client };\n}\n\nexport function traceStep<T>(\n  step: string,\n  callback: (span: Span | undefined) => T,\n): T {\n  updateProgress(step);\n  return startSpan({ name: step, op: 'wizard.step' }, (span) => callback(span));\n}\n\nexport function updateProgress(step: string) {\n  setTag('progress', step);\n}\n"]}