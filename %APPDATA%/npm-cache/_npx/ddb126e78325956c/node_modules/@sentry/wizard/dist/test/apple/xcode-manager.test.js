"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("node:fs"));
const os = __importStar(require("node:os"));
const path = __importStar(require("node:path"));
const templates_1 = require("../../src/apple/templates");
const xcode_manager_1 = require("../../src/apple/xcode-manager");
const vitest_1 = require("vitest");
vitest_1.vi.mock('node:fs', async () => ({
    __esModule: true,
    ...(await vitest_1.vi.importActual('node:fs')),
}));
vitest_1.vi.mock('@clack/prompts', () => ({
    log: {
        info: vitest_1.vi.fn(),
        success: vitest_1.vi.fn(),
        step: vitest_1.vi.fn(),
    },
}));
const appleProjectsPath = path.resolve(__dirname, '../../fixtures/test-applications/apple');
const damagedProjectPath = path.join(appleProjectsPath, 'damaged-missing-configuration-list/Project.xcodeproj/project.pbxproj');
const noTargetsProjectPath = path.join(appleProjectsPath, 'no-targets/Project.xcodeproj/project.pbxproj');
const singleTargetProjectPath = path.join(appleProjectsPath, 'spm-swiftui-single-target/Project.xcodeproj/project.pbxproj');
const multiTargetProjectPath = path.join(appleProjectsPath, 'spm-swiftui-multi-targets/Project.xcodeproj/project.pbxproj');
const projectData = {
    id: '1234567890',
    slug: 'project',
    organization: {
        id: '1234567890',
        name: 'Sentry',
        slug: 'sentry',
    },
    keys: [{ dsn: { public: 'https://sentry.io/1234567890' } }],
};
(0, vitest_1.describe)('XcodeManager', () => {
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.describe)('XcodeProject', () => {
        (0, vitest_1.describe)('getAllTargets', () => {
            (0, vitest_1.describe)('single target', () => {
                (0, vitest_1.it)('should return all targets', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    // -- Act --
                    const targets = xcodeProject.getAllTargets();
                    // -- Assert --
                    (0, vitest_1.expect)(targets).toEqual(['Project']);
                });
            });
            (0, vitest_1.describe)('multiple targets', () => {
                (0, vitest_1.it)('should return all targets', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(multiTargetProjectPath);
                    // -- Act --
                    const targets = xcodeProject.getAllTargets();
                    // -- Assert --
                    (0, vitest_1.expect)(targets).toEqual(['Project1', 'Project2']);
                });
            });
            (0, vitest_1.describe)('no targets', () => {
                (0, vitest_1.it)('should return an empty array', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(noTargetsProjectPath);
                    // -- Act --
                    const targets = xcodeProject.getAllTargets();
                    // -- Assert --
                    (0, vitest_1.expect)(targets).toEqual([]);
                });
            });
            (0, vitest_1.describe)('project with missing configuration list', () => {
                (0, vitest_1.it)('should return an empty array', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(damagedProjectPath);
                    // -- Act --
                    const targets = xcodeProject.getAllTargets();
                    // -- Assert --
                    (0, vitest_1.expect)(targets).toEqual([]);
                });
            });
        });
        (0, vitest_1.describe)('updateXcodeProject', () => {
            let sourceProjectPath;
            let tempProjectPath;
            let xcodeProject;
            (0, vitest_1.beforeEach)(() => {
                const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'update-xcode-project'));
                sourceProjectPath = singleTargetProjectPath;
                tempProjectPath = path.resolve(tempDir, 'project.pbxproj');
                fs.copyFileSync(sourceProjectPath, tempProjectPath);
                xcodeProject = new xcode_manager_1.XcodeProject(tempProjectPath);
            });
            (0, vitest_1.describe)('upload symbols script', () => {
                const scriptVariants = [
                    {
                        uploadSource: true,
                        includeHomebrewPath: true,
                    },
                    {
                        uploadSource: true,
                        includeHomebrewPath: false,
                    },
                    {
                        uploadSource: false,
                        includeHomebrewPath: true,
                    },
                    {
                        uploadSource: false,
                        includeHomebrewPath: false,
                    },
                ];
                for (const variant of scriptVariants) {
                    (0, vitest_1.describe)(`upload source = ${variant.uploadSource?.toString()} and include homebrew path = ${variant.includeHomebrewPath.toString()}`, () => {
                        (0, vitest_1.beforeEach)(() => {
                            vitest_1.vi.spyOn(fs, 'existsSync').mockReturnValue(variant.includeHomebrewPath);
                        });
                        (0, vitest_1.afterEach)(() => {
                            vitest_1.vi.restoreAllMocks();
                        });
                        (0, vitest_1.it)('should add the upload symbols script to the target', () => {
                            // -- Arrange --
                            const generatedShellScript = (0, templates_1.getRunScriptTemplate)(projectData.organization.slug, projectData.slug, variant.uploadSource, variant.includeHomebrewPath);
                            const expectedShellScript = `"${generatedShellScript.replace(/"/g, '\\"')}"`;
                            // -- Act --
                            xcodeProject.updateXcodeProject(projectData, 'Project', false, // Ignore SPM reference
                            variant.uploadSource);
                            // -- Assert --
                            const updatedXcodeProject = new xcode_manager_1.XcodeProject(tempProjectPath);
                            // Expect the upload symbols script to be added
                            const scriptObjects = updatedXcodeProject.objects.PBXShellScriptBuildPhase;
                            (0, vitest_1.expect)(scriptObjects).toBeDefined();
                            if (!scriptObjects) {
                                throw new Error('Script objects not found');
                            }
                            const scriptKeys = Object.keys(scriptObjects);
                            (0, vitest_1.expect)(scriptKeys).toHaveLength(2);
                            // Find the script ID
                            const scriptId = scriptKeys.find((key) => !key.endsWith('_comment'));
                            (0, vitest_1.expect)(scriptId).toBeDefined();
                            if (!scriptId) {
                                throw new Error('Script ID not found');
                            }
                            (0, vitest_1.expect)(scriptId).toMatch(/^[A-F0-9]{24}$/i);
                            // Expect the script to be added
                            const script = scriptObjects[scriptId];
                            (0, vitest_1.expect)(script).toBeDefined();
                            (0, vitest_1.expect)(typeof script).not.toBe('string');
                            (0, vitest_1.expect)(script.inputPaths).toEqual([
                                '"${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${TARGET_NAME}"',
                            ]);
                            (0, vitest_1.expect)(script.outputPaths).toEqual([]);
                            (0, vitest_1.expect)(script.shellPath).toBe('/bin/sh');
                            (0, vitest_1.expect)(script.shellScript).toEqual(expectedShellScript);
                            const commentKey = `${scriptId}_comment`;
                            (0, vitest_1.expect)(scriptKeys).toContain(commentKey);
                            (0, vitest_1.expect)(scriptObjects[commentKey]).toBe('Upload Debug Symbols to Sentry');
                        });
                    });
                }
            });
            (0, vitest_1.describe)('debug information format and sandbox', () => {
                (0, vitest_1.describe)('upload source is false', () => {
                    (0, vitest_1.it)('should not update the Xcode project', () => {
                        // -- Act --
                        xcodeProject.updateXcodeProject(projectData, 'Project', false, // Ignore SPM reference
                        false);
                        // -- Assert --
                        const expectedXcodeProject = new xcode_manager_1.XcodeProject(sourceProjectPath);
                        (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toEqual(expectedXcodeProject.objects.XCBuildConfiguration);
                    });
                });
                (0, vitest_1.describe)('upload source is true', () => {
                    const uploadSource = true;
                    (0, vitest_1.describe)('named target not found', () => {
                        (0, vitest_1.it)('should not update the flags in the Xcode project', () => {
                            // -- Act --
                            xcodeProject.updateXcodeProject(projectData, 'Invalid Target Name', false, // Ignore SPM reference
                            uploadSource);
                            // -- Assert --
                            const originalXcodeProject = new xcode_manager_1.XcodeProject(sourceProjectPath);
                            (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toEqual(originalXcodeProject.objects.XCBuildConfiguration);
                        });
                    });
                    (0, vitest_1.describe)('named target found', () => {
                        (0, vitest_1.describe)('build configurations is undefined', () => {
                            (0, vitest_1.it)('should not update the Xcode project', () => {
                                // -- Act --
                                xcodeProject.updateXcodeProject(projectData, 'Invalid Target Name', false, // Ignore SPM reference
                                uploadSource);
                                // -- Assert --
                                const originalXcodeProject = new xcode_manager_1.XcodeProject(sourceProjectPath);
                                (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toEqual(originalXcodeProject.objects.XCBuildConfiguration);
                            });
                        });
                        (0, vitest_1.describe)('no build configurations found', () => {
                            (0, vitest_1.it)('should not update the Xcode project', () => {
                                // -- Arrange --
                                xcodeProject.objects.XCBuildConfiguration = {};
                                // -- Act --
                                xcodeProject.updateXcodeProject(projectData, 'Invalid Target Name', false, // Ignore SPM reference
                                uploadSource);
                                // -- Assert --
                                (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toEqual({});
                            });
                        });
                        (0, vitest_1.describe)('build configurations found', () => {
                            const debugProjectBuildConfigurationListId = 'D4E604DA2D50CEEE00CAB00F';
                            const releaseProjectBuildConfigurationListId = 'D4E604DB2D50CEEE00CAB00F';
                            const debugTargetBuildConfigurationListId = 'D4E604DD2D50CEEE00CAB00F';
                            const releaseTargetBuildConfigurationListId = 'D4E604DE2D50CEEE00CAB00F';
                            (0, vitest_1.it)('should update the target configuration lists', () => {
                                // -- Act --
                                xcodeProject.updateXcodeProject(projectData, 'Project', false, // Ignore SPM reference
                                uploadSource);
                                // -- Assert --
                                (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toBeDefined();
                                // Both Debug and Release are configured equally
                                const expectedConfigKeys = [
                                    debugTargetBuildConfigurationListId,
                                    releaseTargetBuildConfigurationListId, // Release
                                ];
                                for (const key of expectedConfigKeys) {
                                    const buildConfiguration = xcodeProject.objects
                                        .XCBuildConfiguration?.[key];
                                    (0, vitest_1.expect)(buildConfiguration).toBeDefined();
                                    (0, vitest_1.expect)(typeof buildConfiguration).not.toBe('string');
                                    const buildSettings = buildConfiguration.buildSettings ?? {};
                                    (0, vitest_1.expect)(buildSettings.DEBUG_INFORMATION_FORMAT).toBe('"dwarf-with-dsym"');
                                    (0, vitest_1.expect)(buildSettings.ENABLE_USER_SCRIPT_SANDBOXING).toBe('"NO"');
                                }
                            });
                            (0, vitest_1.it)('should not update the project configuration lists', () => {
                                // -- Act --
                                xcodeProject.updateXcodeProject(projectData, 'Project', false, // Ignore SPM reference
                                uploadSource);
                                // -- Assert --
                                (0, vitest_1.expect)(xcodeProject.objects.XCBuildConfiguration).toBeDefined();
                                // Check project build configurations 'Debug'
                                const debugBuildConfiguration = xcodeProject.objects
                                    .XCBuildConfiguration?.[debugProjectBuildConfigurationListId];
                                (0, vitest_1.expect)(debugBuildConfiguration).toBeDefined();
                                (0, vitest_1.expect)(typeof debugBuildConfiguration).not.toBe('string');
                                (0, vitest_1.expect)(debugBuildConfiguration.buildSettings
                                    ?.DEBUG_INFORMATION_FORMAT).toBe('dwarf');
                                (0, vitest_1.expect)(debugBuildConfiguration.buildSettings
                                    ?.ENABLE_USER_SCRIPT_SANDBOXING).toBe('YES');
                                // Check project build configurations 'Release'
                                const releaseBuildConfiguration = xcodeProject.objects
                                    .XCBuildConfiguration?.[releaseProjectBuildConfigurationListId];
                                (0, vitest_1.expect)(releaseBuildConfiguration).toBeDefined();
                                (0, vitest_1.expect)(typeof releaseBuildConfiguration).not.toBe('string');
                                (0, vitest_1.expect)(releaseBuildConfiguration.buildSettings
                                    ?.DEBUG_INFORMATION_FORMAT).toBe('"dwarf-with-dsym"');
                                (0, vitest_1.expect)(releaseBuildConfiguration.buildSettings
                                    ?.ENABLE_USER_SCRIPT_SANDBOXING).toBe('YES');
                            });
                        });
                    });
                });
            });
            (0, vitest_1.describe)('add SPM reference', () => {
                const addSPMReference = true;
                (0, vitest_1.describe)('framework build phase already contains Sentry', () => {
                    (0, vitest_1.it)('should not update the Xcode project', () => {
                        // -- Arrange --
                        xcodeProject.objects.PBXFrameworksBuildPhase = {
                            'framework-id': {
                                isa: 'PBXFrameworksBuildPhase',
                                files: [
                                    {
                                        value: '123',
                                        comment: 'Sentry in Frameworks',
                                    },
                                ],
                            },
                        };
                        // -- Act --
                        xcodeProject.updateXcodeProject(projectData, 'Project', addSPMReference);
                        // -- Assert --
                        const expectedXcodeProject = new xcode_manager_1.XcodeProject(sourceProjectPath);
                        expectedXcodeProject.objects.PBXFrameworksBuildPhase = {
                            'framework-id': {
                                isa: 'PBXFrameworksBuildPhase',
                                files: [
                                    {
                                        value: '123',
                                        comment: 'Sentry in Frameworks',
                                    },
                                ],
                            },
                        };
                        (0, vitest_1.expect)(xcodeProject.objects.PBXFrameworksBuildPhase).toEqual(expectedXcodeProject.objects.PBXFrameworksBuildPhase);
                        (0, vitest_1.expect)(xcodeProject.objects.XCRemoteSwiftPackageReference).toEqual(expectedXcodeProject.objects.XCRemoteSwiftPackageReference);
                        (0, vitest_1.expect)(xcodeProject.objects.XCSwiftPackageProductDependency).toEqual(expectedXcodeProject.objects.XCSwiftPackageProductDependency);
                    });
                });
                (0, vitest_1.it)('should add the SPM reference to the target', () => {
                    // -- Act --
                    xcodeProject.updateXcodeProject(projectData, 'Project', addSPMReference);
                    // -- Assert --
                    // Get the target
                    const target = xcodeProject.objects.PBXNativeTarget?.['D4E604CC2D50CEEC00CAB00F'];
                    (0, vitest_1.expect)(target).toBeDefined();
                    if (!target) {
                        throw new Error('Target is undefined');
                    }
                    // Check the SPM dependency is added to the target
                    (0, vitest_1.expect)(target.packageProductDependencies).toEqual([
                        vitest_1.expect.objectContaining({
                            value: vitest_1.expect.any(String),
                            comment: 'Sentry',
                        }),
                    ]);
                    // Check the SPM package reference object is added to the project
                    const remoteSwiftPackageReferences = xcodeProject.objects.XCRemoteSwiftPackageReference;
                    (0, vitest_1.expect)(remoteSwiftPackageReferences).toBeDefined();
                    if (!remoteSwiftPackageReferences) {
                        throw new Error('XCRemoteSwiftPackageReference is undefined');
                    }
                    const rspRefKeys = Object.keys(remoteSwiftPackageReferences);
                    (0, vitest_1.expect)(rspRefKeys).toHaveLength(2);
                    // First key is expected to be the UUID of the SPM package reference
                    (0, vitest_1.expect)(rspRefKeys[0]).toMatch(/^[A-F0-9]{24}$/i);
                    // Second key is expected to be the UUID of the SPM package reference with _comment suffix
                    (0, vitest_1.expect)(rspRefKeys[1]).toMatch(/^[A-F0-9]{24}_comment$/i);
                    (0, vitest_1.expect)(remoteSwiftPackageReferences?.[rspRefKeys[0]]).toEqual({
                        isa: 'XCRemoteSwiftPackageReference',
                        repositoryURL: '"https://github.com/getsentry/sentry-cocoa/"',
                        requirement: {
                            kind: 'upToNextMajorVersion',
                            minimumVersion: '8.0.0',
                        },
                    });
                    (0, vitest_1.expect)(remoteSwiftPackageReferences?.[rspRefKeys[1]]).toBe('XCRemoteSwiftPackageReference "sentry-cocoa"');
                    // Check the SPM package is a dependency of the target
                    const packageProductDependencies = xcodeProject.objects.XCSwiftPackageProductDependency;
                    (0, vitest_1.expect)(packageProductDependencies).toBeDefined();
                    if (!packageProductDependencies) {
                        throw new Error('XCSwiftPackageProductDependency is undefined');
                    }
                    const ppDepKeys = Object.keys(packageProductDependencies);
                    (0, vitest_1.expect)(ppDepKeys).toHaveLength(2);
                    // First key is expected to be the UUID of the SPM package dependency
                    (0, vitest_1.expect)(ppDepKeys[0]).toMatch(/^[A-F0-9]{24}$/i);
                    // Second key is expected to be the UUID of the SPM package dependency with _comment suffix
                    (0, vitest_1.expect)(ppDepKeys[1]).toMatch(/^[A-F0-9]{24}_comment$/i);
                    (0, vitest_1.expect)(packageProductDependencies?.[ppDepKeys[0]]).toEqual({
                        isa: 'XCSwiftPackageProductDependency',
                        package: rspRefKeys[0],
                        package_comment: 'XCRemoteSwiftPackageReference "sentry-cocoa"',
                        productName: 'Sentry',
                    });
                });
            });
        });
    });
    (0, vitest_1.describe)('filesForTarget', () => {
        (0, vitest_1.describe)('targets are undefined', () => {
            (0, vitest_1.it)('should return undefined', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = undefined;
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toBeUndefined();
            });
        });
        (0, vitest_1.describe)('target not found', () => {
            (0, vitest_1.it)('should return undefined', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                // -- Act --
                const files = xcodeProject.filesForTarget('NonExistentTarget');
                // -- Assert --
                (0, vitest_1.expect)(files).toBeUndefined();
            });
        });
        (0, vitest_1.describe)('target build phases are undefined', () => {
            (0, vitest_1.it)('should return undefined', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = {
                    Project: {
                        isa: 'PBXNativeTarget',
                        name: 'Project',
                        buildPhases: undefined,
                    },
                };
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toBeUndefined();
            });
        });
        (0, vitest_1.describe)('build phases are undefined', () => {
            (0, vitest_1.it)('should return undefined', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = {
                    Project: {
                        isa: 'PBXNativeTarget',
                        name: 'Project',
                        buildPhases: undefined,
                    },
                };
                xcodeProject.objects.PBXSourcesBuildPhase = undefined;
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toBeUndefined();
            });
        });
        (0, vitest_1.describe)('referenced build phase is undefined', () => {
            (0, vitest_1.it)('should return undefined', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = {
                    Project: {
                        isa: 'PBXNativeTarget',
                        name: 'Project',
                        buildPhases: [
                            {
                                value: 'random-build-phase',
                            },
                        ],
                    },
                };
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toBeUndefined();
            });
        });
        (0, vitest_1.describe)('build phase files are undefined', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = {
                    Project: {
                        isa: 'PBXNativeTarget',
                        name: 'Project',
                        buildPhases: [
                            {
                                value: 'build-phase-key',
                            },
                        ],
                    },
                };
                xcodeProject.objects.PBXSourcesBuildPhase = {
                    'build-phase-key': {
                        isa: 'PBXSourcesBuildPhase',
                        files: undefined,
                    },
                };
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('build phase has no files', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                // -- Act --
                const files = xcodeProject.filesForTarget('Project');
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('build phase with files', () => {
            let xcodeProject;
            (0, vitest_1.beforeEach)(() => {
                xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXNativeTarget = {
                    'some-target': {
                        isa: 'PBXNativeTarget',
                        name: 'some-target',
                        buildPhases: [
                            {
                                value: 'build-phase-key',
                            },
                        ],
                    },
                };
                xcodeProject.objects.PBXSourcesBuildPhase = {
                    'build-phase-key': {
                        isa: 'PBXSourcesBuildPhase',
                        files: [
                            {
                                value: 'file-key',
                            },
                        ],
                    },
                };
                xcodeProject.objects.PBXBuildFile = {
                    'file-key': {
                        isa: 'PBXBuildFile',
                        fileRef: 'file-ref-key',
                    },
                };
                xcodeProject.files = [
                    {
                        key: 'file-ref-key',
                        path: 'file-path',
                    },
                ];
            });
            (0, vitest_1.describe)('build file objects are not defined', () => {
                (0, vitest_1.it)('should return empty array', () => {
                    // -- Arrange --
                    xcodeProject.objects.PBXBuildFile = undefined;
                    // -- Act --
                    const files = xcodeProject.filesForTarget('some-target');
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('build file object is not found', () => {
                (0, vitest_1.it)('should return empty array', () => {
                    // -- Arrange --
                    xcodeProject.objects.PBXBuildFile = {};
                    // -- Act --
                    const files = xcodeProject.filesForTarget('some-target');
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('build file object exists', () => {
                (0, vitest_1.describe)('file reference is undefined', () => {
                    (0, vitest_1.it)('should ignore the file', () => {
                        // -- Arrange --
                        xcodeProject.files = [];
                        // -- Act --
                        const files = xcodeProject.filesForTarget('some-target');
                        // -- Assert --
                        (0, vitest_1.expect)(files).toEqual([]);
                    });
                });
                (0, vitest_1.it)('should return array of file paths', () => {
                    // -- Act --
                    const files = xcodeProject.filesForTarget('some-target');
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([
                        path.join(appleProjectsPath, 'spm-swiftui-single-target', 'file-path'),
                    ]);
                });
            });
        });
    });
    (0, vitest_1.describe)('projectFiles', () => {
        (0, vitest_1.describe)('no groups in project', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXGroup = undefined;
                // -- Act --
                const files = xcodeProject.projectFiles();
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('main group not found', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                const project = xcodeProject.objects.PBXProject?.['D4E604C52D50CEEC00CAB00F'];
                if (project) {
                    delete project.mainGroup;
                }
                // -- Act --
                const files = xcodeProject.projectFiles();
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('main group found', () => {
            (0, vitest_1.it)('should return array of file paths', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                // -- Act --
                const files = xcodeProject.projectFiles();
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([
                    {
                        key: 'D4E604CD2D50CEEC00CAB00F',
                        path: 'Project.app',
                    },
                ]);
            });
            (0, vitest_1.it)('should cache the result', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                // Smoke test
                (0, vitest_1.expect)(xcodeProject.files).toBeUndefined();
                // -- Act --
                const files = xcodeProject.projectFiles();
                // -- Assert --
                (0, vitest_1.expect)(xcodeProject.files).toBeDefined();
                (0, vitest_1.expect)(xcodeProject.files).toEqual(files);
            });
        });
    });
    (0, vitest_1.describe)('buildGroup', () => {
        (0, vitest_1.describe)('group has undefined children', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                const group = {
                    isa: 'PBXGroup',
                    children: undefined,
                    path: '',
                };
                // -- Act --
                const files = xcodeProject.buildGroup(group);
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('group has no children', () => {
            (0, vitest_1.it)('should return empty array', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                const group = {
                    isa: 'PBXGroup',
                };
                // -- Act --
                const files = xcodeProject.buildGroup(group);
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
        (0, vitest_1.describe)('group child is file reference', () => {
            const group = {
                isa: 'PBXGroup',
                children: [
                    {
                        value: 'D4E604CD2D50CEEC00CAB00F',
                    },
                ],
                path: '',
            };
            (0, vitest_1.describe)('file references are undefined', () => {
                (0, vitest_1.it)('should return empty array', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    xcodeProject.objects.PBXFileReference = undefined;
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('file reference is string', () => {
                (0, vitest_1.it)('should be ignored', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    const group = {
                        isa: 'PBXGroup',
                        children: [
                            {
                                value: 'D4E604CD2D50CEEC00CAB00F_comment',
                            },
                        ],
                        path: '',
                    };
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('file reference is valid', () => {
                (0, vitest_1.it)('should return array of escaped paths', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    xcodeProject.objects.PBXFileReference = {
                        D4E604CD2D50CEEC00CAB00F: {
                            isa: 'PBXFileReference',
                            path: '"some/path/to/file.swift"',
                            sourceTree: 'SOURCE_ROOT',
                        },
                    };
                    const group = {
                        isa: 'PBXGroup',
                        children: [
                            {
                                value: 'D4E604CD2D50CEEC00CAB00F',
                            },
                        ],
                        path: '',
                    };
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([
                        {
                            key: 'D4E604CD2D50CEEC00CAB00F',
                            path: 'some/path/to/file.swift',
                        },
                    ]);
                });
            });
        });
        (0, vitest_1.describe)('group child is group reference', () => {
            const group = {
                isa: 'PBXGroup',
                children: [
                    {
                        value: 'D4E604C42D50CEEC00CAB00F',
                    },
                ],
                path: '',
            };
            (0, vitest_1.describe)('groups are undefined', () => {
                (0, vitest_1.it)('should return empty array', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    xcodeProject.objects.PBXGroup = undefined;
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('group reference is string', () => {
                (0, vitest_1.it)('should return array of file paths', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    const group = {
                        isa: 'PBXGroup',
                        children: [
                            {
                                value: 'D4E604CE2D50CEEC00CAB00F_comment',
                            },
                        ],
                        path: '',
                    };
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([]);
                });
            });
            (0, vitest_1.describe)('group reference is valid', () => {
                (0, vitest_1.it)('should return array of file paths', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([
                        {
                            key: 'D4E604CD2D50CEEC00CAB00F',
                            path: 'Project.app',
                        },
                    ]);
                });
            });
            (0, vitest_1.describe)('group reference has path', () => {
                (0, vitest_1.it)('should append the path to the file paths', () => {
                    // -- Arrange --
                    const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                    const group = {
                        isa: 'PBXGroup',
                        children: [
                            {
                                value: 'sub-group',
                            },
                        ],
                        path: '"some/path/to/group"',
                    };
                    const subgroup = {
                        isa: 'PBXGroup',
                        children: [
                            {
                                value: 'file-at-path',
                            },
                        ],
                    };
                    const file = {
                        isa: 'PBXFileReference',
                        path: '"some/file/at/path.swift"',
                        sourceTree: '<group>',
                    };
                    xcodeProject.objects.PBXGroup = {
                        'main-group': group,
                        'sub-group': subgroup,
                    };
                    xcodeProject.objects.PBXFileReference = {
                        'file-at-path': file,
                    };
                    // -- Act --
                    const files = xcodeProject.buildGroup(group);
                    // -- Assert --
                    (0, vitest_1.expect)(files).toEqual([
                        {
                            key: 'file-at-path',
                            path: 'some/file/at/path.swift',
                        },
                    ]);
                });
            });
        });
        (0, vitest_1.describe)('group child is not a file reference or group', () => {
            (0, vitest_1.it)('should be ignored', () => {
                // -- Arrange --
                const xcodeProject = new xcode_manager_1.XcodeProject(singleTargetProjectPath);
                xcodeProject.objects.PBXGroup = {};
                xcodeProject.objects.PBXFileReference = {};
                const group = {
                    isa: 'PBXGroup',
                    children: [
                        {
                            value: 'random-key',
                        },
                    ],
                    path: '',
                };
                // -- Act --
                const files = xcodeProject.buildGroup(group);
                // -- Assert --
                (0, vitest_1.expect)(files).toEqual([]);
            });
        });
    });
});
//# sourceMappingURL=xcode-manager.test.js.map