{"version":3,"file":"templates.test.js","sourceRoot":"","sources":["../../../test/nextjs/templates.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport {\n  getRootLayout,\n  getSentryServersideConfigContents,\n  getInstrumentationClientFileContents,\n  getWithSentryConfigOptionsTemplate,\n} from '../../src/nextjs/templates';\n\ndescribe('Next.js code templates', () => {\n  describe('getInstrumentationClientFileContents', () => {\n    it('generates client-side Sentry config with all features enabled', () => {\n      const template = getInstrumentationClientFileContents('my-dsn', {\n        performance: true,\n        replay: true,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"// This file configures the initialization of Sentry on the client.\n        // The added config here will be used whenever a users loads a page in their browser.\n        // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n        import * as Sentry from \"@sentry/nextjs\";\n\n        Sentry.init({\n          dsn: \"my-dsn\",\n\n          // Add optional integrations for additional features\n          integrations: [\n            Sentry.replayIntegration(),\n          ],\n\n          // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n          tracesSampleRate: 1,\n\n          // Define how likely Replay events are sampled.\n          // This sets the sample rate to be 10%. You may want this to be 100% while\n          // in development and sample at a lower rate in production\n          replaysSessionSampleRate: 0.1,\n\n          // Define how likely Replay events are sampled when an error occurs.\n          replaysOnErrorSampleRate: 1.0,\n\n          // Setting this option to true will print useful information to the console while you're setting up Sentry.\n          debug: false,\n        });\n\n        export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;\"\n      `);\n    });\n\n    it('generates client-side Sentry config with performance monitoring disabled', () => {\n      const template = getInstrumentationClientFileContents('my-dsn', {\n        performance: false,\n        replay: true,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"// This file configures the initialization of Sentry on the client.\n        // The added config here will be used whenever a users loads a page in their browser.\n        // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n        import * as Sentry from \"@sentry/nextjs\";\n\n        Sentry.init({\n          dsn: \"my-dsn\",\n\n          // Add optional integrations for additional features\n          integrations: [\n            Sentry.replayIntegration(),\n          ],\n\n          // Define how likely Replay events are sampled.\n          // This sets the sample rate to be 10%. You may want this to be 100% while\n          // in development and sample at a lower rate in production\n          replaysSessionSampleRate: 0.1,\n\n          // Define how likely Replay events are sampled when an error occurs.\n          replaysOnErrorSampleRate: 1.0,\n\n          // Setting this option to true will print useful information to the console while you're setting up Sentry.\n          debug: false,\n        });\n\n        export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;\"\n      `);\n    });\n\n    it('generates client-side Sentry config with session replay disabled', () => {\n      const template = getInstrumentationClientFileContents('my-dsn', {\n        performance: true,\n        replay: false,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"// This file configures the initialization of Sentry on the client.\n        // The added config here will be used whenever a users loads a page in their browser.\n        // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n        import * as Sentry from \"@sentry/nextjs\";\n\n        Sentry.init({\n          dsn: \"my-dsn\",\n\n          // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n          tracesSampleRate: 1,\n\n          // Setting this option to true will print useful information to the console while you're setting up Sentry.\n          debug: false,\n        });\n\n        export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;\"\n      `);\n    });\n  });\n\n  describe('getSentryServersideConfigContents', () => {\n    describe('server-side', () => {\n      it('generates server-side Sentry config with all features enabled', () => {\n        const template = getSentryServersideConfigContents('my-dsn', 'server', {\n          performance: true,\n          replay: true,\n        });\n\n        expect(template).toMatchInlineSnapshot(`\n          \"// This file configures the initialization of Sentry on the server.\n          // The config you add here will be used whenever the server handles a request.\n          // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n          import * as Sentry from \"@sentry/nextjs\";\n\n          Sentry.init({\n            dsn: \"my-dsn\",\n\n            // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n            tracesSampleRate: 1,\n\n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n\n      it('generates server-side Sentry config with performance monitoring disabled', () => {\n        const template = getSentryServersideConfigContents('my-dsn', 'server', {\n          performance: false,\n          replay: true,\n        });\n\n        expect(template).toMatchInlineSnapshot(`\n          \"// This file configures the initialization of Sentry on the server.\n          // The config you add here will be used whenever the server handles a request.\n          // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n          import * as Sentry from \"@sentry/nextjs\";\n\n          Sentry.init({\n            dsn: \"my-dsn\",\n\n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n\n      it('generates server-side Sentry config with spotlight disabled', () => {\n        const template = getSentryServersideConfigContents('my-dsn', 'server', {\n          performance: true,\n          replay: true,\n        });\n\n        expect(template).toMatchInlineSnapshot(`\n          \"// This file configures the initialization of Sentry on the server.\n          // The config you add here will be used whenever the server handles a request.\n          // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n          import * as Sentry from \"@sentry/nextjs\";\n\n          Sentry.init({\n            dsn: \"my-dsn\",\n\n            // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n            tracesSampleRate: 1,\n\n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n    });\n\n    describe('edge', () => {\n      it('generates edge Sentry config with all features enabled', () => {\n        const template = getSentryServersideConfigContents('my-dsn', 'edge', {\n          performance: true,\n          replay: true,\n        });\n\n        expect(template).toMatchInlineSnapshot(`\n          \"// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n          // The config you add here will be used whenever one of the edge features is loaded.\n          // Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n          // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n          import * as Sentry from \"@sentry/nextjs\";\n\n          Sentry.init({\n            dsn: \"my-dsn\",\n\n            // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n            tracesSampleRate: 1,\n\n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n\n      it('generates edge Sentry config with performance monitoring disabled', () => {\n        const template = getSentryServersideConfigContents('my-dsn', 'edge', {\n          performance: false,\n          replay: true,\n        });\n\n        expect(template).toMatchInlineSnapshot(`\n          \"// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n          // The config you add here will be used whenever one of the edge features is loaded.\n          // Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n          // https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n          import * as Sentry from \"@sentry/nextjs\";\n\n          Sentry.init({\n            dsn: \"my-dsn\",\n\n            // Setting this option to true will print useful information to the console while you're setting up Sentry.\n            debug: false,\n          });\n          \"\n        `);\n      });\n    });\n  });\n\n  describe('getWithSentryConfigOptionsTemplate', () => {\n    it('generates options for SaaS', () => {\n      const template = getWithSentryConfigOptionsTemplate({\n        orgSlug: 'my-org',\n        projectSlug: 'my-project',\n        selfHosted: false,\n        sentryUrl: 'https://dont-use-this-url.com',\n        tunnelRoute: true,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"{\n            // For all available options, see:\n            // https://www.npmjs.com/package/@sentry/webpack-plugin#options\n\n            org: \"my-org\",\n            project: \"my-project\",\n\n            // Only print logs for uploading source maps in CI\n            silent: !process.env.CI,\n\n            // For all available options, see:\n            // https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/\n\n            // Upload a larger set of source maps for prettier stack traces (increases build time)\n            widenClientFileUpload: true,\n\n            // Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.\n            // This can increase your server load as well as your hosting bill.\n            // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-\n            // side errors will fail.\n            tunnelRoute: \"/monitoring\",\n\n            // Automatically tree-shake Sentry logger statements to reduce bundle size\n            disableLogger: true,\n\n            // Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)\n            // See the following for more information:\n            // https://docs.sentry.io/product/crons/\n            // https://vercel.com/docs/cron-jobs\n            automaticVercelMonitors: true,\n          }\"\n      `);\n    });\n\n    it('generates options for self-hosted', () => {\n      const template = getWithSentryConfigOptionsTemplate({\n        orgSlug: 'my-org',\n        projectSlug: 'my-project',\n        selfHosted: true,\n        sentryUrl: 'https://my-sentry.com',\n        tunnelRoute: true,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"{\n            // For all available options, see:\n            // https://www.npmjs.com/package/@sentry/webpack-plugin#options\n\n            org: \"my-org\",\n            project: \"my-project\",\n            sentryUrl: \"https://my-sentry.com\",\n\n            // Only print logs for uploading source maps in CI\n            silent: !process.env.CI,\n\n            // For all available options, see:\n            // https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/\n\n            // Upload a larger set of source maps for prettier stack traces (increases build time)\n            widenClientFileUpload: true,\n\n            // Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.\n            // This can increase your server load as well as your hosting bill.\n            // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-\n            // side errors will fail.\n            tunnelRoute: \"/monitoring\",\n\n            // Automatically tree-shake Sentry logger statements to reduce bundle size\n            disableLogger: true,\n\n            // Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)\n            // See the following for more information:\n            // https://docs.sentry.io/product/crons/\n            // https://vercel.com/docs/cron-jobs\n            automaticVercelMonitors: true,\n          }\"\n      `);\n    });\n\n    it('comments out tunnelRoute if `tunnelRoute` option is disabled', () => {\n      const template = getWithSentryConfigOptionsTemplate({\n        orgSlug: 'my-org',\n        projectSlug: 'my-project',\n        selfHosted: false,\n        sentryUrl: 'https://dont-use-this-url.com',\n        tunnelRoute: false,\n      });\n\n      expect(template).toMatchInlineSnapshot(`\n        \"{\n            // For all available options, see:\n            // https://www.npmjs.com/package/@sentry/webpack-plugin#options\n\n            org: \"my-org\",\n            project: \"my-project\",\n\n            // Only print logs for uploading source maps in CI\n            silent: !process.env.CI,\n\n            // For all available options, see:\n            // https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/\n\n            // Upload a larger set of source maps for prettier stack traces (increases build time)\n            widenClientFileUpload: true,\n\n            // Uncomment to route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.\n            // This can increase your server load as well as your hosting bill.\n            // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-\n            // side errors will fail.\n            // tunnelRoute: \"/monitoring\",\n\n            // Automatically tree-shake Sentry logger statements to reduce bundle size\n            disableLogger: true,\n\n            // Enables automatic instrumentation of Vercel Cron Monitors. (Does not yet work with App Router route handlers.)\n            // See the following for more information:\n            // https://docs.sentry.io/product/crons/\n            // https://vercel.com/docs/cron-jobs\n            automaticVercelMonitors: true,\n          }\"\n      `);\n    });\n  });\n\n  describe('getRootLayout', () => {\n    it('generates a root layout component with types', () => {\n      expect(getRootLayout(true)).toMatchInlineSnapshot(`\n        \"// This file was generated by the Sentry wizard because we couldn't find a root layout file.\n        // You can delete this file at any time.\n\n        export const metadata = {\n          title: 'Sentry NextJS Example',\n          description: 'Generated by Sentry',\n        }\n\n        export default function RootLayout({\n          children,\n        }: {\n          children: React.ReactNode\n        }) {\n          return (\n            <html lang=\"en\">\n              <body>{children}</body>\n            </html>\n          )\n        }\n        \"\n      `);\n    });\n    it('generates a root layout component without types', () => {\n      expect(getRootLayout(false)).toMatchInlineSnapshot(`\n        \"// This file was generated by the Sentry wizard because we couldn't find a root layout file.\n        // You can delete this file at any time.\n\n        export const metadata = {\n          title: 'Sentry NextJS Example',\n          description: 'Generated by Sentry',\n        }\n\n        export default function RootLayout({\n          children,\n        }) {\n          return (\n            <html lang=\"en\">\n              <body>{children}</body>\n            </html>\n          )\n        }\n        \"\n      `);\n    });\n  });\n});\n"]}