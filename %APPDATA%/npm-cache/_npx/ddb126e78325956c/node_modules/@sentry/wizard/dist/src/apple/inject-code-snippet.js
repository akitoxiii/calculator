"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectCodeSnippet = void 0;
// @ts-expect-error - clack is ESM and TS complains about that. It works though
const prompts_1 = __importDefault(require("@clack/prompts"));
const Sentry = __importStar(require("@sentry/node"));
const chalk_1 = __importDefault(require("chalk"));
const telemetry_1 = require("../telemetry");
const debug_1 = require("../utils/debug");
const codeTools = __importStar(require("./code-tools"));
function injectCodeSnippet({ project, target, dsn, }) {
    (0, debug_1.debug)(`Injecting code snippet into project at path: ${chalk_1.default.cyan(project.projectPath)}`);
    const codeAdded = (0, telemetry_1.traceStep)('Add code snippet', () => {
        const files = project.filesForTarget(target);
        if (files === undefined || files.length == 0) {
            Sentry.setTag('snippet-candidate-files-not-found', true);
            return false;
        }
        return codeTools.addCodeSnippetToProject(project.projectPath, files, dsn);
    });
    Sentry.setTag('Snippet-Added', codeAdded);
    (0, debug_1.debug)(`Snippet added: ${chalk_1.default.cyan(codeAdded.toString())}`);
    if (!codeAdded) {
        prompts_1.default.log.warn('Added the Sentry dependency to your project but could not add the Sentry code snippet. Please add the code snippet manually by following the docs: https://docs.sentry.io/platforms/apple/guides/ios/#configure');
    }
}
exports.injectCodeSnippet = injectCodeSnippet;
//# sourceMappingURL=inject-code-snippet.js.map