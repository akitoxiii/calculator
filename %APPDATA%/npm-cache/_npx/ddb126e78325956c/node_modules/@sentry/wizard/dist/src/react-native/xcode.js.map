{"version":3,"file":"xcode.js","sourceRoot":"","sources":["../../../src/react-native/xcode.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport * as fs from 'node:fs';\n// @ts-expect-error - clack is ESM and TS complains about that. It works though\nimport * as clack from '@clack/prompts';\nimport chalk from 'chalk';\nimport { makeCodeSnippet, showCopyPasteInstructions } from '../utils/clack';\nimport { Project } from 'xcode';\n\ntype BuildPhase = { shellScript: string };\ntype BuildPhaseMap = Record<string, BuildPhase>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getValidExistingBuildPhases(xcodeProject: any): BuildPhaseMap {\n  const map: BuildPhaseMap = {};\n  const raw = xcodeProject.hash.project.objects.PBXShellScriptBuildPhase || {};\n  for (const key in raw) {\n    const val = raw[key];\n    val.isa && (map[key] = val);\n  }\n\n  return map;\n}\n\nexport class ErrorPatchSnippet {\n  constructor(public snippet: string) {}\n}\n\nexport async function patchBundlePhase(\n  bundlePhase: BuildPhase | undefined,\n  patch: (script: string) => string | ErrorPatchSnippet,\n) {\n  if (!bundlePhase) {\n    clack.log.warn(\n      `Could not find ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} build phase.`,\n    );\n    return;\n  }\n\n  const bundlePhaseIncludesSentry = doesBundlePhaseIncludeSentry(bundlePhase);\n  if (bundlePhaseIncludesSentry) {\n    clack.log.warn(\n      `Build phase ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} already includes Sentry.`,\n    );\n    return;\n  }\n\n  const script: string = JSON.parse(bundlePhase.shellScript);\n  const patchedScript = patch(script);\n  if (patchedScript instanceof ErrorPatchSnippet) {\n    await showCopyPasteInstructions({\n      filename: 'Xcode project',\n      codeSnippet: patchedScript.snippet,\n      hint: `Apply in the 'Bundle React Native code and images' build phase`,\n    });\n    return;\n  }\n  bundlePhase.shellScript = JSON.stringify(patchedScript);\n  clack.log.success(\n    `Patched Build phase ${chalk.cyan('Bundle React Native code and images')}.`,\n  );\n}\n\nexport function unPatchBundlePhase(bundlePhase: BuildPhase | undefined) {\n  if (!bundlePhase) {\n    clack.log.warn(\n      `Could not find ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} build phase.`,\n    );\n    return;\n  }\n\n  if (\n    !bundlePhase.shellScript.match(/sentry-cli\\s+react-native\\s+xcode/i) &&\n    !bundlePhase.shellScript.includes('sentry-xcode.sh')\n  ) {\n    clack.log.success(\n      `Build phase ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} does not include Sentry.`,\n    );\n    return;\n  }\n\n  bundlePhase.shellScript = JSON.stringify(\n    removeSentryFromBundleShellScript(\n      <string>JSON.parse(bundlePhase.shellScript),\n    ),\n  );\n  clack.log.success(\n    `Build phase ${chalk.cyan(\n      'Bundle React Native code and images',\n    )} unpatched successfully.`,\n  );\n}\n\nexport function removeSentryFromBundleShellScript(script: string): string {\n  return (\n    script\n      // remove sentry properties export\n      .replace(/^export SENTRY_PROPERTIES=sentry.properties\\r?\\n/m, '')\n      .replace(\n        /^\\/bin\\/sh .*?..\\/node_modules\\/@sentry\\/react-native\\/scripts\\/collect-modules.sh\"?\\r?\\n/m,\n        '',\n      )\n      // unwrap react-native-xcode.sh command.  In case someone replaced it\n      // entirely with the sentry-cli command we need to put the original\n      // version back in.\n      .replace(\n        /\\.\\.\\/node_modules\\/@sentry\\/cli\\/bin\\/sentry-cli\\s+react-native\\s+xcode\\s+\\$REACT_NATIVE_XCODE/i,\n        '$REACT_NATIVE_XCODE',\n      )\n      .replace(\n        //  eslint-disable-next-line no-useless-escape\n        /\\\"\\/bin\\/sh.*?sentry-xcode.sh\\s+\\$REACT_NATIVE_XCODE/i,\n        // eslint-disable-next-line no-useless-escape\n        '\"$REACT_NATIVE_XCODE',\n      )\n  );\n}\n\nexport function findBundlePhase(buildPhases: BuildPhaseMap) {\n  return Object.values(buildPhases).find((buildPhase) =>\n    buildPhase.shellScript.match(/\\/scripts\\/react-native-xcode\\.sh/i),\n  );\n}\n\nexport function doesBundlePhaseIncludeSentry(buildPhase: BuildPhase) {\n  const containsSentryCliRNCommand = !!buildPhase.shellScript.match(\n    /sentry-cli\\s+react-native\\s+xcode/i,\n  );\n  const containsBundledScript =\n    buildPhase.shellScript.includes('sentry-xcode.sh');\n  return containsSentryCliRNCommand || containsBundledScript;\n}\n\nexport function addSentryWithBundledScriptsToBundleShellScript(\n  script: string,\n): string | ErrorPatchSnippet {\n  let patchedScript = script;\n  const isLikelyPlainReactNativeScript = script.includes('$REACT_NATIVE_XCODE');\n  if (isLikelyPlainReactNativeScript) {\n    patchedScript = script.replace(\n      '$REACT_NATIVE_XCODE',\n      // eslint-disable-next-line no-useless-escape\n      '\\\\\"/bin/sh ../node_modules/@sentry/react-native/scripts/sentry-xcode.sh $REACT_NATIVE_XCODE\\\\\"',\n    );\n  }\n\n  const isLikelyExpoScript = script.includes('expo');\n  if (isLikelyExpoScript) {\n    const SENTRY_REACT_NATIVE_XCODE_PATH =\n      \"`\\\"$NODE_BINARY\\\" --print \\\"require('path').dirname(require.resolve('@sentry/react-native/package.json')) + '/scripts/sentry-xcode.sh'\\\"`\";\n    patchedScript = script.replace(\n      /^.*?(packager|scripts)\\/react-native-xcode\\.sh\\s*(\\\\'\\\\\\\\\")?/m,\n      // eslint-disable-next-line no-useless-escape\n      (match: string) => `/bin/sh ${SENTRY_REACT_NATIVE_XCODE_PATH} ${match}`,\n    );\n  }\n\n  if (patchedScript === script) {\n    // No changes were made\n    clack.log.error(\n      `Failed to patch ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} build phase.`,\n    );\n    if (isLikelyExpoScript) {\n      return new ErrorPatchSnippet(\n        makeCodeSnippet(true, (unchanged, plus, _minus) => {\n          return unchanged(\n            `${plus(\n              `/bin/sh \\`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('@sentry/react-native/package.json')) + '/scripts/sentry-xcode.sh'\"\\``,\n            )} \\`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"\\``,\n          );\n        }),\n      );\n    } else {\n      // plain react-native\n      return new ErrorPatchSnippet(\n        makeCodeSnippet(true, (unchanged, plus, _minus) => {\n          return unchanged(`WITH_ENVIRONMENT=\"$REACT_NATIVE_PATH/scripts/xcode/with-environment.sh\"\nREACT_NATIVE_XCODE=\"$REACT_NATIVE_PATH/scripts/react-native-xcode.sh\"\n\n/bin/sh -c \"$WITH_ENVIRONMENT ${plus(\n            `\\\\\"/bin/sh ../node_modules/@sentry/react-native/scripts/sentry-xcode.sh `,\n          )}$REACT_NATIVE_XCODE${plus(`\\\\\"`)}\"\n`);\n        }),\n      );\n    }\n  }\n\n  return patchedScript;\n}\n\nexport function addSentryWithCliToBundleShellScript(\n  script: string,\n): string | ErrorPatchSnippet {\n  if (!script.includes('$REACT_NATIVE_XCODE')) {\n    clack.log.error(\n      `Could not find $REACT_NATIVE_XCODE in ${chalk.cyan(\n        'Bundle React Native code and images',\n      )} build phase. Skipping patching.`,\n    );\n    return new ErrorPatchSnippet(\n      makeCodeSnippet(true, (unchanged, plus, _minus) => {\n        return unchanged(`${plus(`export SENTRY_PROPERTIES=sentry.properties\nexport EXTRA_PACKAGER_ARGS=\"--sourcemap-output $DERIVED_FILE_DIR/main.jsbundle.map\"\n`)}\n/bin/sh -c \"$WITH_ENVIRONMENT ${plus(\n          `\\\\\"../node_modules/@sentry/cli/bin/sentry-cli react-native xcode`,\n        )} $REACT_NATIVE_XCODE${plus(`\\\\\"`)}\"\n${plus(\n  `/bin/sh -c \"$WITH_ENVIRONMENT ../node_modules/@sentry/react-native/scripts/collect-modules.sh\"`,\n)}\n`);\n      }),\n    );\n  }\n  return (\n    'export SENTRY_PROPERTIES=sentry.properties\\n' +\n    'export EXTRA_PACKAGER_ARGS=\"--sourcemap-output $DERIVED_FILE_DIR/main.jsbundle.map\"\\n' +\n    script.replace(\n      '$REACT_NATIVE_XCODE',\n      () =>\n        // eslint-disable-next-line no-useless-escape\n        '\\\\\"../node_modules/@sentry/cli/bin/sentry-cli react-native xcode $REACT_NATIVE_XCODE\\\\\"',\n    ) +\n    '\\n/bin/sh -c \"$WITH_ENVIRONMENT ../node_modules/@sentry/react-native/scripts/collect-modules.sh\"\\n'\n  );\n}\n\nexport function addDebugFilesUploadPhaseWithBundledScripts(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  xcodeProject: any,\n  { debugFilesUploadPhaseExists }: { debugFilesUploadPhaseExists: boolean },\n) {\n  if (debugFilesUploadPhaseExists) {\n    clack.log.warn(\n      `Build phase ${chalk.cyan(\n        'Upload Debug Symbols to Sentry',\n      )} already exists.`,\n    );\n    return;\n  }\n\n  xcodeProject.addBuildPhase(\n    [],\n    'PBXShellScriptBuildPhase',\n    'Upload Debug Symbols to Sentry',\n    null,\n    {\n      shellPath: '/bin/sh',\n      shellScript: `/bin/sh ../node_modules/@sentry/react-native/scripts/sentry-xcode-debug-files.sh`,\n    },\n  );\n  clack.log.success(\n    `Added Build phase ${chalk.cyan('Upload Debug Symbols to Sentry')}.`,\n  );\n}\n\nexport function addDebugFilesUploadPhaseWithCli(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  xcodeProject: any,\n  { debugFilesUploadPhaseExists }: { debugFilesUploadPhaseExists: boolean },\n) {\n  if (debugFilesUploadPhaseExists) {\n    clack.log.warn(\n      `Build phase ${chalk.cyan(\n        'Upload Debug Symbols to Sentry',\n      )} already exists.`,\n    );\n    return;\n  }\n\n  xcodeProject.addBuildPhase(\n    [],\n    'PBXShellScriptBuildPhase',\n    'Upload Debug Symbols to Sentry',\n    null,\n    {\n      shellPath: '/bin/sh',\n      shellScript: `\nWITH_ENVIRONMENT=\"../node_modules/react-native/scripts/xcode/with-environment.sh\"\nif [ -f \"$WITH_ENVIRONMENT\" ]; then\n  . \"$WITH_ENVIRONMENT\"\nfi\nexport SENTRY_PROPERTIES=sentry.properties\n[ \"$SENTRY_INCLUDE_NATIVE_SOURCES\" = \"true\" ] && INCLUDE_SOURCES_FLAG=\"--include-sources\" || INCLUDE_SOURCES_FLAG=\"\"\n../node_modules/@sentry/cli/bin/sentry-cli debug-files upload \"$INCLUDE_SOURCES_FLAG\" \"$DWARF_DSYM_FOLDER_PATH\"\n`,\n    },\n  );\n  clack.log.success(\n    `Added Build phase ${chalk.cyan('Upload Debug Symbols to Sentry')}.`,\n  );\n}\n\nexport function unPatchDebugFilesUploadPhase(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  xcodeProject: any,\n) {\n  const buildPhasesMap =\n    xcodeProject.hash.project.objects.PBXShellScriptBuildPhase || {};\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const debugFilesUploadPhaseResult = findDebugFilesUploadPhase(buildPhasesMap);\n  if (!debugFilesUploadPhaseResult) {\n    clack.log.success(\n      `Build phase ${chalk.cyan('Upload Debug Symbols to Sentry')} not found.`,\n    );\n    return;\n  }\n\n  const [debugFilesUploadPhaseKey] = debugFilesUploadPhaseResult;\n  const firstTarget: string = xcodeProject.getFirstTarget().uuid;\n  const nativeTargets = xcodeProject.hash.project.objects.PBXNativeTarget;\n\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete buildPhasesMap[debugFilesUploadPhaseKey];\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete buildPhasesMap[`${debugFilesUploadPhaseKey}_comment`];\n  const phases = nativeTargets[firstTarget].buildPhases;\n  if (phases) {\n    for (let i = 0; i < phases.length; i++) {\n      if (phases[i].value === debugFilesUploadPhaseKey) {\n        phases.splice(i, 1);\n        break;\n      }\n    }\n  }\n  clack.log.success(\n    `Build phase ${chalk.cyan(\n      'Upload Debug Symbols to Sentry',\n    )} removed successfully.`,\n  );\n}\n\nexport function findDebugFilesUploadPhase(\n  buildPhasesMap: Record<string, BuildPhase>,\n): [key: string, buildPhase: BuildPhase] | undefined {\n  return Object.entries(buildPhasesMap).find(([_, buildPhase]) => {\n    const containsCliDebugUpload =\n      typeof buildPhase !== 'string' &&\n      !!buildPhase.shellScript.match(\n        /sentry-cli\\s+(upload-dsym|debug-files upload)\\b/,\n      );\n    const containsBundledDebugUpload =\n      typeof buildPhase !== 'string' &&\n      buildPhase.shellScript.includes('sentry-xcode-debug-files.sh');\n    return containsCliDebugUpload || containsBundledDebugUpload;\n  });\n}\n\nexport function writeXcodeProject(\n  xcodeProjectPath: string,\n  xcodeProject: Project,\n) {\n  const newContent = xcodeProject.writeSync();\n  const currentContent = fs.readFileSync(xcodeProjectPath, 'utf-8');\n  if (newContent === currentContent) {\n    return;\n  }\n\n  fs.writeFileSync(xcodeProjectPath, newContent, 'utf-8');\n  clack.log.success(\n    chalk.green(`Xcode project ${chalk.cyan(xcodeProjectPath)} changes saved.`),\n  );\n}\n"]}