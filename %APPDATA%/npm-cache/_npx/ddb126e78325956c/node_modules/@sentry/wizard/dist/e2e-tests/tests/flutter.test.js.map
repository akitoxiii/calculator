{"version":3,"file":"flutter.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/flutter.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA8B;AAC9B,gDAAkC;AAClC,mDAAkD;AAClD,oCAKkB;AAClB,oCAA+C;AAC/C,oCAKkB;AAClB,mCAAqE;AAErE,IAAA,iBAAQ,EAAC,SAAS,EAAE,GAAG,EAAE;IACvB,MAAM,WAAW,GAAG,uBAAW,CAAC,OAAO,CAAC;IACxC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,uCAAuC,CACxC,CAAC;IAEF,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,cAAc,GAAG,IAAA,2BAAmB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAEpE,MAAM,qBAAqB,GAAG,MAAM,cAAc,CAAC,aAAa;YAC9D,+FAA+F;YAC/F,+CAA+C,CAChD,CAAC;YAEF,MAAM,uBAAuB,GAC3B,qBAAqB;gBACrB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC;gBACZ,mGAAmG;gBACnG,6EAA6E,CAC9E,CAAC,CAAC;YAEL,uBAAuB;gBACrB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,gDAAgD,CACjD,CAAC,CAAC;YAEL,cAAc,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,0BAA0B,EAAE,GAAG,EAAE;YACpC,IAAA,yBAAiB,EAAC,GAAG,UAAU,eAAe,EAAE,iBAAiB,CAAC,CAAC,CAAC,eAAe;YACnF,IAAA,yBAAiB,EAAC,GAAG,UAAU,eAAe,EAAE,qBAAqB,CAAC,CAAC,CAAC,mBAAmB;YAC3F,IAAA,yBAAiB,EAAC,GAAG,UAAU,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC,wBAAwB;QACtF,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,IAAA,6BAAqB,EAAC,UAAU,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,IAAA,yBAAiB,EAAC,GAAG,UAAU,aAAa,EAAE,mBAAmB,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,IAAA,yBAAiB,EACf,GAAG,UAAU,gBAAgB,EAC7B,sDAAsD,CACvD,CAAC;YACF,IAAA,yBAAiB,EACf,GAAG,UAAU,gBAAgB,EAC7B,2BAA2B,CAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,IAAA,yBAAiB,EACf,GAAG,UAAU,gBAAgB,EAC7B,iCAAiC,CAClC,CAAC;YACF,IAAA,yBAAiB,EACf,GAAG,UAAU,gBAAgB,EAC7B,mCAAmC,CACpC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;YAClC,MAAM,IAAA,4BAAoB,EAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,cAAc,GAAG,IAAA,2BAAmB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAEpE,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,UAAU,MAAM,CAAC,EAAE;gBACtC,EAAE,CAAC,UAAU,CAAC,GAAG,UAAU,MAAM,EAAE,GAAG,UAAU,OAAO,CAAC,CAAC;aAC1D;YACD,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,UAAU,QAAQ,CAAC,EAAE;gBACxC,EAAE,CAAC,UAAU,CAAC,GAAG,UAAU,QAAQ,EAAE,GAAG,UAAU,SAAS,CAAC,CAAC;aAC9D;YAED,MAAM,gCAAgC,GACpC,MAAM,cAAc,CAAC,aAAa,CAAC,iCAAiC,CAAC,CAAC;YAExE,MAAM,qBAAqB,GACzB,gCAAgC;gBAChC,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC;gBACZ,+FAA+F;gBAC/F,+CAA+C,CAChD,CAAC,CAAC;YAEL,qBAAqB;gBACnB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,gDAAgD,CACjD,CAAC,CAAC;YAEL,cAAc,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,wEAAwE,EAAE,GAAG,EAAE;YAClF,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CACjC,GAAG,UAAU,gBAAgB,EAC7B,OAAO,CACR,CAAC;YACF,IAAA,eAAM,EAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport {\n  KEYS,\n  // checkEnvBuildPlugin,\n  cleanupGit,\n  revertLocalChanges,\n} from '../utils';\nimport { startWizardInstance } from '../utils';\nimport {\n  checkFileContents,\n  checkIfFlutterBuilds,\n  // checkFileExists,\n  checkSentryProperties,\n} from '../utils';\nimport { afterAll, beforeAll, describe, expect, test } from 'vitest';\n\ndescribe('Flutter', () => {\n  const integration = Integration.flutter;\n  const projectDir = path.resolve(\n    __dirname,\n    '../test-applications/flutter-test-app',\n  );\n\n  describe('with apple platforms', () => {\n    beforeAll(async () => {\n      const wizardInstance = startWizardInstance(integration, projectDir);\n\n      const tracingOptionPrompted = await wizardInstance.waitForOutput(\n        // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n        'to track the performance of your application?',\n      );\n\n      const profilingOptionPrompted =\n        tracingOptionPrompted &&\n        (await wizardInstance.sendStdinAndWaitForOutput(\n          [KEYS.ENTER],\n          // \"Do you want to enable Profiling\", sometimes doesn't work as `Profiling` can be printed in bold.\n          'to analyze CPU usage and optimize performance-critical code on iOS & macOS?',\n        ));\n\n      profilingOptionPrompted &&\n        (await wizardInstance.sendStdinAndWaitForOutput(\n          [KEYS.ENTER],\n          'Successfully installed the Sentry Flutter SDK!',\n        ));\n\n      wizardInstance.kill();\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    test('pubspec.yaml is updated.', () => {\n      checkFileContents(`${projectDir}/pubspec.yaml`, `sentry_flutter:`); // dependencies\n      checkFileContents(`${projectDir}/pubspec.yaml`, `sentry_dart_plugin:`); // dev_dependencies\n      checkFileContents(`${projectDir}/pubspec.yaml`, `sentry:`); // gradle plugin options\n    });\n\n    test('sentry.properties exists and has auth token', () => {\n      checkSentryProperties(projectDir);\n    });\n\n    test('.gitignore has sentry.properties', () => {\n      checkFileContents(`${projectDir}/.gitignore`, `sentry.properties`);\n    });\n\n    test('lib/main.dart calls sentry init', () => {\n      checkFileContents(\n        `${projectDir}/lib/main.dart`,\n        `import 'package:sentry_flutter/sentry_flutter.dart';`,\n      );\n      checkFileContents(\n        `${projectDir}/lib/main.dart`,\n        `await SentryFlutter.init(`,\n      );\n    });\n\n    test('lib/main.dart enables tracing and profiling', () => {\n      checkFileContents(\n        `${projectDir}/lib/main.dart`,\n        `options.tracesSampleRate = 1.0;`,\n      );\n      checkFileContents(\n        `${projectDir}/lib/main.dart`,\n        `options.profilesSampleRate = 1.0;`,\n      );\n    });\n\n    test('builds correctly', async () => {\n      await checkIfFlutterBuilds(projectDir, 'âœ“ Built build/web');\n    });\n  });\n\n  describe('without apple platforms', () => {\n    beforeAll(async () => {\n      const wizardInstance = startWizardInstance(integration, projectDir);\n\n      if (fs.existsSync(`${projectDir}/ios`)) {\n        fs.renameSync(`${projectDir}/ios`, `${projectDir}/_ios`);\n      }\n      if (fs.existsSync(`${projectDir}/macos`)) {\n        fs.renameSync(`${projectDir}/macos`, `${projectDir}/_macos`);\n      }\n\n      const continueOnUncommitedFilesPromted =\n        await wizardInstance.waitForOutput('Do you want to continue anyway?');\n\n      const tracingOptionPrompted =\n        continueOnUncommitedFilesPromted &&\n        (await wizardInstance.sendStdinAndWaitForOutput(\n          [KEYS.ENTER],\n          // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n          'to track the performance of your application?',\n        ));\n\n      tracingOptionPrompted &&\n        (await wizardInstance.sendStdinAndWaitForOutput(\n          [KEYS.ENTER],\n          'Successfully installed the Sentry Flutter SDK!',\n        ));\n\n      wizardInstance.kill();\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    test('lib/main.dart does not add profiling with missing ios and macos folder', () => {\n      const fileContent = fs.readFileSync(\n        `${projectDir}/lib/main.dart`,\n        'utf-8',\n      );\n      expect(fileContent).not.toContain(`options.profilesSampleRate = 1.0;`);\n    });\n  });\n});\n"]}