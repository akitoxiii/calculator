"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeAppBuildGradle = exports.removeRNSentryGradlePlugin = exports.addRNSentryGradlePlugin = exports.doesAppBuildGradleIncludeRNSentryGradlePlugin = void 0;
const fs = __importStar(require("fs"));
const applyFrom = `apply from: new File(["node", "--print", "require.resolve('@sentry/react-native/package.json')"].execute().text.trim(), "../sentry.gradle")`;
function doesAppBuildGradleIncludeRNSentryGradlePlugin(content) {
    return content.includes('sentry.gradle');
}
exports.doesAppBuildGradleIncludeRNSentryGradlePlugin = doesAppBuildGradleIncludeRNSentryGradlePlugin;
function addRNSentryGradlePlugin(content) {
    return content.replace(/^android {/m, (match) => `${applyFrom}\n${match}`);
}
exports.addRNSentryGradlePlugin = addRNSentryGradlePlugin;
function removeRNSentryGradlePlugin(content) {
    return content.replace(/^\s*apply from:.*sentry\.gradle.*;?\s*?\r?\n/m, '');
}
exports.removeRNSentryGradlePlugin = removeRNSentryGradlePlugin;
function writeAppBuildGradle(path, newContent) {
    const currentContent = fs.readFileSync(path, 'utf-8');
    if (newContent === currentContent) {
        return;
    }
    fs.writeFileSync(path, newContent, 'utf-8');
}
exports.writeAppBuildGradle = writeAppBuildGradle;
//# sourceMappingURL=gradle.js.map