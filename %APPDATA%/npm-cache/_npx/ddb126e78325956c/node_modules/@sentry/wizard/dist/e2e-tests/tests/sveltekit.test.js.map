{"version":3,"file":"sveltekit.test.js","sourceRoot":"","sources":["../../../e2e-tests/tests/sveltekit.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAkC;AAClC,mDAAkD;AAClD,oCAckB;AAClB,mCAA6D;AAE7D,MAAM,oBAAoB,GAAG;;;;;;;;;;CAU5B,CAAC;AACF,MAAM,oBAAoB,GAAG;;;;;;;;;;;CAW5B,CAAC;AAEF,KAAK,UAAU,2BAA2B,CACxC,UAAkB,EAClB,WAAwB,EACxB,kBAGY;IAEZ,MAAM,cAAc,GAAG,IAAA,2BAAmB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACpE,IAAI,sBAAsB,GAAG,KAAK,CAAC;IAEnC,IAAI,kBAAkB,EAAE;QACtB,kBAAkB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAE5C,4FAA4F;QAC5F,MAAM,cAAc,CAAC,aAAa,CAAC,iCAAiC,CAAC,CAAC;QAEtE,sBAAsB,GAAG,MAAM,cAAc,CAAC,yBAAyB,CACrE,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,qCAAqC,CACtC,CAAC;KACH;SAAM;QACL,sBAAsB,GAAG,MAAM,cAAc,CAAC,aAAa,CACzD,oCAAoC,CACrC,CAAC;KACH;IAED,MAAM,qBAAqB,GACzB,sBAAsB;QACtB,CAAC,MAAM,cAAc,CAAC,yBAAyB;QAC7C,0CAA0C;QAC1C,CAAC,YAAI,CAAC,IAAI,EAAE,YAAI,CAAC,KAAK,CAAC;QACvB,+FAA+F;QAC/F,+CAA+C,EAC/C;YACE,OAAO,EAAE,MAAO;SACjB,CACF,CAAC,CAAC;IAEL,MAAM,oBAAoB,GACxB,qBAAqB;QACrB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC;QACZ,2HAA2H;QAC3H,mEAAmE,CACpE,CAAC,CAAC;IAEL,oBAAoB;QAClB,CAAC,MAAM,cAAc,CAAC,yBAAyB,CAC7C,CAAC,YAAI,CAAC,KAAK,CAAC,EACZ,uCAAuC,EACvC;YACE,QAAQ,EAAE,IAAI;SACf,CACF,CAAC,CAAC;IAEL,MAAM,cAAc,CAAC,yBAAyB,CAC5C,CAAC,YAAI,CAAC,KAAK,EAAE,YAAI,CAAC,KAAK,CAAC,EACxB,kDAAkD,CACnD,CAAC;IAEF,cAAc,CAAC,IAAI,EAAE,CAAC;AACxB,CAAC;AAED,SAAS,qBAAqB,CAC5B,UAAkB,EAClB,WAAwB,EACxB,OAGC;IAED,IAAA,aAAI,EAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,IAAA,wBAAgB,EAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,kDAAkD,EAAE,GAAG,EAAE;QAC5D,IAAA,2BAAmB,EAAC,UAAU,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,qBAAqB,EAAE,GAAG,EAAE;QAC/B,IAAA,uBAAe,EACb,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,6CAA6C,CAAC,CACxE,CAAC;QACF,IAAA,uBAAe,EACb,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,2CAA2C,CAAC,CACtE,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAA,yBAAiB,EACf,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAC1C;;CAEL,CACI,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,oBAAoB,EAAE,GAAG,EAAE;QAC9B,IAAA,uBAAe,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC,CAAC;QACjE,IAAA,uBAAe,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,IAAA,qBAAa,EAAC,UAAU,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAA,4BAAoB,EACxB,UAAU,EACV,OAAO,EAAE,qBAAqB,IAAI,UAAU,CAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,aAAI,EAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAA,6BAAqB,EACzB,UAAU,EACV,OAAO,EAAE,sBAAsB,IAAI,WAAW,EAC9C,SAAS,CACV,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,IAAA,iBAAQ,EAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,MAAM,WAAW,GAAG,uBAAW,CAAC,SAAS,CAAC;QAC1C,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,yCAAyC,CAC1C,CAAC;QAEF,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,2BAA2B,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,qBAAqB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAE/C,IAAA,aAAI,EAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,IAAA,yBAAiB,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE;gBACjE,8CAA8C;gBAC9C;UACE,iBAAS,CAAC,WAAW;;;;;;;;;;;;;;IAc3B;gBACI,mDAAmD;aACpD,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,IAAA,yBAAiB,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE;gBACjE,8CAA8C;gBAC9C;UACE,iBAAS,CAAC,WAAW;;;;;;IAM3B;gBACI,qDAAqD;aACtD,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,WAAW,GAAG,uBAAW,CAAC,SAAS,CAAC;QAC1C,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAC7B,SAAS,EACT,yCAAyC,CAC1C,CAAC;QAEF,IAAA,kBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,2BAA2B,CAC/B,UAAU,EACV,WAAW,EACX,CAAC,UAAU,EAAE,EAAE;gBACb,IAAA,kBAAU,EACR,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAC/C,oBAAoB,CACrB,CAAC;gBAEF,IAAA,kBAAU,EACR,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAC/C,oBAAoB,CACrB,CAAC;YACJ,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,iBAAQ,EAAC,GAAG,EAAE;YACZ,IAAA,0BAAkB,EAAC,UAAU,CAAC,CAAC;YAC/B,IAAA,kBAAU,EAAC,UAAU,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,qBAAqB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAE/C,sEAAsE;QACtE,iEAAiE;QACjE,IAAA,aAAI,EAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,IAAA,yBAAiB,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE;gBACjE,8CAA8C;gBAC9C;YACI,iBAAS,CAAC,WAAW;;;;;GAK9B;gBACK,0DAA0D;aAC3D,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,aAAI,EAAC,sCAAsC,EAAE,GAAG,EAAE;YAChD,IAAA,yBAAiB,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE;gBACjE,8CAA8C;gBAC9C;YACI,iBAAS,CAAC,WAAW;;GAE9B;gBACK,4DAA4D;aAC7D,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as path from 'node:path';\nimport { Integration } from '../../lib/Constants';\nimport {\n  KEYS,\n  TEST_ARGS,\n  checkEnvBuildPlugin,\n  checkFileContents,\n  checkFileExists,\n  checkIfBuilds,\n  checkIfRunsOnDevMode,\n  checkIfRunsOnProdMode,\n  checkPackageJson,\n  cleanupGit,\n  createFile,\n  revertLocalChanges,\n  startWizardInstance,\n} from '../utils';\nimport { afterAll, beforeAll, describe, test } from 'vitest';\n\nconst SERVER_HOOK_TEMPLATE = `import type { Handle } from '@sveltejs/kit';\n\nexport const handle: Handle = async ({ event, resolve }) => {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn response;\n};\n`;\nconst CLIENT_HOOK_TEMPLATE = `\nexport async function handleError({ error, event }) {\n  // you can capture the \\`error\\` and \\`event\\` from the client\n  // but it only runs if the unexpected error comes from \\`+ page.ts\\`\n  console.log(error)\n\n  return {\n    // don't show sensitive data to the user\n    message: 'Yikes! ðŸ’©',\n  }\n}\n`;\n\nasync function runWizardOnSvelteKitProject(\n  projectDir: string,\n  integration: Integration,\n  fileModificationFn?: (\n    projectDir: string,\n    integration: Integration,\n  ) => unknown,\n) {\n  const wizardInstance = startWizardInstance(integration, projectDir);\n  let packageManagerPrompted = false;\n\n  if (fileModificationFn) {\n    fileModificationFn(projectDir, integration);\n\n    // As we modified project, we have a warning prompt before we get the package manager prompt\n    await wizardInstance.waitForOutput('Do you want to continue anyway?');\n\n    packageManagerPrompted = await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Please select your package manager.',\n    );\n  } else {\n    packageManagerPrompted = await wizardInstance.waitForOutput(\n      'Please select your package manager',\n    );\n  }\n\n  const tracingOptionPrompted =\n    packageManagerPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      // Selecting `yarn` as the package manager\n      [KEYS.DOWN, KEYS.ENTER],\n      // \"Do you want to enable Tracing\", sometimes doesn't work as `Tracing` can be printed in bold.\n      'to track the performance of your application?',\n      {\n        timeout: 240_000,\n      },\n    ));\n\n  const replayOptionPrompted =\n    tracingOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      // \"Do you want to enable Sentry Session Replay\", sometimes doesn't work as `Sentry Session Replay` can be printed in bold.\n      'to get a video-like reproduction of errors during a user session?',\n    ));\n\n  replayOptionPrompted &&\n    (await wizardInstance.sendStdinAndWaitForOutput(\n      [KEYS.ENTER],\n      'Do you want to create an example page',\n      {\n        optional: true,\n      },\n    ));\n\n  await wizardInstance.sendStdinAndWaitForOutput(\n    [KEYS.ENTER, KEYS.ENTER],\n    'Successfully installed the Sentry SvelteKit SDK!',\n  );\n\n  wizardInstance.kill();\n}\n\nfunction checkSvelteKitProject(\n  projectDir: string,\n  integration: Integration,\n  options?: {\n    devModeExpectedOutput: string;\n    prodModeExpectedOutput: string;\n  },\n) {\n  test('should have the correct package.json', () => {\n    checkPackageJson(projectDir, integration);\n  });\n\n  test('should have the correct .env.sentry-build-plugin', () => {\n    checkEnvBuildPlugin(projectDir);\n  });\n\n  test('example page exists', () => {\n    checkFileExists(\n      path.resolve(projectDir, 'src/routes/sentry-example-page/+page.svelte'),\n    );\n    checkFileExists(\n      path.resolve(projectDir, 'src/routes/sentry-example-page/+server.js'),\n    );\n  });\n\n  test('vite.config contains sentry plugin', () => {\n    checkFileContents(\n      path.resolve(projectDir, 'vite.config.ts'),\n      `plugins: [sentrySvelteKit({\n        sourceMapsUploadOptions: {\n`,\n    );\n  });\n\n  test('hook files created', () => {\n    checkFileExists(path.resolve(projectDir, 'src/hooks.server.ts'));\n    checkFileExists(path.resolve(projectDir, 'src/hooks.client.ts'));\n  });\n\n  test('builds successfully', async () => {\n    await checkIfBuilds(projectDir);\n  });\n\n  test('runs on dev mode correctly', async () => {\n    await checkIfRunsOnDevMode(\n      projectDir,\n      options?.devModeExpectedOutput || 'ready in',\n    );\n  });\n\n  test('runs on prod mode correctly', async () => {\n    await checkIfRunsOnProdMode(\n      projectDir,\n      options?.prodModeExpectedOutput || 'to expose',\n      'preview',\n    );\n  });\n}\n\ndescribe('Sveltekit', () => {\n  describe('without existing hooks', () => {\n    const integration = Integration.sveltekit;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/sveltekit-test-app',\n    );\n\n    beforeAll(async () => {\n      await runWizardOnSvelteKitProject(projectDir, integration);\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkSvelteKitProject(projectDir, integration);\n\n    test('hooks.client.ts contains sentry', () => {\n      checkFileContents(path.resolve(projectDir, 'src/hooks.client.ts'), [\n        `import * as Sentry from '@sentry/sveltekit';`,\n        `Sentry.init({\n  dsn: '${TEST_ARGS.PROJECT_DSN}',\n\n  tracesSampleRate: 1.0,\n\n  // This sets the sample rate to be 10%. You may want this to be 100% while\n  // in development and sample at a lower rate in production\n  replaysSessionSampleRate: 0.1,\n\n  // If the entire session is not sampled, use the below sample rate to sample\n  // sessions when an error occurs.\n  replaysOnErrorSampleRate: 1.0,\n\n  // If you don't want to use Session Replay, just remove the line below:\n  integrations: [replayIntegration()],\n});`,\n        'export const handleError = handleErrorWithSentry(',\n      ]);\n    });\n\n    test('hooks.server.ts contains sentry', () => {\n      checkFileContents(path.resolve(projectDir, 'src/hooks.server.ts'), [\n        `import * as Sentry from '@sentry/sveltekit';`,\n        `Sentry.init({\n  dsn: '${TEST_ARGS.PROJECT_DSN}',\n\n  tracesSampleRate: 1.0,\n\n  // uncomment the line below to enable Spotlight (https://spotlightjs.com)\n  // spotlight: import.meta.env.DEV,\n});`,\n        'export const handleError = handleErrorWithSentry();',\n      ]);\n    });\n  });\n\n  describe('with existing hooks', () => {\n    const integration = Integration.sveltekit;\n    const projectDir = path.resolve(\n      __dirname,\n      '../test-applications/sveltekit-test-app',\n    );\n\n    beforeAll(async () => {\n      await runWizardOnSvelteKitProject(\n        projectDir,\n        integration,\n        (projectDir) => {\n          createFile(\n            path.resolve(projectDir, 'src/hooks.server.ts'),\n            SERVER_HOOK_TEMPLATE,\n          );\n\n          createFile(\n            path.resolve(projectDir, 'src/hooks.client.ts'),\n            CLIENT_HOOK_TEMPLATE,\n          );\n        },\n      );\n    });\n\n    afterAll(() => {\n      revertLocalChanges(projectDir);\n      cleanupGit(projectDir);\n    });\n\n    checkSvelteKitProject(projectDir, integration);\n\n    // These are removed from the common tests as the content is different\n    // when the hooks are merged instead of created from the template\n    test('hooks.client.ts contains sentry instrumentation', () => {\n      checkFileContents(path.resolve(projectDir, 'src/hooks.client.ts'), [\n        `import * as Sentry from '@sentry/sveltekit';`,\n        `Sentry.init({\n    dsn: \"${TEST_ARGS.PROJECT_DSN}\",\n    tracesSampleRate: 1,\n    replaysSessionSampleRate: 0.1,\n    replaysOnErrorSampleRate: 1,\n    integrations: [Sentry.replayIntegration()]\n})`,\n        'export const handleError = Sentry.handleErrorWithSentry(',\n      ]);\n    });\n\n    test('hooks.server.ts contains sentry init', () => {\n      checkFileContents(path.resolve(projectDir, 'src/hooks.server.ts'), [\n        `import * as Sentry from '@sentry/sveltekit';`,\n        `Sentry.init({\n    dsn: \"${TEST_ARGS.PROJECT_DSN}\",\n    tracesSampleRate: 1\n})`,\n        'export const handleError = Sentry.handleErrorWithSentry();',\n      ]);\n    });\n  });\n});\n"]}